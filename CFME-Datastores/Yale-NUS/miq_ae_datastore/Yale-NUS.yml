---
Yale-NUS:
  __domain__.yaml:
    object_type: domain
    version: 1.0
    object:
      attributes:
        name: Yale-NUS
        description: 
        display_name: 
        system: false
        priority: 3
        enabled: true
  Proxies:
    __namespace__.yaml:
      object_type: namespace
      version: 1.0
      object:
        attributes:
          name: Proxies
          description: Resolves routes for operations to appropriate cloud/infra providers
          display_name: 
          system: 
          priority: 
          enabled: 
    Network:
      __namespace__.yaml:
        object_type: namespace
        version: 1.0
        object:
          attributes:
            name: Network
            description: 
            display_name: 
            system: 
            priority: 
            enabled: 
      IPAddress:
        __namespace__.yaml:
          object_type: namespace
          version: 1.0
          object:
            attributes:
              name: IPAddress
              description: 
              display_name: 
              system: 
              priority: 
              enabled: 
        Cloud.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: 
                display_name: 
                name: Cloud
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: relationship
                  name: amazon_rel
                  display_name: 
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: 
                  substitute: true
                  message: amazon
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: relationship
                  name: openstack_rel
                  display_name: 
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: 
                  substitute: true
                  message: openstack
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: relationship
                  name: amazon_btn_rel
                  display_name: 
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: 
                  substitute: false
                  message: amazon_from_btn
                  visibility: 
                  collect: 
                  scope: 
                  description: This relationship should be used when invoked from
                    a custom button
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: relationship
                  name: openstack_btn_rel
                  display_name: 
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: 
                  substitute: true
                  message: openstack_from_btn
                  visibility: 
                  collect: 
                  scope: 
                  description: This relationship should be used when invoked from
                    a custom button
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
          Attach.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: Attach
                inherits: 
                description: 
              fields:
              - amazon_btn_rel:
                  value: ! '#todo'
              - openstack_btn_rel:
                  value: /Integration/OpenStack/Neutron/FloatingIPAttach/VmButtonInvocation#create
          Detach.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: Detach
                inherits: 
                description: 
              fields:
              - amazon_btn_rel:
                  value: ! '#todo'
              - openstack_btn_rel:
                  value: /Integration/OpenStack/Neutron/FloatingIPDetach/VmButtonInvocation#create
    Volume:
      __namespace__.yaml:
        object_type: namespace
        version: 1.0
        object:
          attributes:
            name: Volume
            description: Volume or disk CRUD operations
            display_name: 
            system: 
            priority: 
            enabled: 
      Cloud.class:
        __class__.yaml:
          object_type: class
          version: 1.0
          object:
            attributes:
              description: Proxy for Volume management in Cloud providers
              display_name: Cloud
              name: Cloud
              type: 
              inherits: 
              visibility: 
              owner: 
            schema:
            - field:
                aetype: relationship
                name: amazon_rel
                display_name: 
                datatype: string
                priority: 1
                owner: 
                default_value: 
                substitute: true
                message: amazon
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: openstack_rel
                display_name: 
                datatype: string
                priority: 2
                owner: 
                default_value: 
                substitute: true
                message: openstack
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: amazon_btn_rel
                display_name: 
                datatype: string
                priority: 3
                owner: 
                default_value: 
                substitute: true
                message: amazon_from_btn
                visibility: 
                collect: 
                scope: 
                description: This relationship should be used when invoked from a
                  custom button
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: openstack_btn_rel
                display_name: 
                datatype: string
                priority: 4
                owner: 
                default_value: 
                substitute: true
                message: openstack_from_btn
                visibility: 
                collect: 
                scope: 
                description: This relationship should be used when invoked from a
                  custom button
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
        Attach.yaml:
          object_type: instance
          version: 1.0
          object:
            attributes:
              display_name: Attach Volume
              name: Attach
              inherits: 
              description: Attach a Volume
            fields:
            - amazon_btn_rel:
                value: ! '#todo'
            - openstack_btn_rel:
                value: /Integration/OpenStack/Cinder/VolumeAttach/VmButtonInvocation#create
        Create.yaml:
          object_type: instance
          version: 1.0
          object:
            attributes:
              display_name: Create Volume
              name: Create
              inherits: 
              description: Create a Volume
            fields:
            - amazon_btn_rel:
                value: ! '#todo'
            - openstack_btn_rel:
                value: /Integration/OpenStack/Cinder/VolumeCreate/VmButtonInvocation#create
        Delete.yaml:
          object_type: instance
          version: 1.0
          object:
            attributes:
              display_name: Delete Volume
              name: Delete
              inherits: 
              description: Delete a Volume
            fields:
            - amazon_btn_rel:
                value: ! '#todo'
            - openstack_btn_rel:
                value: /Integration/OpenStack/Cinder/VolumeDelete/VmButtonInvocation#create
        Detach.yaml:
          object_type: instance
          version: 1.0
          object:
            attributes:
              display_name: Detach Volume
              name: Detach
              inherits: 
              description: Detach a Volume from a Cloud Instance
            fields:
            - amazon_btn_rel:
                value: ! '#todo'
            - openstack_btn_rel:
                value: /Integration/OpenStack/Cinder/VolumeDetach/VmButtonInvocation#create
  System:
    __namespace__.yaml:
      object_type: namespace
      version: 1.0
      object:
        attributes:
          name: System
          description: 
          display_name: 
          system: 
          priority: 
          enabled: 
    Policy.class:
      __class__.yaml:
        object_type: class
        version: 1.0
        object:
          attributes:
            description: Policy
            display_name: 
            name: Policy
            type: 
            inherits: 
            visibility: 
            owner: 
          schema:
          - field:
              aetype: assertion
              name: guard
              display_name: 
              datatype: 
              priority: 1
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: attribute
              name: logical_event
              display_name: 
              datatype: 
              priority: 2
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: on_entry
              display_name: 
              datatype: 
              priority: 8
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel1
              display_name: 
              datatype: 
              priority: 9
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth1
              display_name: 
              datatype: 
              priority: 10
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel2
              display_name: 
              datatype: 
              priority: 11
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth2
              display_name: 
              datatype: 
              priority: 12
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel3
              display_name: 
              datatype: 
              priority: 13
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth3
              display_name: 
              datatype: 
              priority: 14
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel4
              display_name: 
              datatype: 
              priority: 15
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth4
              display_name: 
              datatype: 
              priority: 16
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel5
              display_name: 
              datatype: 
              priority: 17
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth5
              display_name: 
              datatype: 
              priority: 18
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel6
              display_name: 
              datatype: 
              priority: 19
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth6
              display_name: 
              datatype: 
              priority: 20
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel7
              display_name: 
              datatype: 
              priority: 21
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth7
              display_name: 
              datatype: 
              priority: 22
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel8
              display_name: 
              datatype: 
              priority: 23
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth8
              display_name: 
              datatype: 
              priority: 24
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel9
              display_name: 
              datatype: 
              priority: 25
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: on_exit
              display_name: 
              datatype: 
              priority: 26
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
      ServiceTemplateProvisionRequest_approved.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: 
            name: ServiceTemplateProvisionRequest_approved
            inherits: 
            description: 
          fields:
          - rel4:
              value: /Service/Provisioning/StateMachines/ServiceProvisionRequestQuotaVerification/Default
          - rel5:
              value: /Service/Provisioning/Email/ServiceTemplateProvisionRequest_Approved
    Request.class:
      __class__.yaml:
        object_type: class
        version: 1.0
        object:
          attributes:
            description: Automation Requests
            display_name: 
            name: Request
            type: 
            inherits: 
            visibility: 
            owner: 
          schema:
          - field:
              aetype: assertion
              name: guard
              display_name: 
              datatype: string
              priority: 1
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: on_entry
              display_name: 
              datatype: string
              priority: 2
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel1
              display_name: 
              datatype: string
              priority: 3
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth1
              display_name: 
              datatype: string
              priority: 4
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel2
              display_name: 
              datatype: string
              priority: 5
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth2
              display_name: 
              datatype: string
              priority: 6
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel3
              display_name: 
              datatype: string
              priority: 7
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth3
              display_name: 
              datatype: string
              priority: 8
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel4
              display_name: 
              datatype: string
              priority: 9
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth4
              display_name: 
              datatype: string
              priority: 10
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel5
              display_name: 
              datatype: string
              priority: 11
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth5
              display_name: 
              datatype: string
              priority: 12
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel6
              display_name: 
              datatype: string
              priority: 13
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth6
              display_name: 
              datatype: string
              priority: 14
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel7
              display_name: 
              datatype: string
              priority: 15
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth7
              display_name: 
              datatype: string
              priority: 16
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel8
              display_name: 
              datatype: string
              priority: 17
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: meth8
              display_name: 
              datatype: string
              priority: 18
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: relationship
              name: rel9
              display_name: 
              datatype: string
              priority: 19
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: on_exit
              display_name: 
              datatype: string
              priority: 20
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
      _missing.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: 
            name: .missing
            inherits: 
            description: 
          fields: []
      AttachEBSInstance.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: 
            name: AttachEBSInstance
            inherits: 
            description: 
          fields:
          - rel4:
              value: /Yale-NUS/Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Attach/AWS-EBS-Attach-Instance
      CreateAttachEBSVolumeButton.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: AWS Create/Attach EBS Volume
            name: CreateAttachEBSVolumeButton
            inherits: 
            description: Create and Attach EBS Volume to a specific instance
          fields:
          - rel4:
              value: /Yale-NUS/Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Create/create_attach_ebs_button
      DeleteEBSVolume.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: 
            name: DeleteEBSVolume
            inherits: 
            description: 
          fields:
          - rel4:
              value: /Yale-NUS/Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Delete/AWS-EBS-Delete-Button
      DetachEBSInstance.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: 
            name: DetachEBSInstance
            inherits: 
            description: 
          fields:
          - rel4:
              value: /Yale-NUS/Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Detach/Detach-EBS
      attach_disk_btn.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Attach Disk Button (Invoked from Button)
            name: attach_disk_btn
            inherits: 
            description: Attach a new disk to a VM
          fields:
          - rel3:
              value: /Proxies/Volume/${/#ae_provider_category}/Attach#${/#vm.vendor}_from_btn
      attach_existing_disk.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Attach Existing Disk
            name: attach_existing_disk
            inherits: 
            description: Find an unattached Disk and attach to a VM
          fields:
          - rel3:
              value: /${/#ae_provider_category}/VM/Provisioning/StateMachines/Services/Methods/AttachExistingDisk#${/#vm.vendor}
      create_attach_new_disk.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Create/Attach New Disk
            name: create_attach_new_disk
            inherits: 
            description: Create New Disk and attach to a VM
          fields:
          - rel3:
              value: /${/#ae_provider_category}/VM/Provisioning/StateMachines/Services/Methods/CreateAttachNewDisk#${/#vm.vendor}
      create_disk_btn.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Create Disk Button (Invoked from Button)
            name: create_disk_btn
            inherits: 
            description: Create and attach a new disk to a VM
          fields:
          - rel3:
              value: /Proxies/Volume/${/#ae_provider_category}/Create#${/#vm.vendor}_from_btn
      delete_disk_btn.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Delete Disk Button (Invoked from Button)
            name: delete_disk_btn
            inherits: 
            description: Detach and delete a disk
          fields:
          - rel3:
              value: /Proxies/Volume/${/#ae_provider_category}/Delete#${/#vm.vendor}_from_btn
      detach_disk_btn.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Detach Disk Button (Invoked from Button)
            name: detach_disk_btn
            inherits: 
            description: Detach an existing disk from a VM
          fields:
          - rel3:
              value: /Proxies/Volume/${/#ae_provider_category}/Detach#${/#vm.vendor}_from_btn
      floating_ip_attach.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: 
            name: floating_ip_attach
            inherits: 
            description: 
          fields:
          - rel3:
              value: /Proxies/Network/IPAddress/${/#ae_provider_category}/Attach#${/#vm.vendor}_from_btn
      floating_ip_detach.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: 
            name: floating_ip_detach
            inherits: 
            description: 
          fields:
          - rel3:
              value: /Proxies/Network/IPAddress/${/#ae_provider_category}/Detach#${/#vm.vendor}_from_btn
  ServiceDialog:
    __namespace__.yaml:
      object_type: namespace
      version: 1.0
      object:
        attributes:
          name: ServiceDialog
          description: 
          display_name: 
          system: 
          priority: 
          enabled: 
    Methods.class:
      __class__.yaml:
        object_type: class
        version: 1.0
        object:
          attributes:
            description: 
            display_name: 
            name: Methods
            type: 
            inherits: 
            visibility: 
            owner: 
          schema:
          - field:
              aetype: attribute
              name: tenant
              display_name: 
              datatype: string
              priority: 1
              owner: 
              default_value: admin
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: method
              name: function
              display_name: 
              datatype: string
              priority: 2
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
      populateAttachedCinderVolumes.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Populate Attached Cinder Volumes
            name: populateAttachedCinderVolumes
            inherits: 
            description: 
          fields:
          - function:
              value: populateAttachedCinderVolumes
      populateAwsProviders.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Populate AWS Providers
            name: populateAwsProviders
            inherits: 
            description: 
          fields:
          - function:
              value: populateAwsProviders
      populateCloudInstanceSizes.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Populate Cloud Instance Sizes
            name: populateCloudInstanceSizes
            inherits: 
            description: 
          fields:
          - function:
              value: populateInstanceSizes
      populateImageTypes.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Populate Image Types
            name: populateImageTypes
            inherits: 
            description: 
          fields:
          - function:
              value: populateImageTypes
      populateOpenStackImageTypes.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Populate OpenStack Image Types
            name: populateOpenStackImageTypes
            inherits: 
            description: 
          fields:
          - function:
              value: populateOpenStackImageTypes
      populateOpenStackInstanceSizes.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Populate OpenStack Instance Sizes
            name: populateOpenStackInstanceSizes
            inherits: 
            description: 
          fields:
          - function:
              value: populateOpenStackInstanceSizes
      populateProjects.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Populate Projects
            name: populateProjects
            inherits: 
            description: Populate Projects associated with user
          fields:
          - function:
              value: populateProjects
      populatePublicNetworks.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: 
            name: populatePublicNetworks
            inherits: 
            description: 
          fields:
          - function:
              value: populatePublicNetworks
      populateSponsors.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Populate sponsors
            name: populateSponsors
            inherits: 
            description: Retrieve all users who are tagged with the sponsor tag
          fields:
          - function:
              value: populateSponsors
      populateUnattachedCinderVolumes.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: Populate Unattached Cinder Volumes
            name: populateUnattachedCinderVolumes
            inherits: 
            description: 
          fields:
          - function:
              value: populateUnattachedCinderVolumes
      __methods__:
        populateAttachedCinderVolumes.rb: ! "###################################\n#\n#
          CloudForms Automate Method: populateAttachedCinderVolumes\n#\n# This method
          is used to populate a drop-down list with a list of volumes \n# currently
          attached to an OpenStack Instance\n#\n###################################\n\n######
          TRACERS ######\n# Method for logging\ndef log(level, message)\n  @method
          = 'populateAttachedCinderVolumes'\n  $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef
          info(message)\n  log(:info, message)\nend\n\ndef error(message)\n  log(:error,
          message)\nend\n\ndef debug(message)\n  log(:debug, message)\nend\n\ndef
          dump_root\n  log(:info, \"Root:<$evm.root> Attributes - Begin\")\n  $evm.root.attributes.sort.each
          { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root>
          Attributes - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n
          \ log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
          { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info, \"CUSTOM
          \ End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
          TRACERS ######\n\nbegin\n  \n  require 'fog'\n\n  info(\"Automate method
          started.\")\n  \n  vm = $evm.root['vm']\n  ems = vm.ext_management_system\n
          \ info(\"VM name: #{ vm.name }\")\n  info(\"EMS name: #{ ems.name }\")\n\n
          \ # Set up Fog connection to Openstack.\n  os_user_id = ems.authentication_userid\n
          \ os_password = ems.authentication_password\n  os_auth_url = \"http://#{
          ems.hostname }:#{ ems.port }/v2.0/tokens\"\n  os_tenant = ems.cloud_tenants.select
          { |t| t.id == vm.cloud_tenant_id }.first.name\n  info(\"Fog provider: #{
          ems.emstype }, openstack_username: #{ os_user_id }, openstack_api_key: #{
          os_password }, openstack_auth_url: #{ os_auth_url }, openstack_tenant: #{
          os_tenant }\")\n  \n  compute = Fog::Compute.new({:provider => ems.emstype,\n
          \                             :openstack_username => os_user_id,\n                              :openstack_api_key
          => os_password,\n                              :openstack_auth_url => os_auth_url,\n
          \                             :openstack_tenant => os_tenant})\n\n  fog_vm
          = compute.servers.get(vm.ems_ref)\n  info(\"Got Fog VM: #{ fog_vm.inspect
          }\")\n  \n  option_hash = {}\n  fog_vm.volume_attachments.each { |vol_attachment|\n
          \   key = vol_attachment['volumeId']\n    value = vol_attachment['device']\n
          \   debug(\"Adding '#{ key }:#{ value }' to droplist values\")\n    option_hash[key]
          = value\n  }\n  \n  info(\"Generated droplist options: #{ option_hash }\")\n\n
          \ droplist = $evm.object\n  droplist[\"data_type\"] = \"String\"\n  droplist[\"required\"]
          = \"true\"\n  droplist[\"values\"] = option_hash\n  \n  info(\"Automate
          method ended.\")\n\n  exit MIQ_OK\nend\n"
        populateAttachedCinderVolumes.yaml:
          object_type: method
          version: 1.0
          object:
            attributes:
              name: populateAttachedCinderVolumes
              display_name: Populate Attached Cinder Volumes
              description: 
              scope: instance
              language: ruby
              location: inline
            inputs: []
        populateAwsProviders.rb: ! "#\n# Description: Populate a dynamic drop down
          list with available AWS regions\n#\n\n$evm.log(\"info\", \"populateAwsProviders
          Automate Method Started\")\n\ndroplist = $evm.object\n\ndroplist[\"data_type\"]
          = \"String\"\ndroplist[\"required\"] = \"true\"\n\n# Retrieve AWS ext_management_system\naws_ems
          = $evm.vmdb(:ems_amazon).all\n$evm.log(\"info\", \"Fetched all Amazon EMS:
          #{ aws_ems }\")\n\n# Create droplist values\noption_hash = {}\naws_ems.each
          { |ems|\n  key = ems.id.to_s\n  value = \"#{ ems.name } (#{ ems.provider_region
          })\"\n  $evm.log(\"info\", \"Adding '#{ key }':'#{ value }' to droplist
          values\")\n  option_hash[key] = value\n}\n$evm.log(\"info\", \"Generated
          droplist options: #{ option_hash }\")\ndroplist[\"values\"] = option_hash\n\ndroplist[\"default_value\"]
          = aws_ems[0].id.to_s\n\n$evm.log(\"info\", \"populateAwsProviders Automate
          Method Ended\")\n\nexit MIQ_OK\n"
        populateAwsProviders.yaml:
          object_type: method
          version: 1.0
          object:
            attributes:
              name: populateAwsProviders
              display_name: Populate AWS Providers
              description: 
              scope: instance
              language: ruby
              location: inline
            inputs: []
        populateImageTypes.rb: ! "#\n# Description: Populate a dynamic drop down list
          with available instance sizes\n#\n\n###### TRACERS ######\n# Method for
          logging\ndef log(level, message)\n  @method = 'populateImageTypes'\n  $evm.log(level,
          \"#{@method} - #{message}\")\nend\n\ndef info(message)\n  log(:info, message)\nend\n\ndef
          dump_root\n  log(:info, \"Root:<$evm.root> Attributes - Begin\")\n  $evm.root.attributes.sort.each
          { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root>
          Attributes - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n
          \ log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
          { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info, \"CUSTOM
          \ End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
          TRACERS ######\n\n\ninfo(\"populateImageTypes Automate Method Started\")\n\ndroplist
          = $evm.object\n\ndroplist[\"data_type\"] = \"String\"\ndroplist[\"required\"]
          = \"true\"\n\ndump_root\n\n# Retrieve ext_management_system based on the
          info we get from the service template\nservice_template = $evm.root['service_template']\ninfo(\"Provisioning
          type: #{ service_template.prov_type }\")\nems = $evm.vmdb(\"ems_#{ service_template.prov_type
          }\").first # assuming only one of each provider type.\n\n# Find all templates
          associated with this ID\ntemplates = $evm.vmdb(:template_cloud).find_all_by_ems_id(ems.id)\ndefault_value
          = templates[0].id.to_s\n$evm.log(\"info\", \"Default value: #{ default_value
          }\")\n\n\n# Create droplist values\noption_hash = {}\ntemplates.each { |template|\n
          \ if template.publicly_available\n    key = template.id.to_s\n    value
          = template.name\n    $evm.log(\"debug\", \"Adding '#{ key }':'#{ value }'
          to droplist values\")\n    option_hash[key] = value\n  end\n}\ninfo(\"Generated
          droplist options: #{ option_hash }\")\ndroplist[\"values\"] = option_hash\n#droplist[\"default_value\"]
          = default_value\n\ninfo(\"populateImageTypes Automate Method Ended\")\n\nexit
          MIQ_OK\n"
        populateImageTypes.yaml:
          object_type: method
          version: 1.0
          object:
            attributes:
              name: populateImageTypes
              display_name: Populate Image Types
              description: 
              scope: instance
              language: ruby
              location: inline
            inputs: []
        populateInstanceSizes.rb: ! "#\n# Description: Populate a dynamic drop down
          list with available AWS instance sizes\n#\n\n###### TRACERS ######\n# Method
          for logging\ndef log(level, message)\n  @method = 'populateImageTypes'\n
          \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef info(message)\n
          \ log(:info, message)\nend\n\ndef dump_root\n  log(:info, \"Root:<$evm.root>
          Attributes - Begin\")\n  $evm.root.attributes.sort.each { |k, v| log(:info,
          \"  Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root> Attributes
          - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n  log(:info,
          \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
          { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info, \"CUSTOM
          \ End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
          TRACERS ######\n\ninfo(\"populateInstanceSizes Automate Method Started\")\n\n#
          Allowed flavors are listed here. Add or remove flavors here to modify what
          the user can see.\nallowed_flavors = [\"t2.micro\", \"t2.small\", \"m3.medium\",
          \"m3.large\"]\n\ndroplist = $evm.object\n\ndroplist[\"data_type\"] = \"String\"\ndroplist[\"required\"]
          = \"true\"\n\n# Retrieve ext_management_system based on the info we get
          from the service template\nservice_template = $evm.root['service_template']\ninfo(\"Provisioning
          type: #{ service_template.prov_type }\")\nems = $evm.vmdb(\"ems_#{ service_template.prov_type
          }\").first # assuming only one of each provider type.\n$evm.log(\"info\",
          \"fetched region: #{ ems.name }\")\n\ndefault_value = ems.flavors[0].id.to_s\n$evm.log(\"info\",
          \"Default value: #{ default_value }\")\n\n# Create droplist values\noption_hash
          = {}\nems.flavors.each { |flavor|\n  if ems.type == \"EmsAmazon\"\n    if
          allowed_flavors.include? flavor.name\n      key = flavor.id.to_s\n      value
          = \"CPUs: #{ flavor.cpus }, Memory: #{ (flavor.memory / 1024.0**3).round(1)
          } GB (#{ flavor.name })\"\n      $evm.log(\"debug\", \"Adding '#{ key }':'#{
          value }' to droplist values\")\n      option_hash[key] = value\n    end\n
          \ else\n    key = flavor.id.to_s\n    value = \"CPUs: #{ flavor.cpus },
          Memory: #{ (flavor.memory / 1024.0**3).round(1) } GB (#{ flavor.name })\"\n
          \   $evm.log(\"debug\", \"Adding '#{ key }':'#{ value }' to droplist values\")\n
          \   option_hash[key] = value\n  end\n}\ninfo(\"Generated droplist options:
          #{ option_hash }\")\ndroplist[\"values\"] = option_hash\n\n#droplist[\"default_value\"]
          = default_value\n\ninfo(\"populateInstanceSizes Automate Method Ended\")\n\nexit
          MIQ_OK\n"
        populateInstanceSizes.yaml:
          object_type: method
          version: 1.0
          object:
            attributes:
              name: populateInstanceSizes
              display_name: Populate Instance Sizes
              description: 
              scope: instance
              language: ruby
              location: inline
            inputs: []
        populateOpenStackImageTypes.rb: ! "#\n# Description: Populate a dynamic drop
          down list with available images\n#\n\n###### TRACERS ######\n# Method for
          logging\ndef log(level, message)\n  @method = 'populateImageTypes'\n  $evm.log(level,
          \"#{@method} - #{message}\")\nend\n\ndef info(message)\n  log(:info, message)\nend\n\ndef
          dump_root\n  log(:info, \"Root:<$evm.root> Attributes - Begin\")\n  $evm.root.attributes.sort.each
          { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root>
          Attributes - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n
          \ log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
          { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info, \"CUSTOM
          \ End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
          TRACERS ######\n\n\ninfo(\"populateImageTypes Automate Method Started\")\n\ndroplist
          = $evm.object\n\ndroplist[\"data_type\"] = \"String\"\ndroplist[\"required\"]
          = \"true\"\n\ndump_root\n\n# Retrieve ext_management_system based on the
          info we get from the service template\nems = $evm.vmdb(\"ems_openstack\").first
          # assuming only one of each provider type.\n\n# Find all templates associated
          with this ID\ntemplates = $evm.vmdb(:template_cloud).find_all_by_ems_id(ems.id)\ndefault_value
          = templates[0].id.to_s\n$evm.log(\"info\", \"Default value: #{ default_value
          }\")\n\n\n# Create droplist values\noption_hash = {}\ntemplates.each { |template|\n
          \ if template.publicly_available\n    key = template.id.to_s\n    value
          = template.name\n    $evm.log(\"debug\", \"Adding '#{ key }':'#{ value }'
          to droplist values\")\n    option_hash[key] = value\n  end\n}\ninfo(\"Generated
          droplist options: #{ option_hash }\")\ndroplist[\"values\"] = option_hash\n#droplist[\"default_value\"]
          = default_value\n\ninfo(\"populateImageTypes Automate Method Ended\")\n\nexit
          MIQ_OK\n"
        populateOpenStackImageTypes.yaml:
          object_type: method
          version: 1.0
          object:
            attributes:
              name: populateOpenStackImageTypes
              display_name: Populate OpenStack Image Types
              description: 
              scope: instance
              language: ruby
              location: inline
            inputs: []
        populateOpenStackInstanceSizes.rb: ! "#\n# Description: Populate a dynamic
          drop down list with available AWS instance sizes\n#\n\n###### TRACERS ######\n#
          Method for logging\ndef log(level, message)\n  @method = 'populateOpenStackInstanceSizes'\n
          \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef info(message)\n
          \ log(:info, message)\nend\n\ndef dump_root\n  log(:info, \"Root:<$evm.root>
          Attributes - Begin\")\n  $evm.root.attributes.sort.each { |k, v| log(:info,
          \"  Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root> Attributes
          - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n  log(:info,
          \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
          { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info, \"CUSTOM
          \ End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
          TRACERS ######\n\ninfo(\"Automate Method Started\")\n\n# Allowed flavors
          are listed here. Add or remove flavors here to modify what the user can
          see.\nallowed_flavors = [\"t2.micro\", \"t2.small\", \"m3.medium\", \"m3.large\"]\n\ndroplist
          = $evm.object\n\ndroplist[\"data_type\"] = \"String\"\ndroplist[\"required\"]
          = \"true\"\n\n# Retrieve ext_management_system\nems = $evm.vmdb(\"ems_openstack\").first
          # assuming only one of each provider type.\n$evm.log(\"info\", \"fetched
          region: #{ ems.name }\")\n\ndefault_value = ems.flavors[0].id.to_s\n$evm.log(\"info\",
          \"Default value: #{ default_value }\")\n\n# Create droplist values\noption_hash
          = {}\nems.flavors.each { |flavor|\n  if ems.type == \"EmsAmazon\"\n    if
          allowed_flavors.include? flavor.name\n      key = flavor.id.to_s\n      value
          = \"CPUs: #{ flavor.cpus }, Memory: #{ (flavor.memory / 1024.0**3).round(1)
          } GB (#{ flavor.name })\"\n      $evm.log(\"debug\", \"Adding '#{ key }':'#{
          value }' to droplist values\")\n      option_hash[key] = value\n    end\n
          \ else\n    key = flavor.id.to_s\n    value = \"CPUs: #{ flavor.cpus },
          Memory: #{ (flavor.memory / 1024.0**3).round(1) } GB (#{ flavor.name })\"\n
          \   $evm.log(\"debug\", \"Adding '#{ key }':'#{ value }' to droplist values\")\n
          \   option_hash[key] = value\n  end\n}\ninfo(\"Generated droplist options:
          #{ option_hash }\")\ndroplist[\"values\"] = option_hash\n\n#droplist[\"default_value\"]
          = default_value\n\ninfo(\"Automate Method Ended\")\n\nexit MIQ_OK\n"
        populateOpenStackInstanceSizes.yaml:
          object_type: method
          version: 1.0
          object:
            attributes:
              name: populateOpenStackInstanceSizes
              display_name: Populate OpenStack Instance Sizes
              description: 
              scope: instance
              language: ruby
              location: inline
            inputs: []
        populateProjects.rb: ! "#\n# Description: Populate a dynamic drop down list
          with available AWS regions\n#\n\n###### TRACERS ######\n# Method for logging\ndef
          log(level, message)\n  @method = 'populateProjects'\n  $evm.log(level, \"#{@method}
          - #{message}\")\nend\n\ndef info(message)\n  log(:info, message)\nend\n\ndef
          dump_root\n  log(:info, \"Root:<$evm.root> Attributes - Begin\")\n  $evm.root.attributes.sort.each
          { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root>
          Attributes - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n
          \ log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
          { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info, \"CUSTOM
          \ End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
          TRACERS ######\n\ninfo(\"populateProjects Automate Method Started\")\n\nrequire
          'json'\n\ncfuser = $evm.root[\"user\"]\ninfo(\"User id: #{$evm.root[\"user\"][:userid]}\")\n\ndroplist
          = $evm.object\n\ndroplist[\"data_type\"] = \"String\"\ndroplist[\"required\"]
          = \"true\"\n\n# Retrieve project tags for the user\nproject_tag_lbls = cfuser.tags.select
          { |tag| tag.starts_with? 'projects/' }\ninfo(\"List of projects associated
          with this user #{ project_tag_lbls }\")\n\nif project_tag_lbls.empty?\n
          \ droplist[\"values\"] = { \"nil\" => \"User has no projects\" }\n  exit
          MIQ_ERROR  \nend\n\nclassification = $evm.vmdb('classification')\n\n# create
          droplist values\noption_hash = {}\nproject_tag_lbls.each { |lbl|\n  tag
          = classification.find_by_name(lbl)\n  key = JSON.generate( {:tag_name =>
          lbl, :tag_id => tag.id.to_s} )\n  value = tag.description.to_s\n  info(\"Adding
          '#{ key }':'#{ value }' to droplist values\")\n  option_hash[key] = value\n}\n\ninfo(\"Generated
          droplist options: #{ option_hash }\")\ndroplist[\"values\"] = option_hash\n\n#droplist[\"default_value\"]
          = option_hash.keys[-1]\n\ninfo(\"populateProjects Automate Method Ended\")\n\nexit
          MIQ_OK\n"
        populateProjects.yaml:
          object_type: method
          version: 1.0
          object:
            attributes:
              name: populateProjects
              display_name: Populate with Projects that this user is a member of
              description: 
              scope: instance
              language: ruby
              location: inline
            inputs: []
        populatePublicNetworks.rb: ! "###################################\n#\n# CloudForms
          Automate Method: populatePublicNetworks\n#\n# This method is used to populate
          a drop-down list with a list of  \n# public networks in OpenStack\n#\n###################################\n\n######
          TRACERS ######\n# Method for logging\ndef log(level, message)\n  $evm.log(level,
          \"#{message}\")\nend\n\ndef info(message)\n  log(:info, message)\nend\n\ndef
          error(message)\n  log(:error, message)\nend\n\ndef debug(message)\n  log(:debug,
          message)\nend\n\ndef dump_root\n  log(:info, \"Root:<$evm.root> Attributes
          - Begin\")\n  $evm.root.attributes.sort.each { |k, v| log(:info, \"  Attribute
          - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root> Attributes - End\")\n
          \ log(:info, \"\")\nend\n\ndef dump_attributes(object)\n  log(:info, \"CUSTOM
          \ Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
          { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info, \"CUSTOM
          \ End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
          TRACERS ######\n\nbegin\n\n  info(\"Automate method started.\")\n  \n  #
          get tenant\n  vm = $evm.root['vm']\n  if vm.nil?\n    if $evm.object.attributes.key?
          'dialog_tenant'\n      os_tenant = $evm.object['dialog_tenant']\n    else\n
          \     os_tenant = $evm.object['tenant']\n    end\n  else\n    ems = vm.ext_management_system\n
          \   os_tenant = ems.cloud_tenants.select { |t| t.id == vm.cloud_tenant_id
          }.first.name\n  end\n  \n  tenant = $evm.vmdb(:CloudTenant).find_by_name(os_tenant)\n
          \ \n  external_facing_nets = tenant.cloud_networks.select { |net| net.external_facing
          == true }\n  \n  option_hash = { ''=>'' }\n  external_facing_nets.each {
          |net|\n    key = net.id\n    value = net.name\n    debug(\"Adding '#{ key
          }:#{ value }' to droplist values\")\n    option_hash[key] = value\n  }\n
          \ \n  info(\"Generated droplist options: #{ option_hash }\")\n\n  droplist
          = $evm.object\n  droplist[\"data_type\"] = \"String\"\n  droplist[\"required\"]
          = \"true\"\n  droplist[\"values\"] = option_hash\n  \n  info(\"Automate
          method ended.\")\n\n  exit MIQ_OK\nend\n"
        populatePublicNetworks.yaml:
          object_type: method
          version: 1.0
          object:
            attributes:
              name: populatePublicNetworks
              display_name: 
              description: 
              scope: instance
              language: ruby
              location: inline
            inputs: []
        populateSponsors.rb: ! "#\n# Description: Populate a dynamic drop down list
          with sponsors\n#\n\n###### TRACERS ######\n# Method for logging\ndef log(level,
          message)\n  @method = 'populateSponsors'\n  $evm.log(level, \"#{@method}
          - #{message}\")\nend\n\ndef info(message)\n  log(:info, message)\nend\n\ndef
          dump_root\n  log(:info, \"Root:<$evm.root> Attributes - Begin\")\n  $evm.root.attributes.sort.each
          { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root>
          Attributes - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n
          \ log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
          { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info, \"CUSTOM
          \ End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
          TRACERS ######\n\ninfo(\"Automate Method Started\")\n\nrequire 'json'\n\ncfuser
          = $evm.root[\"user\"]\ninfo(\"User id: #{$evm.root[\"user\"][:userid]}\")\n\ndroplist
          = $evm.object\n\ndroplist[\"data_type\"] = \"String\"\n#droplist[\"required\"]
          = \"true\"\n\nsponsor_tag = 'yalenusattr/sponsor'\nsponsors = $evm.vmdb('user').all.select
          { |u| u.tags.include? sponsor_tag }\n\nif sponsors.empty?\n  droplist[\"values\"]
          = { \"nil\" => \"No Sponsors\" }\n  exit MIQ_ABORT  \nend\n\n\n# create
          droplist values\noption_hash = {}\nsponsors.each { |sponsor|\n  key = sponsor.id\n
          \ value = sponsor.name\n  info(\"Adding '#{ key }':'#{ value }' to droplist
          values\")\n  option_hash[key] = value\n}\n\ninfo(\"Generated droplist options:
          #{ option_hash }\")\ndroplist[\"values\"] = option_hash\n\ndroplist[\"default_value\"]
          = option_hash.keys[-1]\n\ninfo(\"Automate Method Ended\")\n\nexit MIQ_OK\n"
        populateSponsors.yaml:
          object_type: method
          version: 1.0
          object:
            attributes:
              name: populateSponsors
              display_name: Populate Sponsor list
              description: 
              scope: instance
              language: ruby
              location: inline
            inputs: []
        populateUnattachedCinderVolumes.rb: ! "###################################\n#\n#
          CloudForms Automate Method: populateUnAttachedCinderVolumes\n#\n# This method
          is used to populate a drop-down list with a list of volumes \n# currently
          unattached to any OpenStack Instance\n#\n###################################\n\n######
          TRACERS ######\n# Method for logging\ndef log(level, message)\n  $evm.log(level,
          \"#{message}\")\nend\n\ndef info(message)\n  log(:info, message)\nend\n\ndef
          error(message)\n  log(:error, message)\nend\n\ndef debug(message)\n  log(:debug,
          message)\nend\n\ndef dump_root\n  log(:info, \"Root:<$evm.root> Attributes
          - Begin\")\n  $evm.root.attributes.sort.each { |k, v| log(:info, \"  Attribute
          - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root> Attributes - End\")\n
          \ log(:info, \"\")\nend\n\ndef dump_attributes(object)\n  log(:info, \"CUSTOM
          \ Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
          { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info, \"CUSTOM
          \ End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
          TRACERS ######\n\nbegin\n  \n  require 'fog'\n\n  info(\"Automate method
          started.\")\n  \n  vm = $evm.root['vm']\n  if vm.nil?\n    info(\"Not in
          VM context. Look for EMS ID in dialog.\")\n    # if the dialog doesn't specify
          an EMS id, then we assume the first OpenStack EMS.\n    if $evm.object.attributes.key?
          'dialog_ems_id'\n      info(\"Dialog has ems_id\")\n      ems = $evm.vmdb(:ems_openstack).find($evm.object['dialog_ems_id'])\n
          \   else\n      info(\"No EMS found, just going for the first one.\")\n
          \     ems = $evm.vmdb(:ems_openstack).first\n    end\n  else\n    info(\"VM
          name: #{ vm.name }\")\n    ems = vm.ext_management_system\n  end\n  info(\"EMS
          name: #{ ems.name }\")\n\n  # get tenant\n  if vm.nil?\n    if $evm.object.attributes.key?
          'dialog_tenant'\n      os_tenant = $evm.object['dialog_tenant']\n    else\n
          \     os_tenant = $evm.object['tenant']\n    end\n  else\n    os_tenant
          = ems.cloud_tenants.select { |t| t.id == vm.cloud_tenant_id }.first.name\n
          \ end\n  \n  # Set up Fog connection to Openstack.\n  os_user_id = ems.authentication_userid\n
          \ os_password = ems.authentication_password\n  os_auth_url = \"http://#{
          ems.hostname }:#{ ems.port }/v2.0/tokens\"\n  info(\"Fog provider: #{ ems.emstype
          }, openstack_username: #{ os_user_id }, openstack_api_key: #{ os_password
          }, openstack_auth_url: #{ os_auth_url }, openstack_tenant: #{ os_tenant
          }\")\n  \n  fog_conn = Fog::Compute.new({:provider => ems.emstype,\n                              :openstack_username
          => os_user_id,\n                              :openstack_api_key => os_password,\n
          \                             :openstack_auth_url => os_auth_url,\n                              :openstack_tenant
          => os_tenant})\n  \n  available_volumes = fog_conn.volumes.select { |v|
          v.status == 'available' }\n  \n  option_hash = {}\n  available_volumes.each
          { |volume|\n    key = volume.id\n    value = volume.name\n    debug(\"Adding
          '#{ key }:#{ value }' to droplist values\")\n    option_hash[key] = value\n
          \ }\n  \n  info(\"Generated droplist options: #{ option_hash }\")\n\n  droplist
          = $evm.object\n  droplist[\"data_type\"] = \"String\"\n  droplist[\"required\"]
          = \"true\"\n  droplist[\"values\"] = option_hash\n  \n  info(\"Automate
          method ended.\")\n\n  exit MIQ_OK\nend\n"
        populateUnattachedCinderVolumes.yaml:
          object_type: method
          version: 1.0
          object:
            attributes:
              name: populateUnattachedCinderVolumes
              display_name: 
              description: 
              scope: instance
              language: ruby
              location: inline
            inputs: []
  Service:
    __namespace__.yaml:
      object_type: namespace
      version: 1.0
      object:
        attributes:
          name: Service
          description: 
          display_name: 
          system: 
          priority: 
          enabled: 
    Provisioning:
      __namespace__.yaml:
        object_type: namespace
        version: 1.0
        object:
          attributes:
            name: Provisioning
            description: 
            display_name: 
            system: 
            priority: 
            enabled: 
      Email.class:
        __class__.yaml:
          object_type: class
          version: 1.0
          object:
            attributes:
              description: 
              display_name: 
              name: Email
              type: 
              inherits: 
              visibility: 
              owner: 
            schema:
            - field:
                aetype: attribute
                name: vm_retire_extend_days
                display_name: 
                datatype: string
                priority: 1
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: attribute
                name: to_email_address
                display_name: 
                datatype: string
                priority: 2
                owner: 
                default_value: georgegoh@spodon.com
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: attribute
                name: signature
                display_name: 
                datatype: string
                priority: 3
                owner: 
                default_value: Your Virtualization Team
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: attribute
                name: from_email_address
                display_name: 
                datatype: string
                priority: 4
                owner: 
                default_value: yaleNUS-Admin@cfme.yalenus.edu.sg
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: method1
                display_name: 
                datatype: string
                priority: 5
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
        ServiceProvision_Complete.yaml:
          object_type: instance
          version: 1.0
          object:
            attributes:
              display_name: 
              name: ServiceProvision_Complete
              inherits: 
              description: ServiceProvision_Complete
            fields:
            - method1:
                value: ServiceProvision_Complete
        ServiceTemplateProvisionRequest_Approved.yaml:
          object_type: instance
          version: 1.0
          object:
            attributes:
              display_name: 
              name: ServiceTemplateProvisionRequest_Approved
              inherits: 
              description: 
            fields:
            - method1:
                value: ServiceTemplateProvisionRequest_Approved
        __methods__:
          ServiceProvision_Complete.rb: ! '#

            # Description: Place holder for Service Provision Complete email #

            #

'
          ServiceProvision_Complete.yaml:
            object_type: method
            version: 1.0
            object:
              attributes:
                name: ServiceProvision_Complete
                display_name: 
                description: 
                scope: instance
                language: ruby
                location: inline
              inputs: []
          ServiceTemplateProvisionRequest_Approved.rb: ! "#\n# Description: This method
            is used to email the provision requester that\n# the Service provisioning
            request has been approved\n#\n# Events: request_approved\n#\n# Model Notes:\n#
            1. to_email_address - used to specify an email address in the case where
            the\n#    requester does not have a valid email address. To specify more
            than one email\n#    address separate email address with commas. (I.e.
            admin@company.com,user@company.com)\n# 2. from_email_address - used to
            specify an email address in the event the\n#    requester replies to the
            email\n# 3. signature - used to stamp the email with a custom signature\n#\n\ndef
            emailrequester(miq_request, appliance)\n  $evm.log('info', \"Requester
            email logic starting\")\n\n  # Get requester object\n  requester = miq_request.requester\n\n
            \ # Get requester email else set to nil\n  requester_email = requester.email
            || nil\n\n  # Get Owner Email else set to nil\n  owner_email = miq_request.options[:owner_email]
            || nil\n  $evm.log('info', \"Requester email:<#{requester_email}> Owner
            Email:<#{owner_email}>\")\n\n  # if to is nil then use requester_email\n
            \ to = nil\n  to ||= requester_email\n\n  # If to is still nil use to_email_address
            from model\n  to ||= $evm.object['to_email_address']\n\n  # Get from_email_address
            from model unless specified below\n  from = nil\n  from ||= $evm.object['from_email_address']\n\n
            \ # Get signature from model unless specified below\n  signature = nil\n
            \ signature ||= $evm.object['signature']\n\n  # Build subject\n  subject
            = \"Request ID #{miq_request.id} - Your Service provision request was
            Approved\"\n\n  # Build email body\n  body = \"Hello, \"\n  body += \"<br>Your
            Service provision request was approved. If Service provisioning is successful
            you will be notified via email when the Service is available.\"\n  body
            += \"<br><br>Approvers notes: #{miq_request.reason}\"\n  body += \"<br><br>To
            view this Request go to: <a href='https://#{appliance}/miq_request/show/#{miq_request.id}'>https://#{appliance}/miq_request/show/#{miq_request.id}</a>\"\n
            \ body += \"<br><br> Thank you,\"\n  body += \"<br> #{signature}\"\n\n
            \ # Send email\n  $evm.log(\"info\", \"Sending email to <#{to}> from <#{from}>
            subject: <#{subject}>\")\n  $evm.execute(:send_email, to, from, subject,
            body)\nend\n\ndef emailapprover(miq_request, appliance)\n  $evm.log('info',
            \"Requester email logic starting\")\n\n  # Get requester object\n  requester
            = miq_request.requester\n\n  # Get requester email else set to nil\n  requester_email
            = requester.email || nil\n\n  # If to is still nil use to_email_address
            from model\n  to = nil\n  to ||= $evm.object['to_email_address']\n\n  #
            Get from_email_address from model unless specified below\n  from = nil\n
            \ from ||= $evm.object['from_email_address']\n\n  # Get signature from
            model unless specified below\n  signature = nil\n  signature ||= $evm.object['signature']\n\n
            \ # Build subject\n  subject = \"Request ID #{miq_request.id} - Your Service
            provision request was Approved\"\n\n  # Build email body\n  body = \"Approver,
            \"\n  body += \"<br>Service provision request received from #{requester_email}
            was approved.\"\n  body += \"<br><br>Approvers reason: #{miq_request.reason}\"\n
            \ body += \"<br><br>To view this Request go to: <a href='https://#{appliance}/miq_request/show/#{miq_request.id}'>https://#{appliance}/miq_request/show/#{miq_request.id}</a>\"\n
            \ body += \"<br><br> Thank you,\"\n  body += \"<br> #{signature}\"\n\n
            \ # Send email\n  $evm.log(\"info\", \"Sending email to <#{to}> from <#{from}>
            subject: <#{subject}>\")\n  $evm.execute(:send_email, to, from, subject,
            body)\nend\n\n# Get miq_request from root\nmiq_request = $evm.root['miq_request']\nraise
            \"miq_request missing\" if miq_request.nil?\n$evm.log(\"info\", \"Detected
            Request:<#{miq_request.id}> with Approval State:<#{miq_request.approval_state}>\")\n\n#
            Override the default appliance IP Address below\nappliance = nil\n# appliance
            ||= 'evmserver.company.com'\nappliance ||= $evm.root['miq_server'].ipaddress\n\n#
            Email Requester\nemailrequester(miq_request, appliance)\n\n\n"
          ServiceTemplateProvisionRequest_Approved.yaml:
            object_type: method
            version: 1.0
            object:
              attributes:
                name: ServiceTemplateProvisionRequest_Approved
                display_name: 
                description: 
                scope: instance
                language: ruby
                location: inline
              inputs: []
      StateMachines:
        __namespace__.yaml:
          object_type: namespace
          version: 1.0
          object:
            attributes:
              name: StateMachines
              description: 
              display_name: 
              system: 
              priority: 
              enabled: 
        ServiceProvisionRequestApproval.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: 
                display_name: 
                name: ServiceProvisionRequestApproval
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: attribute
                  name: approver_user
                  display_name: 
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: admin
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: signature
                  display_name: 
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: CloudForms Admin Team
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: from_email_address
                  display_name: 
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: georgegoh.spodon.com
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: to_email_address
                  display_name: 
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: georgegoh@spodon.com
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: approval_type
                  display_name: 
                  datatype: string
                  priority: 5
                  owner: 
                  default_value: auto
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: state
                  name: ValidateRequest
                  display_name: 
                  datatype: string
                  priority: 6
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: ! '#validate_request'
                  on_exit: 
                  on_error: pending_request
                  max_retries: '100'
                  max_time: 
              - field:
                  aetype: state
                  name: ApproveRequest
                  display_name: 
                  datatype: string
                  priority: 7
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: approve_request
                  on_exit: 
                  on_error: pending_request
                  max_retries: '100'
                  max_time: 
          Default.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: Default
                inherits: 
                description: 
              fields: []
          __methods__:
            approve_request.rb: ! "#\n# Description: This method is executed when
              the provisioning request is auto-approved\n#\n\n###### UTILITY METHODS
              ######\n# Method for logging\ndef log(level, message)\n  @method = 'approve_request'\n
              \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\n# Convenience
              methods\ndef info(message)\n  log(:info, message)\nend\n\ndef debug(message)\n
              \ log(:debug, message)\nend\n\ndef dump_root\n  info(\"Root:<$evm.root>
              Attributes - Begin\")\n  $evm.root.attributes.sort.each { |k, v| info(\"
              Attribute - #{k}: #{v}\") }\n  info(\"Root:<$evm.root> Attributes -
              End\")\n  info(\"\")\nend\n\n\ndef dump_attributes(object)\n  info(\"Begin
              Attributes [object.attributes]\")\n  object.attributes.sort.each { |k,
              v| info(\"  #{k} = #{v.inspect}\") }\n  info(\"End Attributes [object.attributes]\")\n
              \ info(\"\")\nend\n\n###### UTILITY METHODS ######\n\ninfo(\"Automate
              Method Started\")\n\n# Get the sponsor\nreq = $evm.root[\"miq_request\"]\n\ndef
              get_sponsor(miq_request)\n  dialog_hash = miq_request.get_option(:dialog)\n
              \ if dialog_hash.key? 'dialog_sponsor'\n    sponsor_id = miq_request.get_option(:dialog)['dialog_sponsor']\n
              \   sponsor = $evm.vmdb(:user).find(sponsor_id)\n  else\n    sponsor
              = $evm.vmdb(:user).find_by_userid($evm.object['approver_user'])\n  end\n
              \ info(\"Sponsor object found: #{ sponsor }\")\n  return sponsor\nend\n\ndef
              emailrequester(miq_request, appliance)\n  $evm.log('info', \"Requester
              email logic starting\")\n\n  # Get requester object\n  requester = miq_request.requester\n\n
              \ # Get requester email else set to nil\n  requester_email = requester.email
              || nil\n\n  # Get Owner Email else set to nil\n  owner_email = miq_request.options[:owner_email]
              || nil\n  $evm.log('info', \"Requester email:<#{requester_email}> Owner
              Email:<#{owner_email}>\")\n\n  # if to is nil then use requester_email\n
              \ to = nil\n  to ||= requester_email\n\n  # If to is still nil use to_email_address
              from model\n  to ||= $evm.object['to_email_address']\n\n  # Get from_email_address
              from model unless specified below\n  from = nil\n  from ||= $evm.object['from_email_address']\n\n
              \ # Get signature from model unless specified below\n  signature = nil\n
              \ signature ||= $evm.object['signature']\n\n  # Build subject\n  subject
              = \"Request ID #{miq_request.id} - Your Service provision request is
              awaiting approval\"\n\n  # Build email body\n  body = \"Hello, \"\n
              \ body += \"<br>Your Service provision request has been received and
              is awaiting approval. If Service provisioning is approved you will be
              notified via email when the Service is provisioning.\"\n  body += \"<br><br>To
              view this Request go to: <a href='https://#{appliance}/miq_request/show/#{miq_request.id}'>https://#{appliance}/miq_request/show/#{miq_request.id}</a>\"\n
              \ body += \"<br><br> Thank you,\"\n  body += \"<br> #{signature}\"\n\n
              \ # Send email\n  $evm.log(\"info\", \"Sending email to <#{to}> from
              <#{from}> subject: <#{subject}>\")\n  $evm.execute(:send_email, to,
              from, subject, body)\nend\n\ndef emailapprover(miq_request, appliance)\n
              \ $evm.log('info', \"Approver email logic starting\")\n\n  # Get approver
              object\n  approver = get_sponsor(miq_request)\n\n  # Get approver email
              else set to nil\n  approver_email = approver.email || nil\n\n  # If
              to is still nil use to_email_address from model\n  to = nil\n  to ||=
              $evm.object['to_email_address']\n\n  # Get from_email_address from model
              unless specified below\n  from = nil\n  from ||= $evm.object['from_email_address']\n\n
              \ # Get signature from model unless specified below\n  signature = nil\n
              \ signature ||= $evm.object['signature']\n\n  # Build subject\n  subject
              = \"Request ID #{miq_request.id} - A Service Provision Request is awaiting
              your approval\"\n\n  # Build email body\n  body = \"Approver, \"\n  body
              += \"<br>Service provision request was received from #{miq_request.requester.name}
              and is waiting for your approval.\"\n  body += \"<br><br>To view this
              Request go to: <a href='https://#{appliance}/miq_request/show/#{miq_request.id}'>https://#{appliance}/miq_request/show/#{miq_request.id}</a>\"\n
              \ body += \"<br><br> Thank you,\"\n  body += \"<br> #{signature}\"\n\n
              \ # Send email\n  $evm.log(\"info\", \"Sending email to <#{to}> from
              <#{from}> subject: <#{subject}>\")\n  $evm.execute(:send_email, to,
              from, subject, body)\nend\n\n\n# Auto-Approve request?\n$evm.log(\"info\",
              \"Checking for auto_approval\")\napproval_type = $evm.object['approval_type'].downcase\nif
              approval_type == 'auto'\n  $evm.log(\"info\", \"AUTO-APPROVING\")\n
              \ $evm.root[\"miq_request\"].approve(\"admin\", \"Auto-Approved\")\nelse\n
              \ # Get miq_request from root\n  miq_request = $evm.root['miq_request']\n
              \ raise \"miq_request missing\" if miq_request.nil?\n  $evm.log(\"info\",
              \"Detected Request:<#{miq_request.id}> with Approval State:<#{miq_request.approval_state}>\")\n\n
              \ # Override the default appliance IP Address below\n  appliance = nil\n
              \ # appliance ||= 'evmserver.company.com'\n  appliance ||= $evm.root['miq_server'].ipaddress\n\n
              \ # Email Requester and Approver\n  emailrequester(miq_request, appliance)\n
              \ emailapprover(miq_request, appliance)\nend\n\ninfo(\"Automate Method
              Ended\")\n\nexit MIQ_OK\n"
            approve_request.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: approve_request
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            pending_request.rb: ! '#

              # Description: This method is executed when the provisioning request
              is NOT auto-approved

              #


              # Get objects

              msg = $evm.object[''reason'']

              $evm.log(''info'', "#{msg}")


              # Raise automation event: request_pending

              $evm.root["miq_request"].pending

'
            pending_request.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: pending_request
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            validate_request.rb: ! "#\n# Description: This method validates the provisioning
              request using the values\n# [quota_max_cpu, quota_max_memory, quota_max_storage]
              from the group associated with\n# the project tag specified in the request.\n#\n\n######
              UTILITY METHODS ######\n# Method for logging\ndef log(level, message)\n
              \ @method = 'validate_request'\n  $evm.log(level, \"#{message}\")\nend\n\n#
              Convenience methods\ndef info(message)\n  log(:info, message)\nend\n\ndef
              debug(message)\n  log(:debug, message)\nend\n\ndef dump_root\n  info(\"Root:<$evm.root>
              Attributes - Begin\")\n  $evm.root.attributes.sort.each { |k, v| info(\"
              Attribute - #{k}: #{v}\") }\n  info(\"Root:<$evm.root> Attributes -
              End\")\n  info(\"\")\nend\n\n\ndef dump_attributes(object)\n  info(\"Begin
              Attributes [object.attributes]\")\n  object.attributes.sort.each { |k,
              v| info(\"  #{k} = #{v.inspect}\") }\n  info(\"End Attributes [object.attributes]\")\n
              \ info(\"\")\nend\n\n###### UTILITY METHODS ######\n\nrequire 'json'\n\nclass
              Resources\n  attr_accessor :cpu, :memory, :storage\n\n  def initialize(cpu,
              memory, storage)\n    @cpu, @memory, @storage = cpu.to_i, memory.to_i,
              storage.to_i\n  end\n\n  def inspect\n    return \"CPU: #{self.cpu}
              Memory: #{self.memory} Storage: #{self.storage}\"\n  end\n  \n  def
              +(rhs)\n    # make sure we're dealing with the same class of object.\n
              \   unless rhs.is_a? self.class\n      raise \"Doing an operation on
              an object of an incompatible class(#{rhs.class}).\"\n    end\n\n    #
              duplicate this object and return the dupe after the operation.\n    dupe
              = self.dup\n    dupe.cpu = dupe.cpu.to_i + rhs.cpu.to_i\n    dupe.memory
              = dupe.memory.to_i + rhs.memory.to_i\n    dupe.storage = dupe.storage.to_i
              + rhs.storage.to_i\n\n    return dupe\n  end\n\n  def -(rhs)\n    #
              make sure we're dealing with the same class of object.\n    unless rhs.is_a?
              self.class\n      raise \"Doing an operation on an object of an incompatible
              class(#{rhs.class}).\"\n    end\n\n    # duplicate this object and return
              the dupe after the operation.\n    dupe = self.dup\n    dupe.cpu = dupe.cpu.to_i
              - rhs.cpu.to_i\n    dupe.memory = dupe.memory.to_i - rhs.memory.to_i\n
              \   dupe.storage = dupe.storage.to_i - rhs.storage.to_i\n\n    return
              dupe\n  end\n\n  def is_overutilized?\n    if self.cpu < 0 or self.memory
              < 0 or self.storage < 0\n      return true\n    end\n    return false\n
              \ end\nend\n\ndef get_filter_value(group, name)\n  filter = group.filters['managed'].select
              { |f| f[0].starts_with? \"/managed/#{name}/\" }.first.first\n  value
              = filter.split('/').last\n  return value\nend\n\ndef get_project_quotas(project_tag)\n
              \ quotas = {}\n\n  # Get group associated with project.\n  filter_tag
              = \"/managed/#{project_tag}\"\n  group = $evm.vmdb('miqGroup').all.select
              { |g| g.filters!=nil && (g.filters['managed'].include? [\"#{filter_tag}\"])
              }.first\n  info(\"Associated group retrieved: #{group.description}\")\n
              \ quotas = Resources.new(0,0,0)\n  quotas.cpu = get_filter_value(group,
              'quota_max_cpu')\n  quotas.memory = get_filter_value(group, 'quota_max_memory')\n
              \ quotas.storage = get_filter_value(group, 'quota_max_storage')\n  info(\"Project
              quota: #{quotas.inspect}\")\n  return quotas  \nend\n\ndef get_project_allocations(project_tag)\n
              \ # Get already allocated resource levels.\n  allocated = Resources.new(0,0,0)\n
              \ group_vms = $evm.vmdb('vm').all.select { |vm| vm.tags.include? \"#{project_tag}\"
              }\n  group_vms.each { |vm|\n    allocated.cpu += vm.hardware.numvcpus\n
              \   allocated.memory += vm.hardware.memory_cpu\n    allocated.storage
              += vm.hardware.disk_capacity\n  }\n  allocated.storage /= (1024**3)\n\n
              \ info(\"Already allocated resources: #{allocated.inspect}\")\n  return
              allocated\nend\n\ndef extract_request(request)\n  require 'fog'\n  \n
              \ vms_in_request = request.get_option(:dialog)[\"dialog_vm_qty\"].to_i\n
              \ flavor_id = request.get_option(:dialog)[\"dialog_vm_size\"]\n  flavor
              = $evm.vmdb('flavor').find(flavor_id)\n\n  # get CPU in request\n  cpus_in_flavor
              = flavor.cpus.to_i\n  cores_per_cpu = flavor.cpu_cores.nil? ? 1 : flavor.cpu_cores.to_i\n
              \ total_cpus = vms_in_request * cpus_in_flavor * cores_per_cpu\n  info(\"Total
              Requested Provisioning vCPUs: #{total_cpus}\")\n  \n  # get memory in
              request\n  memory_per_vm = flavor.memory / (1024**2)\n  total_memory
              = vms_in_request * memory_per_vm\n  info(\"Total Requested Provisioning
              Memory: %.2fMB\" % total_memory)\n  \n  # get storage size\n  info(\"Flavor
              ID: #{flavor_id}\")\n  info(\"Flavor: #{flavor}\")\n  ems = flavor.ext_management_system\n
              \ compute = Fog::Compute.new(:provider => ems.emstype,\n                             :openstack_username
              => ems.authentication_userid,\n                             :openstack_api_key
              => ems.authentication_password,\n                             :openstack_auth_url
              => \"http://#{ems.hostname}:#{ems.port}/v2.0/tokens\",\n                             :openstack_tenant
              => 'admin')\n  storage_per_vm = compute.get_flavor_details(flavor.ems_ref).data[:body]['flavor']['disk'].to_i\n
              \ total_storage = storage_per_vm * vms_in_request\n  info(\"Total Requested
              Provisioning Storage: %.2fGB\" % total_storage)\n  \n  return Resources.new(total_cpus,
              total_memory, total_storage)\nend\n\ninfo(\"Automate Method started\")\n\n#
              TEMPORARY SHORTCUT    \nexit MIQ_OK\n    \n# Initialize Variables\nquota_exceeded
              = false\nprov = $evm.root['miq_request']\nprov_resource = prov.resource\nraise
              \"Provisioning Request not found\" if prov.nil? || prov_resource.nil?\n\n#
              Get template information\n#template = prov.resource.vm_template rescue
              nil\n#raise \"VM template not specified\" if template.nil?\n\n\n\n#
              Get associated project info for quotas and allocations.\nproject = JSON.parse(prov.get_option(:dialog)[\"dialog_project\"])\ninfo(\"Project
              tag name: #{project['tag_name']} id: #{project['tag_id']}\")\nquotas
              = get_project_quotas(project['tag_name'])\nallocated = get_project_allocations(project['tag_name'])\n\n#
              Calculate available resources left.\navailable = quotas - allocated\ninfo(\"Available
              resources for project: #{available.inspect}\")\n\n# Get requested resource
              levels.\nrequest = extract_request(prov)\nremaining_resource = available
              - request\n\n# Initialize variables used\napproval_req = false\nreason1
              \     = nil\nreason2      = nil\nreason3      = nil\n\nif remaining_resource.is_overutilized?\n
              \ info(\"Cannot proceed with provisioning request. Request exceeds available
              resources for project.\")\n  approval_req = true\n  if remaining_resource.cpu
              < 0\n    reason1 = \"Requested CPUs (#{request.cpu}) exceeds available
              CPUs (#{available.cpu}).\"\n  end\n  if remaining_resource.memory <
              0\n    reason2 = \"Requested memory (#{request.memory}) exceeds available
              memory (#{available.memory}).\"\n  end\n  if remaining_resource.storage
              < 0\n    reason3 = \"Requested storage (#{request.storage}) exceeds
              available storage (#{available.storage}).\"\n  end\nend\n\n######################################\n#\n#
              Update Message to Requester\n#\n######################################\nif
              approval_req == true\n  msg =  \"Request failed for the following reasons:
              \"\n  msg += \"(#{reason1}) \" unless reason1.nil?\n  msg += \"(#{reason2})
              \" unless reason2.nil?\n  msg += \"(#{reason3}) \" unless reason3.nil?\n
              \ prov_resource.set_message(msg)\n  $evm.log(\"info\", \"Inspecting
              Messge:<#{msg}>\")\n\n  $evm.root['ae_result'] = 'error'\n  $evm.object['reason']
              = msg\nend\n\ninfo(\"Automate method ended\")\n"
            validate_request.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: validate_request
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
        ServiceProvisionRequestQuotaVerification.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: Factory State Machines
                display_name: 
                name: ServiceProvisionRequestQuotaVerification
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: attribute
                  name: max_owner_cpu
                  display_name: Owner - Max CPUs Allowed
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: max_owner_memory
                  display_name: Owner - Max Memory Allowed (MB)
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: max_owner_storage
                  display_name: Owner - Max Storage Allowed (GB)
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: max_group_cpu
                  display_name: Group - Max CPUs Allowed
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: max_group_memory
                  display_name: Group - Max Memory Allowed (MB)
                  datatype: string
                  priority: 5
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: max_group_storage
                  display_name: Group - Max Storage Allowed (GB)
                  datatype: string
                  priority: 6
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: state
                  name: ValidateQuotas
                  display_name: 
                  datatype: string
                  priority: 7
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: ! '#validate_quotas'
                  on_exit: 
                  on_error: ! '#rejected'
                  max_retries: '100'
                  max_time: 
          Default.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: Default
                inherits: 
                description: 
              fields: []
          __methods__:
            rejected.rb: ! '#

              # Description: This method runs when the provision request quota validation
              has failed

              #


              # Deny the request

              $evm.log(''info'', "Request denied because of Quota")

              $evm.root["miq_request"].deny("admin", "Quota Exceeded")

'
            rejected.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: rejected
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs:
                - field:
                    aetype: 
                    name: reason
                    display_name: 
                    datatype: string
                    priority: 1
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
            validate_quotas.rb: ! "#\n# Description: This method validates the provisioning
              request using the values\n# [quota_max_cpu, quota_max_memory, quota_max_storage]
              from the group associated with\n# the project tag specified in the request.\n#\n\n######
              UTILITY METHODS ######\n# Method for logging\ndef log(level, message)\n
              \ @method = 'validate_request'\n  $evm.log(level, \"#{message}\")\nend\n\n#
              Convenience methods\ndef info(message)\n  log(:info, message)\nend\n\ndef
              debug(message)\n  log(:debug, message)\nend\n\ndef dump_root\n  info(\"Root:<$evm.root>
              Attributes - Begin\")\n  $evm.root.attributes.sort.each { |k, v| info(\"
              Attribute - #{k}: #{v}\") }\n  info(\"Root:<$evm.root> Attributes -
              End\")\n  info(\"\")\nend\n\n\ndef dump_attributes(object)\n  info(\"Begin
              Attributes [object.attributes]\")\n  object.attributes.sort.each { |k,
              v| info(\"  #{k} = #{v.inspect}\") }\n  info(\"End Attributes [object.attributes]\")\n
              \ info(\"\")\nend\n\n###### UTILITY METHODS ######\n\nrequire 'json'\n\nclass
              Resources\n  attr_accessor :cpu, :memory, :storage\n\n  def initialize(cpu,
              memory, storage)\n    @cpu, @memory, @storage = cpu.to_i, memory.to_i,
              storage.to_i\n  end\n\n  def inspect\n    return \"CPU: #{self.cpu}
              Memory: #{self.memory} Storage: #{self.storage}\"\n  end\n  \n  def
              +(rhs)\n    # make sure we're dealing with the same class of object.\n
              \   unless rhs.is_a? self.class\n      raise \"Doing an operation on
              an object of an incompatible class(#{rhs.class}).\"\n    end\n\n    #
              duplicate this object and return the dupe after the operation.\n    dupe
              = self.dup\n    dupe.cpu = dupe.cpu.to_i + rhs.cpu.to_i\n    dupe.memory
              = dupe.memory.to_i + rhs.memory.to_i\n    dupe.storage = dupe.storage.to_i
              + rhs.storage.to_i\n\n    return dupe\n  end\n\n  def -(rhs)\n    #
              make sure we're dealing with the same class of object.\n    unless rhs.is_a?
              self.class\n      raise \"Doing an operation on an object of an incompatible
              class(#{rhs.class}).\"\n    end\n\n    # duplicate this object and return
              the dupe after the operation.\n    dupe = self.dup\n    dupe.cpu = dupe.cpu.to_i
              - rhs.cpu.to_i\n    dupe.memory = dupe.memory.to_i - rhs.memory.to_i\n
              \   dupe.storage = dupe.storage.to_i - rhs.storage.to_i\n\n    return
              dupe\n  end\n\n  def is_overutilized?\n    if self.cpu < 0 or self.memory
              < 0 or self.storage < 0\n      return true\n    end\n    return false\n
              \ end\nend\n\ndef get_filter_value(group, name)\n  filter = group.filters['managed'].select
              { |f| f[0].starts_with? \"/managed/#{name}/\" }.first.first\n  value
              = filter.split('/').last\n  return value\nend\n\ndef get_project_quotas(project_tag)\n
              \ quotas = {}\n\n  # Get group associated with project.\n  filter_tag
              = \"/managed/#{project_tag}\"\n  group = $evm.vmdb('miqGroup').all.select
              { |g| g.filters!=nil && (g.filters['managed'].include? [\"#{filter_tag}\"])
              }.first\n  info(\"Associated group retrieved: #{group.description}\")\n
              \ quotas = Resources.new(0,0,0)\n  quotas.cpu = get_filter_value(group,
              'quota_max_cpu')\n  quotas.memory = get_filter_value(group, 'quota_max_memory')\n
              \ quotas.storage = get_filter_value(group, 'quota_max_storage')\n  info(\"Project
              quota: #{quotas.inspect}\")\n  return quotas  \nend\n\ndef get_project_allocations(project_tag)\n
              \ # Get already allocated resource levels.\n  allocated = Resources.new(0,0,0)\n
              \ group_vms = $evm.vmdb('vm').all.select { |vm| vm.tags.include? \"#{project_tag}\"
              }\n  group_vms.each { |vm|\n    allocated.cpu += vm.hardware.numvcpus\n
              \   allocated.memory += vm.hardware.memory_cpu\n    allocated.storage
              += vm.hardware.disk_capacity\n  }\n  allocated.storage /= (1024**3)\n\n
              \ info(\"Already allocated resources: #{allocated.inspect}\")\n  return
              allocated\nend\n\ndef extract_request(request)\n  require 'fog'\n  \n
              \ vms_in_request = request.get_option(:dialog)[\"dialog_vm_qty\"].to_i\n
              \ flavor_id = request.get_option(:dialog)[\"dialog_vm_size\"]\n  flavor
              = $evm.vmdb('flavor').find(flavor_id)\n\n  # get CPU in request\n  cpus_in_flavor
              = flavor.cpus.to_i\n  cores_per_cpu = flavor.cpu_cores.nil? ? 1 : flavor.cpu_cores.to_i\n
              \ total_cpus = vms_in_request * cpus_in_flavor * cores_per_cpu\n  info(\"Total
              Requested Provisioning vCPUs: #{total_cpus}\")\n  \n  # get memory in
              request\n  memory_per_vm = flavor.memory / (1024**2)\n  total_memory
              = vms_in_request * memory_per_vm\n  info(\"Total Requested Provisioning
              Memory: %.2fMB\" % total_memory)\n  \n  # get storage size\n  ems =
              flavor.ext_management_system\n  compute = Fog::Compute.new(:provider
              => ems.emstype,\n                             :openstack_username =>
              ems.authentication_userid,\n                             :openstack_api_key
              => ems.authentication_password,\n                             :openstack_auth_url
              => \"http://#{ems.hostname}:#{ems.port}/v2.0/tokens\",\n                             :openstack_tenant
              => 'admin')\n  \n  storage_per_vm = compute.get_flavor_details(flavor.ems_ref).data[:body]['flavor']['disk'].to_i\n
              \ total_storage = storage_per_vm * vms_in_request\n  info(\"Total Requested
              Provisioning Storage: %.2fGB\" % total_storage)\n  \n  return Resources.new(total_cpus,
              total_memory, total_storage)\nend\n\ninfo(\"Automate Method started\")\n\n#
              Initialize Variables\nquota_exceeded = false\nprov = $evm.root['miq_request']\nprov_resource
              = prov.resource\nraise \"Provisioning Request not found\" if prov.nil?
              || prov_resource.nil?\n\n\n# Get associated project info for quotas
              and allocations.\nproject = JSON.parse(prov.get_option(:dialog)[\"dialog_project\"])\ninfo(\"Project
              tag name: #{project['tag_name']} id: #{project['tag_id']}\")\nquotas
              = get_project_quotas(project['tag_name'])\nallocated = get_project_allocations(project['tag_name'])\n\n#
              Calculate available resources left.\navailable = quotas - allocated\ninfo(\"Available
              resources for project: #{available.inspect}\")\n\n# Get requested resource
              levels.\nrequest = extract_request(prov)\nremaining_resource = available
              - request\n\n# Initialize variables used\nquota_exceeded = false\nreason1
              \     = nil\nreason2      = nil\nreason3      = nil\n\nif remaining_resource.is_overutilized?\n
              \ info(\"Cannot proceed with provisioning request. Request exceeds available
              resources for project.\")\n  quota_exceeded = true\n  if remaining_resource.cpu
              < 0\n    reason1 = \"Requested CPUs (#{request.cpu}) exceeds available
              CPUs (#{available.cpu}).\"\n  end\n  if remaining_resource.memory <
              0\n    reason2 = \"Requested memory (#{request.memory}) exceeds available
              memory (#{available.memory}).\"\n  end\n  if remaining_resource.storage
              < 0\n    reason3 = \"Requested storage (#{request.storage}) exceeds
              available storage (#{available.storage}).\"\n  end\nend\n\n######################################\n#\n#
              Update Message to Requester\n#\n######################################\n
              \   if quota_exceeded == true\n  msg =  \"Request failed for the following
              reasons: \"\n  msg += \"(#{reason1}) \" unless reason1.nil?\n  msg +=
              \"(#{reason2}) \" unless reason2.nil?\n  msg += \"(#{reason3}) \" unless
              reason3.nil?\n  prov_resource.set_message(msg)\n  $evm.log(\"info\",
              \"Inspecting Messge:<#{msg}>\")\n\n  $evm.root['ae_result'] = 'error'\n
              \ $evm.object['reason'] = msg\nend\n\ninfo(\"Automate method ended\")\n"
            validate_quotas.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: validate_quotas
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
  Methods:
    __namespace__.yaml:
      object_type: namespace
      version: 1.0
      object:
        attributes:
          name: Methods
          description: 
          display_name: 
          system: 
          priority: 
          enabled: 
    Emails.class:
      __class__.yaml:
        object_type: class
        version: 1.0
        object:
          attributes:
            description: 
            display_name: 
            name: Emails
            type: 
            inherits: 
            visibility: 
            owner: 
          schema:
          - field:
              aetype: method
              name: execute
              display_name: 
              datatype: string
              priority: 1
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
          - field:
              aetype: attribute
              name: payload
              display_name: 
              datatype: string
              priority: 2
              owner: 
              default_value: 
              substitute: true
              message: create
              visibility: 
              collect: 
              scope: 
              description: 
              condition: 
              on_entry: 
              on_exit: 
              on_error: 
              max_retries: 
              max_time: 
      Email_Owner.yaml:
        object_type: instance
        version: 1.0
        object:
          attributes:
            display_name: 
            name: Email_Owner
            inherits: 
            description: 
          fields:
          - execute:
              value: Email_Owner
      __methods__:
        Email_Owner.rb: ! "###################################\r\n#\r\n# CloudForms
          Automate Method: Email_Owner\r\n#\r\n# This method is used to Email_Owner
          AWS Services\r\n#\r\n###################################\r\n#\r\n# Method
          for logging\r\nbegin\r\n  @method = 'Email_Owner'\r\n  $evm.log(\"info\",
          \"#{@method} - EVM Automate Method Started\")\r\n\r\n  # Turn of verbose
          logging\r\n  @debug = true\r\n\r\n  require \"json\"\r\n\r\n  ###################################\r\n
          \ # Method: dumpRoot\r\n  #\r\n  ###################################\r\n
          \ def dumpRoot\r\n    $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
          Begin Attributes\")\r\n    $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\",
          \"#{@method} - Root:<$evm.root> Attributes - #{k}: #{v}\")}\r\n    $evm.log(\"info\",
          \"#{@method} - Root:<$evm.root> End Attributes\")\r\n    $evm.log(\"info\",
          \"\")\r\n  end\r\n\r\n  dumpRoot\r\n\r\n  vm = $evm.root['vm']\r\n\r\n  payload
          = nil\r\n  payload ||= $evm.object['payload']\r\n  $evm.log(\"info\", \"#{@method}
          - ==================== payload: #{payload.inspect}\") if @debug\r\n\r\n
          \ @data = JSON.load(payload)\r\n  $evm.log(\"info\", \"#{@method} - ====================
          data: #{@data.inspect}\") if @debug\r\n\r\n  type = nil\r\n  type ||= @data['type']\r\n
          \ $evm.log(\"info\", \"#{@method} - ==================== type: #{type.inspect}\")
          if @debug\r\n\r\n  $evm.log(\"info\", \"#{@method} - ====================
          VM: #{vm.inspect}\") if @debug\r\n\r\n  \r\n  ####################\r\n  from
          = nil\r\n  from ||= $evm.root['from_email'] || 'admin@cloudforms.iad.salab.redhat.com'\r\n
          \ evm_owner_id = vm.attributes['evm_owner_id']\r\n  owner = nil\r\n  owner
          = $evm.vmdb('user', evm_owner_id) unless evm_owner_id.nil?\r\n  $evm.log(\"info\",
          \"#{@method} - VM Owner: #{owner.inspect}\") if @debug\r\n  @to = nil\r\n
          \ @to = owner.email unless owner.nil?\r\n  \r\n  if @to.nil?\r\n    $evm.log(:info,
          \"Sending email to: #{$evm.root['user'].email}\")\r\n    @to = $evm.root['user'].email\r\n
          \ end\r\n  \r\n  @signature = nil\r\n  @signature ||= $evm.object['signature']
          || \"Your Virtualization Team\"\r\n\r\n  def email_info()\r\n    @body +=
          \"-------------------------------- <br>\"\r\n    @body += \"Forward the
          message below to <br>\"\r\n    @body += \"#{@to}\"\r\n    @body += \"<br>--------------------------------
          <br>\"\r\n    @body += \"<br>\"\r\n    @body += \"--------------------------------
          <br>\"\r\n    @body += \" #{@data['service_name']} Info<br>\"\r\n    @body
          += \"-------------------------------- \"\r\n  end\r\n\r\n  def email_footer()\r\n
          \   @body += \"<br><br> If you have any issues with your new #{@data['service_name']}
          please contact Support.\"\r\n    @body += \"<br><br> Thank you,<br>\"\r\n
          \   @body += \"#{@signature}\"\r\n  end\r\n\r\n  case type\r\n\r\n    ##################################################################################################################\r\n
          \   when \"test\"\r\n      $evm.log(\"info\", \"#{@method} - ====================
          vm: #{vm.inspect}\") if @debug\r\n    ##################################################################################################################\r\n\r\n
          \   ##################################################################################################################\r\n
          \   when \"create_ebs_volume\"\r\n      $evm.log(\"info\", \"#{@method}
          - ==================== Running: #{type.inspect}\") if @debug\r\n      subject
          = \"Your #{@data['service_name']} request has been #{@data['action']}: #{@data['vol_name']}\"\r\n
          \     $evm.log(\"info\", \"#{@method} - ==================== subject: #{subject.inspect}\")
          if @debug\r\n      @body = \"Hello, \"\r\n      @body += \"This email is
          being sent by EVM to inform you of the provisioning of a new #{@data['service_name']}.<br>\"\r\n
          \     @body += \"This new #{@data['service_name']} requires verification
          in the Amazon EC2 console.<br>\"\r\n      @body += \"Once that has been
          completed, use this message to inform the \"\r\n      @body += \"requester
          that their new #{@data['service_name']} is ready.<br><br>\"\r\n      email_info()\r\n
          \     # Send custom info\r\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\r\n
          \     @body += \"<br><b>Volume Info</b> #{@data['vol_name']}\"\r\n      email_footer()\r\n
          \     $evm.log(\"info\", \"#{@method} - ==================== body: #{@body.inspect}\")
          if @debug\r\n    ##################################################################################################################\r\n\r\n
          \   ##################################################################################################################\r\n
          \   when \"create_attach_ebs_volume\"\r\n      $evm.log(\"info\", \"#{@method}
          - ==================== Running: #{type.inspect}\") if @debug\r\n      subject
          = \"Your #{@data['service_name']} request has been #{@data['action']} -
          #{@data['vm_name']}: #{@data['vol_name']}\"\r\n      $evm.log(\"info\",
          \"#{@method} - ==================== subject: #{subject.inspect}\") if @debug\r\n
          \     @body = \"Hello, \"\r\n      @body += \"This email is being sent by
          EVM to inform you of the provisioning of a new #{@data['service_name']}.<br>\"\r\n
          \     @body += \"This new #{@data['service_name']} requires verification
          in the Amazon EC2 console.<br>\"\r\n      @body += \"Once that has been
          completed, use this message to inform the \"\r\n      @body += \"requester
          that their new #{@data['service_name']} is ready.<br><br>\"\r\n      email_info()\r\n
          \     # Send custom info\r\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\r\n
          \     @body += \"<br><b>VM Name:</b> #{@data['vm_name']}\"\r\n      @body
          += \"<br><b>Volume Info</b> #{@data['vol_name']}\"\r\n      @body += \"<br><b>Attached
          to:</b> #{@data['selected_device_name']}\"\r\n      email_footer()\r\n      $evm.log(\"info\",
          \"#{@method} - ==================== body: #{@body.inspect}\") if @debug\r\n
          \   ##################################################################################################################\r\n\r\n
          \   ##################################################################################################################\r\n
          \   when \"attach_ebs_volume\"\r\n      $evm.log(\"info\", \"#{@method}
          - ==================== Running: #{type.inspect}\") if @debug\r\n      subject
          = \"Your #{@data['service_name']} request has been #{@data['action']} -
          #{@data['vm_name']}: #{@data['instance_id']}\"\r\n      $evm.log(\"info\",
          \"#{@method} - ==================== subject: #{subject.inspect}\") if @debug\r\n
          \     @body = \"Hello, \"\r\n      @body += \"This email is being sent by
          EVM to inform you of the #{@data['service_name']} has been attached to #{@data['vm_name']}.<br>\"\r\n
          \     @body += \"This new #{@data['service_name']} requires verification
          in the Amazon EC2 console.<br>\"\r\n      @body += \"Once that has been
          completed, use this message to inform the \"\r\n      @body += \"requester
          that their new #{@data['service_name']} is ready.<br><br>\"\r\n      email_info()\r\n
          \     # Send custom info\r\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\r\n
          \     @body += \"<br><b>VM Name:</b> #{@data['vm_name']}\"\r\n      @body
          += \"<br><b>Instance ID:</b> #{@data['instance_id']}\"\r\n      @body +=
          \"<br><b>Attached to:</b> #{@data['selected_device_name']}\"\r\n      email_footer()\r\n
          \     $evm.log(\"info\", \"#{@method} - ==================== body: #{@body.inspect}\")
          if @debug\r\n    ##################################################################################################################\r\n\r\n
          \   ##################################################################################################################\r\n
          \   when \"delete_ebs_volume\"\r\n      $evm.log(\"info\", \"#{@method}
          - ==================== Running: #{type.inspect}\") if @debug\r\n      subject
          = \"Your #{@data['service_name']} request has been #{@data['action']} -
          #{@data['vm_name']}: #{@data['vol_name']}\"\r\n      $evm.log(\"info\",
          \"#{@method} - ==================== subject: #{subject.inspect}\") if @debug\r\n
          \     @body = \"Hello, \"\r\n      @body += \"<br>This email is being sent
          by EVM to inform you of the #{@data['vol_name']} has been #{@data['action']}.<br>\"\r\n
          \     email_info()\r\n      # Send custom info\r\n      @body += \"<br><b>Action:</b>
          #{@data['action']}\"\r\n      @body += \"<br><b>Volume Info</b> #{@data['vol_name']}\"\r\n
          \     email_footer()\r\n      $evm.log(\"info\", \"#{@method} - ====================
          body: #{@body.inspect}\") if @debug\r\n    ##################################################################################################################\r\n\r\n
          \   ##################################################################################################################\r\n
          \   when \"detach_ebs_volume\"\r\n      $evm.log(\"info\", \"#{@method}
          - ==================== Running: #{type.inspect}\") if @debug\r\n      subject
          = \"Your #{@data['service_name']} request has been #{@data['action']} -
          #{@data['vm_name']}: #{@data['vol_name']}\"\r\n      $evm.log(\"info\",
          \"#{@method} - ==================== subject: #{subject.inspect}\") if @debug\r\n
          \     # Call the header\r\n      @body = \"Hello, \"\r\n      @body += \"<br>This
          email is being sent by EVM to inform you of the #{@data['vol_name']} has
          been #{@data['action']} from #{@data['vm_name']}<br>\"\r\n      email_info()\r\n
          \     # Send custom info\r\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\r\n
          \     @body += \"<br><b>VM Name:</b> #{@data['vm_name']}\"\r\n      @body
          += \"<br><b>Volume Info</b> #{@data['vol_name']}\"\r\n      email_footer()\r\n
          \     $evm.log(\"info\", \"#{@method} - ==================== body: #{@body.inspect}\")
          if @debug\r\n    ##################################################################################################################\r\n\r\n
          \   ##################################################################################################################\r\n
          \   when \"create_attach_elb\"\r\n      $evm.log(\"info\", \"#{@method}
          - ==================== Running: #{type.inspect}\") if @debug\r\n      subject
          = \"Your #{@data['service_name']} request has #{@data['action']} - #{@data['vm_name']}:
          #{@data['elb_name']}\"\r\n      $evm.log(\"info\", \"#{@method} - ====================
          subject: #{subject.inspect}\") if @debug\r\n      @body = \"Hello, \"\r\n
          \     @body += \"<br>This email is being sent by EVM to inform you of the
          provisioning of a new #{@data['service_name']}.<br>\"\r\n      @body +=
          \"This new #{@data['service_name']} requires verification in the Amazon
          EC2 console.<br>\"\r\n      @body += \"Once that has been completed, use
          this message to inform the \"\r\n      @body += \"requester that their new
          #{@data['service_name']} is ready.<br><br>\"\r\n      email_info()\r\n      #
          Send custom info\r\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\r\n
          \     @body += \"<br><b>Amazon ELB Name  :</b> #{@data['elb_name']}\"\r\n
          \     @body += \"<br><b>ELB Amazon Region:</b> #{@data['region']}\"\r\n
          \     @body += \"<br><b>ELB Amazon Availability Zone:</b> #{@data['availability_zone']}\"\r\n
          \     email_footer()\r\n      $evm.log(\"info\", \"#{@method} - ====================
          body: #{@body.inspect}\") if @debug\r\n    #############################################################################################################\r\n\r\n
          \ end\r\n\r\n  $evm.log(:info, \"Sending email to #{@to} from #{from} subject:
          #{subject}\")\r\n  $evm.execute(:send_email, @to, from, subject, @body)\r\n\r\n
          \ $evm.log(\"info\", \"#{@method} - ================================= EVM
          Automate Method Ended\")\r\n\r\n  #\r\n  # Exit method\r\n  #\r\n  $evm.log(\"info\",
          \"#{@method} - EVM Automate Method Ended\")\r\n  exit MIQ_OK\r\n\r\n    #\r\n
          \   # Set Ruby rescue behavior\r\n    #\r\nrescue => err\r\n  $evm.log(\"error\",
          \"#{@method} - [#{err}]\\n#{err.backtrace.join(\"\\n\")}\")\r\n  exit MIQ_STOP\r\nend\n"
        Email_Owner.yaml:
          object_type: method
          version: 1.0
          object:
            attributes:
              name: Email_Owner
              display_name: 
              description: 
              scope: instance
              language: ruby
              location: inline
            inputs: []
  Integration:
    __namespace__.yaml:
      object_type: namespace
      version: 1.0
      object:
        attributes:
          name: Integration
          description: 
          display_name: 
          system: 
          priority: 
          enabled: 
    CloudFlare:
      __namespace__.yaml:
        object_type: namespace
        version: 1.0
        object:
          attributes:
            name: CloudFlare
            description: 
            display_name: 
            system: 
            priority: 
            enabled: 
      CloudFlareDNS.class:
        __class__.yaml:
          object_type: class
          version: 1.0
          object:
            attributes:
              description: 
              display_name: 
              name: CloudFlareDNS
              type: 
              inherits: 
              visibility: 
              owner: 
            schema:
            - field:
                aetype: attribute
                name: domain
                display_name: 
                datatype: string
                priority: 1
                owner: 
                default_value: yale-nus.edu.sg
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: attribute
                name: apihost
                display_name: 
                datatype: string
                priority: 2
                owner: 
                default_value: api.cloudflare.com
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: attribute
                name: tkn
                display_name: 
                datatype: string
                priority: 3
                owner: 
                default_value: 80ddf8458f30a996b7a6fdf3fa2c85d1ca03a
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: attribute
                name: zoneid
                display_name: 
                datatype: string
                priority: 4
                owner: 
                default_value: f64975b2ef75e68498f5cf1237a6c05b
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: attribute
                name: email
                display_name: 
                datatype: string
                priority: 5
                owner: 
                default_value: it.service.subscriber@yale-nus.edu.sg
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: RegisterAmazonVM
                display_name: 
                datatype: string
                priority: 6
                owner: 
                default_value: register_amazon_vm
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: RegisterOpenStackVM
                display_name: 
                datatype: string
                priority: 7
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
        RegisterAmazonVM.yaml:
          object_type: instance
          version: 1.0
          object:
            attributes:
              display_name: Register with CloudFlare DNS
              name: RegisterAmazonVM
              inherits: 
              description: Register Amazon Vm with CloudFlare DNS
            fields: []
        RegisterOpenStackVM.yaml:
          object_type: instance
          version: 1.0
          object:
            attributes:
              display_name: Register with CloudFlare DNS
              name: RegisterOpenStackVM
              inherits: 
              description: Register Amazon Vm with CloudFlare DNS
            fields:
            - RegisterAmazonVM:
                value: ! '#'
            - RegisterOpenStackVM:
                value: register_openstack_vm
        __methods__:
          register_amazon_vm.rb: ! "#\n# Method: register_amazon_vm\n#\n# This methd
            is used to register an Amazon VM to the CloudFlareDNS service.\n#\n# Author:
            Lester Claudio <lester@redhat.com>\n\n# Load the aws-sdk\nrequire \"aws-sdk\"\nrequire
            \"CloudFlareDNS\"\nrequire \"json\"\n\n\nbegin\n  # Get provisioning object\n
            \ prov = $evm.root[\"miq_provision\"]\n\n  $evm.log(\"info\", \"Amazon
            Post Provision: Provisioning ID:<#{prov.id}> Provision Request ID:<#{prov.miq_provision_request.id}>
            Provision Type: <#{prov.provision_type}>\")\n\n  vm = prov.vm\n  ems =
            $evm.vmdb(:ems_amazon).first # vm.ext_management_system\n\n  $evm.log(:info,
            \ \"Retrieved ems and vm references ...\")\n\n  # Now let's go to AWS
            and get the ipaddress information for the instance\n  region = ems.provider_region\n
            \ access_key_id   = ems.authentication_userid\n  secret_access_key = ems.authentication_password\n\n
            \ $evm.log(:info,  \"Calling AWS Config...\")\n  AWS.config(\n    :access_key_id
            => access_key_id,\n    :secret_access_key => secret_access_key\n  )\n
            \ \n  default_region = ems.provider_region\n   \n  $evm.log(:info,  \"Creating
            EC2 Object ...\")\n  # Create a basic EC2 object\n  ec2_instance = AWS::EC2.new(
            :region => default_region )\n  \n  # Get the instance id for the AWS Instance\n
            \ instance_name = vm.uid_ems\n  \n  $evm.log(:info,  \"AWS Instance name
            = #{instance_name} ...\")\n  if instance_name.nil?\n    $evm.log(:info,
            \"Could not retrieve instance name from VM object\")\n    exit MIQ_ABORT\n
            \ end\n\n  aws_instance = ec2_instance.instances[instance_name]\n  \n
            \ $evm.log(:info,  \"AWS Instance name is #{aws_instance} ...\")\n  \n
            \ #\n  # In AWS you can have a public ipaddress if your subnet isconfigured
            for auto-assign\n  # and a private ip address.  We are going to register
            both with CloudFlare DNS service.\n  # For the private ip address the
            naming convention will be:\n  # <hostname>-int.aws.yale-nus.edu.sg\n  #
            For the public IP address it will be:\n  # <hostname>.aws.yale-nus.edu.sg\n
            \ #\n  # \n  \n  # Let's get our public facing IP address first. If nil
            we will not register it with CloudFlareDNS.\n \n  ip_address = aws_instance.ip_address\n
            \ \n  if ip_address.nil?\n    $evm.log(:info,  \"No AWS Public IP Address
            for #{aws_instance} ...\")\n  else\n    $evm.log(:info,  \"AWS Instance
            [#{aws_instance}] Public IP Address is #{ip_address} ...\")\n  end\n  \n
            \ # Let's get our private IP address. If nil we will not register it with
            CloudFlareDNS.\n \n  private_ip_address = aws_instance.private_ip_address\n
            \ \n  if private_ip_address.nil?\n    $evm.log(:info,  \"No AWS Private
            IP Address for  #{aws_instance} ...\")\n  else\n    $evm.log(:info,  \"AWS
            Instance [#{aws_instance}] has Private IP Address is #{private_ip_address}
            ...\")\n  end\n  \n  # Get the domain from the State Machine attributes
            for YaleNUS\n  dns_domain = $evm.object['domain']\n  \n  # Use the user
            given name for the instance\n  dns_name = vm.name\n\n  # Create the options
            hash to initialize the CloudFlareDNS instance\n  options={}\n  #options[:config_file]
            = 'cloudflare-config.yaml'\n  options[:tkn] = $evm.object['tkn']\n  options[:email]
            = $evm.object['email']\n  options[:zoneid] = $evm.object['zoneid']\n  options[:apihost]
            = $evm.object['apihost']\n  \n  # Create a new CloudFlareDNS Instance\n
            \ cfdns = CloudFlareDNS.new(options)\n\n  # Check Public IP address first
            ...\n  unless ip_address.nil?\n   # Let's create the public DNS record
            ...\n   # Create the Add DNS Record request.\n   # Add a DNS Record to
            CloudFlare Data we will be adding\n\n    request_data = {}\n  \trequest_data[:type]
            = \"A\"\n  \trequest_data[:name] = dns_name + \".\" + dns_domain\n  \trequest_data[:content]
            = ip_address\n  \trequest_data[:ttl] = \"120\"\n  \n  \tjson_data = JSON.generate(request_data)\n
            \ \t$evm.log(:info,  \"Adding Public DNS Record #{json_data} to CloudFlare
            Service ...\")\n  \tresponse = cfdns.add_cloudflare_record(json_data)\n\n
            \ \tresult = response['success']\n\n  \tif result\n      \t$evm.log(:info,
            \"Added DNS Public record successfully to CloudFlare DNS Service for instance
            [#{aws_instance}]\")\n  \telse\n   \t\t$evm.log(:info, \"Could not add
            Public DNS record successfully to CloudFlare DNS Service for instance
            [#{aws_instance}]\")\n  \tend\n  end\n  \n  # Check Private IP address
            second ...\n  unless private_ip_address.nil?\n   # Let's create the public
            DNS record ...\n   # Create the Add DNS Record request.\n   # Add a DNS
            Record to CloudFlare Data we will be adding\n\n    request_data = {}\n
            \ \trequest_data[:type] = \"A\"\n  \trequest_data[:name] = dns_name +
            \"-int.\" + dns_domain\n    request_data[:content] = private_ip_address\n
            \ \trequest_data[:ttl] = \"120\"\n  \n  \tjson_data = JSON.generate(request_data)\n
            \   $evm.log(:info,  \"Adding Private DNS Record #{json_data} to CloudFlare
            Service ...\")\n  \tresponse = cfdns.add_cloudflare_record(json_data)\n\n
            \ \tresult = response['success']\n\n  \tif result\n      $evm.log(:info,
            \"Added DNS Private record successfully to CloudFlare DNS Service for
            instance [#{aws_instance}]\")\n  \telse\n      $evm.log(:info, \"Could
            not add Private DNS record successfully to CloudFlare DNS Service for
            instance [#{aws_instance}]\")\n  \tend\n  end\n  \n  \n  exit MIQ_OK\n
            \   \nrescue => ex\n    $evm.log(:info, \"register_amazon_vm: EXCEPTION
            #{ex.message}\")\n    exit MIQ_ABORT\nend\n"
          register_amazon_vm.yaml:
            object_type: method
            version: 1.0
            object:
              attributes:
                name: register_amazon_vm
                display_name: 
                description: 
                scope: instance
                language: ruby
                location: inline
              inputs: []
          register_openstack_vm.rb: ! "#\n# Method: register_openstack_vm\n#\n# This
            methd is used to register an OpenStack VM to the CloudFlareDNS service.\n#\n#
            Author: George Goh <george.goh@redhat.com>, Lester Claudio <lester@redhat.com>\n\n#
            Load the aws-sdk\nrequire \"fog\"\nrequire \"CloudFlareDNS\"\nrequire
            \"json\"\n\n\nbegin\n  # Get provisioning object\n  prov = $evm.root[\"miq_provision\"]\n\n
            \ $evm.log(\"info\", \"OpenStack Post Provision: Provisioning ID:<#{prov.id}>
            Provision Request ID:<#{prov.miq_provision_request.id}> Provision Type:
            <#{prov.provision_type}>\")\n\n  vm = prov.vm\n  ems = vm.ext_management_system\n
            \ os_tenant_name = $evm.vmdb(:CloudTenant).find(vm.cloud_tenant_id).name\n\n
            \ fog_conn = Fog::Compute.new({:provider => 'openstack',\n                        :openstack_username
            => ems.authentication_userid,\n                        :openstack_api_key
            => ems.authentication_password,\n                        :openstack_auth_url
            => \"http://#{ ems.hostname }:#{ ems.port }/v2.0/tokens\",\n                        :openstack_tenant
            => os_tenant_name})\n\n  $evm.log(\"info\", \"Retrieving Fog VM\")\n  fog_vm
            = fog_conn.servers.get(vm.ems_ref)\n\n  public_ip_address = fog_vm.public_ip_address\n
            \ all_ips = vm.ipaddresses.dup\n  all_ips.delete(public_ip_address)\n
            \ private_ip_address = all_ips.first\n  $evm.log(:info, \"Public VM IP
            Address: #{ public_ip_address } Private VM IP Address: #{ private_ip_address
            }\")\n  \n  # Get the domain from the State Machine attributes for YaleNUS\n
            \ dns_domain = $evm.object['domain']\n  \n  # Use the user given name
            for the instance\n  dns_name = vm.name\n\n  # Create the options hash
            to initialize the CloudFlareDNS instance\n  options={}\n  options[:tkn]
            = $evm.object['tkn']\n  options[:email] = $evm.object['email']\n  options[:zoneid]
            = $evm.object['zoneid']\n  options[:apihost] = $evm.object['apihost']\n
            \ \n  # Create a new CloudFlareDNS Instance\n  cfdns = CloudFlareDNS.new(options)\n\n
            \ # Check Public IP address first ...\n  unless public_ip_address.nil?\n
            \  # Let's create the public DNS record ...\n   # Create the Add DNS Record
            request.\n   # Add a DNS Record to CloudFlare Data we will be adding\n\n
            \   request_data = {}\n  \trequest_data[:type] = \"A\"\n  \trequest_data[:name]
            = dns_name + \".\" + dns_domain\n  \trequest_data[:content] = public_ip_address\n
            \ \trequest_data[:ttl] = \"120\"\n  \n  \tjson_data = JSON.generate(request_data)\n
            \ \t$evm.log(:info,  \"Adding Public DNS Record #{json_data} to CloudFlare
            Service ...\")\n  \tresponse = cfdns.add_cloudflare_record(json_data)\n\n
            \ \tresult = response['success']\n\n  \tif result\n      \t$evm.log(:info,
            \"Added DNS Public record successfully to CloudFlare DNS Service for instance
            [#{vm.name}]\")\n  \telse\n   \t\t$evm.log(:info, \"Could not add Public
            DNS record successfully to CloudFlare DNS Service for instance [#{vm.name}]\")\n
            \ \tend\n  end\n  \n  # Check Private IP address second ...\n  unless
            private_ip_address.nil?\n   # Let's create the public DNS record ...\n
            \  # Create the Add DNS Record request.\n   # Add a DNS Record to CloudFlare
            Data we will be adding\n\n    request_data = {}\n  \trequest_data[:type]
            = \"A\"\n  \trequest_data[:name] = dns_name + \"-int.\" + dns_domain\n
            \   request_data[:content] = private_ip_address\n  \trequest_data[:ttl]
            = \"120\"\n  \n  \tjson_data = JSON.generate(request_data)\n    $evm.log(:info,
            \ \"Adding Private DNS Record #{json_data} to CloudFlare Service ...\")\n
            \ \tresponse = cfdns.add_cloudflare_record(json_data)\n\n  \tresult =
            response['success']\n\n  \tif result\n      $evm.log(:info, \"Added DNS
            Private record successfully to CloudFlare DNS Service for instance [#{vm.name}]\")\n
            \ \telse\n      $evm.log(:info, \"Could not add Private DNS record successfully
            to CloudFlare DNS Service for instance [#{vm.name}]\")\n  \tend\n  end\n
            \ \n  \n  \n  \n  \n  exit MIQ_OK\n    \nrescue => ex\n    $evm.log(:info,
            \"EXCEPTION #{ex.message}\")\n    exit MIQ_ABORT\nend\n"
          register_openstack_vm.yaml:
            object_type: method
            version: 1.0
            object:
              attributes:
                name: register_openstack_vm
                display_name: 
                description: 
                scope: instance
                language: ruby
                location: inline
              inputs: []
    OpenStack:
      __namespace__.yaml:
        object_type: namespace
        version: 1.0
        object:
          attributes:
            name: OpenStack
            description: OpenStack Integrations
            display_name: 
            system: 
            priority: 
            enabled: 
      Neutron:
        __namespace__.yaml:
          object_type: namespace
          version: 1.0
          object:
            attributes:
              name: Neutron
              description: 
              display_name: 
              system: 
              priority: 
              enabled: 
        FloatingIPAttach.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: 
                display_name: 
                name: FloatingIPAttach
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: attribute
                  name: vm_id
                  display_name: 
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_userid
                  display_name: 
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_password
                  display_name: 
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_url
                  display_name: 
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_tenant
                  display_name: 
                  datatype: string
                  priority: 5
                  owner: 
                  default_value: admin
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: floating_ip_pool_name
                  display_name: 
                  datatype: string
                  priority: 6
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: retries
                  display_name: 
                  datatype: integer
                  priority: 7
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: sleep
                  display_name: 
                  datatype: integer
                  priority: 8
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: InitializeAttributesForThisInstance
                  display_name: 
                  datatype: string
                  priority: 9
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Initializing
                    for Floating IPAttach'') '
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: AttachFloatingIP
                  display_name: 
                  datatype: string
                  priority: 10
                  owner: 
                  default_value: AttachFloatingIP
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Attaching
                    a Floating IP'') '
                  on_exit: 
                  on_error: ! 'update_serviceprovision_status(status => $evm.object[''ae_reason'']) '
                  max_retries: 
                  max_time: 
          CatalogItemInvocation.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: CatalogItemInvocation
                inherits: 
                description: 
              fields:
              - InitializeAttributesForThisInstance:
                  value: CatalogItemInitialization
          GenericInvocation.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: GenericInvocation
                inherits: 
                description: 
              fields:
              - InitializeAttributesForThisInstance:
                  value: GenericInitialization
          VmButtonInvocation.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: VmButtonInvocation
                inherits: 
                description: 
              fields:
              - InitializeAttributesForThisInstance:
                  value: VmButtonInitialization
          __methods__:
            AttachFloatingIP.rb: ! "#\n# Description: This method is used to Assign
              a Public IP to an OpenStack Instance\n#\n\n###### TRACERS ######\n#
              Method for logging\ndef log(level, message)\n  $evm.log(level, \"#{message}\")\nend\n\ndef
              info(message)\n  log(:info, message)\nend\n\ndef error(message)\n  log(:error,
              message)\nend\n\ndef dump_root\n  log(:info, \"Root:<$evm.root> Attributes
              - Begin\")\n  $evm.root.attributes.sort.each { |k, v| log(:info, \"
              \ Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root> Attributes
              - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n  log(:info,
              \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
              { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info,
              \"CUSTOM  End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
              TRACERS ######\n\ninfo(\"Automate Method Started\")\n\nrequire 'fog'\n\n\ndef
              has_public_ip(fog_vm)\n  # assumes only one network interface.\n  addresses
              = fog_vm.addresses.values[0]\n  floating_ips = addresses.select { |address|
              address['OS-EXT-TYPE:type']=='floating' }\n  if floating_ips.length
              > 0\n    return true\n  end\n  return false\nend\n\nbegin\n\n  require
              'fog'\n  \n  # get what we need from the EVM object attributes.\n  vm_id
              = $evm.object[\"vm_id\"]\n  floating_ip_pool_name = $evm.object[\"floating_ip_pool_name\"]\n
              \ \n  # VM attributes\n  vm = $evm.vmdb(:vm).find(vm_id)\n  \n  # Set
              up Fog connection to Openstack.\n  os_user_id = $evm.object[\"os_authentication_userid\"]\n
              \ os_password = $evm.object[\"os_authentication_password\"]\n  os_auth_url
              = $evm.object[\"os_authentication_url\"]\n  os_tenant = $evm.object[\"os_tenant\"]\n
              \ info(\"Fog openstack_username: #{ os_user_id }, openstack_api_key:
              #{ os_password }, openstack_auth_url: #{ os_auth_url }, openstack_tenant:
              #{ os_tenant }\")\n  \n  fog_conn = Fog::Compute.new({:provider => 'openstack',\n
              \                             :openstack_username => os_user_id,\n                              :openstack_api_key
              => os_password,\n                              :openstack_auth_url =>
              os_auth_url,\n                              :openstack_tenant => os_tenant})\n\n
              \ # Get the VM in Fog and attach the Floating IP.\n  fog_vm = fog_conn.servers.select
              { |s| s.id == vm.uid_ems }.first\n\n  if has_public_ip(fog_vm)\n    info(\"VM
              already has a public IP!\")\n    exit MIQ_ABORT\n  end\n\n  # Get an
              unattached floating IP or create one if all are attached.\n  info(\"Check
              for unassigned floating IP in pool '#{ floating_ip_pool_name }'.\")\n
              \ fog_floating_ip = fog_conn.addresses.select { |a| a.instance_id==nil
              && a.pool==floating_ip_pool_name}.first\n  if fog_floating_ip == nil\n
              \   info(\"No unassigned floating IPs in pool '#{ floating_ip_pool_name
              }'. Getting a new floating IP to assign\")\n    # exception handling
              req here if not able to allocate address.\n    begin\n      response
              = fog_conn.allocate_address(floating_ip_pool_name)\n      fog_floating_ip
              = fog_conn.addresses.get(response.body['floating_ip']['id'])\n    rescue\n
              \     msg = \"Could not assign a new floating IP. Has the IP pool range
              been exhausted?\"\n      error(msg)\n      $evm.root['ae_result'] =
              'error'\n      $evm.root['ae_reason'] = msg\n      exit MIQ_OK\n    end\n
              \ end\n\n  info(\"Associating public IP with instance.\")\n  fog_vm.associate_address(fog_floating_ip.ip)\n\n
              \ # After association, refresh VMDB's info on the VM\n  vm.refresh\n
              \ info(\"Public IP association done.\")\n\n  info(\"Automate Method
              Ended\")\n\n  exit MIQ_OK\nend\n"
            AttachFloatingIP.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: AttachFloatingIP
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            GenericInitialization.rb: ! '######

              #

              # In Generic Initialization, we don''t assume that we have what we need
              in the current

              # context, so we just fetch from $evm.root

              #

              ######


              # We look into $evm.root[ROOT_EVM_KEY_VM_ID] when we don''t have a vm_id
              value in the state machine.

              ROOT_EVM_KEY_VM_ID = "/Integration/OpenStack/Neutron/FloatingIPAttach/vm_id"


              # We look into $evm.root[ROOT_EVM_KEY_FLOATING_IP] when we don''t have
              a floating_ip_pool_name value in the state machine.

              ROOT_EVM_KEY_FLOATING_POOL_NAME = "/Integration/OpenStack/Neutron/FloatingIPAttach/floating_pool_name"


              # Get the VM ID from global context.

              vm_id = $evm.root[ROOT_EVM_KEY_VM_ID]

              floating_ip_pool_name = $evm.root[ROOT_EVM_KEY_FLOATING_POOL_NAME]


              # Pull the VM and it''s EMS from the VMDB.

              vm = $evm.vmdb(:vm).find(vm_id)

              ems = vm.ext_management_system


              # Populate the instance attributes for the next step.

              $evm.object["vm_id"] = vm_id

              $evm.object["floating_ip_pool_name"] = floating_ip_pool_name

              $evm.object["os_authentication_userid"] = ems.authentication_userid

              $evm.object["os_authentication_password"] = ems.authentication_password

              $evm.object["os_authentication_url"] = "http://#{ ems.hostname }:#{
              ems.port }/v2.0/tokens"

'
            GenericInitialization.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: GenericInitialization
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            VmButtonInitialization.rb: ! "###### TRACERS ######  \n# Method for logging
              \ \ndef log(level, message)  \n  $evm.log(level, \"#{message}\")  \nend
              \ \n  \ndef debug(message)  \n  log(:debug, message)  \nend  \n  \ndef
              info(message)  \n  log(:info, message)  \nend  \n  \ndef error(message)
              \ \n  log(:error, message)  \nend  \n  \ndef dump_attributes(object)
              \ \n  log(:info, \"Begin Attributes [object.attributes]\")  \n  object.attributes.sort.each
              { |k, v| log(:info, \"Attribute    #{k} = #{v.inspect}\") }  \n  log(:info,
              \"End Attributes [object.attributes]\")  \n  log(:info, \"\")  \nend\n\ndef
              dump_root  \n  log(:info, \"Root:<$evm.root> Attributes - Begin\")  \n
              \ $evm.root.attributes.sort.each { |k, v| log(:info, \"  Attribute -
              #{k}: #{v}\") }  \n  log(:info, \"Root:<$evm.root> Attributes - End\")
              \ \n  log(:info, \"\")  \nend  \n\n###### TRACERS ######\n\nbegin  \n
              \ \n  info(\"Automate method started.\")\n\n  # We look into $evm.root[ROOT_EVM_KEY_FLOATING_IP]
              when we don't have a floating_ip_pool_name value in the state machine.\n
              \ ROOT_EVM_KEY_FLOATING_POOL_NAME = \"/Integration/OpenStack/Neutron/FloatingIPAttach/floating_pool_name\"\n
              \ \n  # get the VM and EMS from the current context.\n  vm = $evm.root['vm']\n
              \ ems = vm.ext_management_system\n  info(\"VM name: #{ vm.name }\")\n
              \ info(\"EMS name: #{ ems.name }\")\n  \n  # fill in the instance attributes.\n
              \ $evm.object[\"vm_id\"] = vm.id\n  $evm.object[\"os_authentication_userid\"]
              = ems.authentication_userid\n  $evm.object[\"os_authentication_password\"]
              = ems.authentication_password\n  $evm.object[\"os_authentication_url\"]
              = \"http://#{ ems.hostname }:#{ ems.port }/v2.0/tokens\"\n\n  # get
              floating IP in order of priority (dialog, state-machine, env)\n  floating_ip
              = nil\n  if $evm.root.attributes.has_key? ROOT_EVM_KEY_FLOATING_POOL_NAME\n
              \   floating_ip_pool_name = $evm.root[ROOT_EVM_KEY_FLOATING_POOL_NAME]\n
              \ end\n  if $evm.object['floating_ip_pool_name'] != nil and $evm.object['floating_ip_pool_name'].strip.length
              > 0\n    floating_ip_pool_name = $evm.object['floating_ip_pool_name']\n
              \ end\n  if $evm.root.attributes.has_key? 'dialog_floating_ip_pool_id'\n
              \   pool_id = $evm.root['dialog_floating_ip_pool_id']\n    floating_ip_pool_name
              = $evm.vmdb(:CloudNetwork).find(pool_id).name\n  end\n  info(\"Floating
              IP Pool Name: #{ floating_ip_pool_name }\")\n  $evm.object['floating_ip_pool_name']
              = floating_ip_pool_name\n  \n  # show the values in the log.\n  info(\"Initialized
              the following instance attributes:\")\n  info(\"\tvm_id: #{ $evm.object[\"vm_id\"]
              }\")\n  info(\"\tfloating_ip_pool_name: #{ $evm.object[\"floating_ip_pool_name\"]
              }\")\n  info(\"\tos_authentication_userid: #{ $evm.object[\"os_authentication_userid\"]
              }\")\n  info(\"\tos_authentication_password: #{ $evm.object[\"os_authentication_password\"]
              }\")\n  info(\"\tos_authentication_url: #{ $evm.object[\"os_authentication_url\"]
              }\")\n\n  info(\"Automate method ended.\")\n  \n  exit MIQ_OK\nend\n"
            VmButtonInitialization.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: VmButtonInitialization
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
        FloatingIPDetach.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: 
                display_name: 
                name: FloatingIPDetach
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: attribute
                  name: vm_id
                  display_name: 
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_userid
                  display_name: 
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_password
                  display_name: 
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_url
                  display_name: 
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_tenant
                  display_name: 
                  datatype: string
                  priority: 5
                  owner: 
                  default_value: admin
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: retries
                  display_name: 
                  datatype: integer
                  priority: 6
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: sleep
                  display_name: 
                  datatype: integer
                  priority: 7
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: InitializeAttributesForThisInstance
                  display_name: 
                  datatype: string
                  priority: 8
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Initializing
                    for Floating IP Detach'') '
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: DetachFloatingIP
                  display_name: 
                  datatype: string
                  priority: 9
                  owner: 
                  default_value: DetachFloatingIP
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Floating
                    IP Detach'') '
                  on_exit: 
                  on_error: ! 'update_serviceprovision_status(status => $evm.object[''ae_reason'']) '
                  max_retries: 
                  max_time: 
          GenericInvocation.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: GenericInvocation
                inherits: 
                description: 
              fields: []
          VmButtonInvocation.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: VmButtonInvocation
                inherits: 
                description: 
              fields:
              - InitializeAttributesForThisInstance:
                  value: VmButtonInitialization
          __methods__:
            DetachFloatingIP.rb: ! "#\n# Description: This method is used to Detach
              a Floating IP from an OpenStack Instance\n#\n\n###### TRACERS ######\n#
              Method for logging\ndef log(level, message)\n  $evm.log(level, \"#{message}\")\nend\n\ndef
              info(message)\n  log(:info, message)\nend\n\ndef error(message)\n  log(:error,
              message)\nend\n\ndef dump_root\n  log(:info, \"Root:<$evm.root> Attributes
              - Begin\")\n  $evm.root.attributes.sort.each { |k, v| log(:info, \"
              \ Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root> Attributes
              - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n  log(:info,
              \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
              { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info,
              \"CUSTOM  End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
              TRACERS ######\n\ninfo(\"Automate Method Started\")\n\nrequire 'fog'\n\n\ndef
              has_public_ip(fog_vm)\n  # assumes only one network interface.\n  addresses
              = fog_vm.addresses.values[0]\n  floating_ips = addresses.select { |address|
              address['OS-EXT-TYPE:type']=='floating' }\n  if floating_ips.length
              > 0\n    return true\n  end\n  return false\nend\n\nbegin\n\n  require
              'fog'\n  \n  # get what we need from the EVM object attributes.\n  vm_id
              = $evm.object[\"vm_id\"]\n  \n  # VM attributes\n  vm = $evm.vmdb(:vm).find(vm_id)\n
              \ \n  # Set up Fog connection to Openstack.\n  os_user_id = $evm.object[\"os_authentication_userid\"]\n
              \ os_password = $evm.object[\"os_authentication_password\"]\n  os_auth_url
              = $evm.object[\"os_authentication_url\"]\n  os_tenant = $evm.object[\"os_tenant\"]\n
              \ info(\"Fog openstack_username: #{ os_user_id }, openstack_api_key:
              #{ os_password }, openstack_auth_url: #{ os_auth_url }, openstack_tenant:
              #{ os_tenant }\")\n  \n  fog_conn = Fog::Compute.new({:provider => 'openstack',\n
              \                             :openstack_username => os_user_id,\n                              :openstack_api_key
              => os_password,\n                              :openstack_auth_url =>
              os_auth_url,\n                              :openstack_tenant => os_tenant})\n\n
              \ # Get the VM in Fog and attach the Floating IP.\n  fog_vm = fog_conn.servers.select
              { |s| s.id == vm.uid_ems }.first\n\n  if fog_vm.floating_ip_addresses.empty?\n
              \   info(\"VM doesn't have a public IP!\")\n    exit MIQ_ABORT\n  end\n\n
              \ info(\"Detaching public IP from instance.\")\n  fog_vm.disassociate_address(fog_vm.floating_ip_address)\n\n
              \ # After association, refresh VMDB's info on the VM\n  vm.refresh\n
              \ info(\"Public IP disassociation done.\")\n\n  info(\"Automate Method
              Ended\")\n\n  exit MIQ_OK\nend\n"
            DetachFloatingIP.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: DetachFloatingIP
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            GenericInitialization.rb: ! '######

              #

              # In Generic Initialization, we don''t assume that we have what we need
              in the current

              # context, so we just fetch from $evm.root

              #

              ######


              # We look into $evm.root[ROOT_EVM_KEY_VM_ID] when we don''t have a vm_id
              value in the state machine.

              ROOT_EVM_KEY_VM_ID = "/Integration/OpenStack/Neutron/FloatingIPAttach/vm_id"


              # We look into $evm.root[ROOT_EVM_KEY_FLOATING_IP] when we don''t have
              a floating_ip_pool_name value in the state machine.

              ROOT_EVM_KEY_FLOATING_POOL_NAME = "/Integration/OpenStack/Neutron/FloatingIPAttach/floating_pool_name"


              # Get the VM ID from global context.

              vm_id = $evm.root[ROOT_EVM_KEY_VM_ID]

              floating_ip_pool_name = $evm.root[ROOT_EVM_KEY_FLOATING_POOL_NAME]


              # Pull the VM and it''s EMS from the VMDB.

              vm = $evm.vmdb(:vm).find(vm_id)

              ems = vm.ext_management_system


              # Populate the instance attributes for the next step.

              $evm.object["vm_id"] = vm_id

              $evm.object["floating_ip_pool_name"] = floating_ip_pool_name

              $evm.object["os_authentication_userid"] = ems.authentication_userid

              $evm.object["os_authentication_password"] = ems.authentication_password

              $evm.object["os_authentication_url"] = "http://#{ ems.hostname }:#{
              ems.port }/v2.0/tokens"

'
            GenericInitialization.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: GenericInitialization
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            VmButtonInitialization.rb: ! "###### TRACERS ######  \n# Method for logging
              \ \ndef log(level, message)  \n  $evm.log(level, \"#{message}\")  \nend
              \ \n  \ndef debug(message)  \n  log(:debug, message)  \nend  \n  \ndef
              info(message)  \n  log(:info, message)  \nend  \n  \ndef error(message)
              \ \n  log(:error, message)  \nend  \n  \ndef dump_attributes(object)
              \ \n  log(:info, \"Begin Attributes [object.attributes]\")  \n  object.attributes.sort.each
              { |k, v| log(:info, \"Attribute    #{k} = #{v.inspect}\") }  \n  log(:info,
              \"End Attributes [object.attributes]\")  \n  log(:info, \"\")  \nend\n\ndef
              dump_root  \n  log(:info, \"Root:<$evm.root> Attributes - Begin\")  \n
              \ $evm.root.attributes.sort.each { |k, v| log(:info, \"  Attribute -
              #{k}: #{v}\") }  \n  log(:info, \"Root:<$evm.root> Attributes - End\")
              \ \n  log(:info, \"\")  \nend  \n\n###### TRACERS ######\n\nbegin  \n
              \ \n  info(\"Automate method started.\")\n  \n  # get the VM and EMS
              from the current context.\n  vm = $evm.root['vm']\n  ems = vm.ext_management_system\n
              \ info(\"VM name: #{ vm.name }\")\n  info(\"EMS name: #{ ems.name }\")\n
              \ \n  # fill in the instance attributes.\n  $evm.object[\"vm_id\"] =
              vm.id\n  $evm.object[\"os_authentication_userid\"] = ems.authentication_userid\n
              \ $evm.object[\"os_authentication_password\"] = ems.authentication_password\n
              \ $evm.object[\"os_authentication_url\"] = \"http://#{ ems.hostname
              }:#{ ems.port }/v2.0/tokens\"\n\n  # show the values in the log.\n  info(\"Initialized
              the following instance attributes:\")\n  info(\"\tvm_id: #{ $evm.object[\"vm_id\"]
              }\")\n  info(\"\tcinder_volume_id: #{ $evm.object[\"cinder_volume_id\"]
              }\")\n  info(\"\tos_authentication_userid: #{ $evm.object[\"os_authentication_userid\"]
              }\")\n  info(\"\tos_authentication_password: #{ $evm.object[\"os_authentication_password\"]
              }\")\n  info(\"\tos_authentication_url: #{ $evm.object[\"os_authentication_url\"]
              }\")\n\n  info(\"Automate method ended.\")\n  \n  exit MIQ_OK\n  \nend\n"
            VmButtonInitialization.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: VmButtonInitialization
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
      Cinder:
        __namespace__.yaml:
          object_type: namespace
          version: 1.0
          object:
            attributes:
              name: Cinder
              description: Cinder Volume Integrations
              display_name: 
              system: 
              priority: 
              enabled: 
        VolumeAttach.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: Attach a Cinder Volume
                display_name: Volume Attach
                name: VolumeAttach
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: attribute
                  name: vm_id
                  display_name: 
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: VMDB Id for the VM from which to detach the volume
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: cinder_volume_id
                  display_name: 
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Reference Id in OpenStack for the Volume to Delete
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_userid
                  display_name: 
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: User Id to authenticate to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_password
                  display_name: 
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Password to authenticate to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_url
                  display_name: 
                  datatype: string
                  priority: 5
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Keystone URL to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_tenant
                  display_name: 
                  datatype: string
                  priority: 6
                  owner: 
                  default_value: admin
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Tenant in which the cinder volume belongs to
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: retries
                  display_name: 
                  datatype: integer
                  priority: 7
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Number of times to retry failed requests to OpenStack
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: sleep
                  display_name: 
                  datatype: integer
                  priority: 8
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Number of seconds to wait before retrying a failed
                    request to OpenStack
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: InitializeAttributesForThisInstance
                  display_name: 
                  datatype: string
                  priority: 9
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Context-specific method to initialize attributes
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Initializing
                    for Volume Attach'') '
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: AttachVolume
                  display_name: 
                  datatype: string
                  priority: 10
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Method to attach volume, if required
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Attaching
                    Volume'') '
                  on_exit: ! 'update_serviceprovision_status(status => ''Volume Attached'') '
                  on_error: 
                  max_retries: 
                  max_time: 
          VmButtonInvocation.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: VM Button Invocation
                name: VmButtonInvocation
                inherits: 
                description: 
              fields:
              - InitializeAttributesForThisInstance:
                  value: VmButtonInitialization
              - AttachVolume:
                  value: AttachVolume
          __methods__:
            AttachVolume.rb: ! "###################################\n#\n# CloudForms
              Automate Method: CreateVolume\n#\n# This method is used to create an
              OpenStack Cinder Volume\n#\n###################################\n\n######
              TRACERS ######\n# Method for logging\ndef log(level, message)\n  $evm.log(level,
              \"#{message}\")\nend\n\ndef info(message)\n  log(:info, message)\nend\n\ndef
              error(message)\n  log(:error, message)\nend\n\ndef debug(message)\n
              \ log(:debug, message)\nend\n\ndef dump_root\n  log(:info, \"Root:<$evm.root>
              Attributes - Begin\")\n  $evm.root.attributes.sort.each { |k, v| log(:info,
              \"  Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root> Attributes
              - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n  log(:info,
              \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
              { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info,
              \"CUSTOM  End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
              TRACERS ######\n\ndef create_new_vol_attachment_path(fog_vm)\n  # assumes
              each VM will have no more than 25 volume attachments.\n  possible_suffixes
              = ('b'..'z').to_set\n  reserved_letters = fog_vm.volume_attachments.collect
              { |a| a['device'][-1] }\n  usable_suffixes = possible_suffixes - reserved_letters\n
              \ return '/dev/vd' + usable_suffixes.first\nend\n\nbegin\n  \n  info(\"Automate
              method started.\")\n  \n  dump_root\n  \n  require 'fog'\n  \n  # cinder
              volume and VM attributes\n  vm_id = $evm.object[\"vm_id\"]\n  cinder_volume_id
              = $evm.object[\"cinder_volume_id\"]\n  if cinder_volume_id.nil?\n    cinder_volume_id
              = $evm.root[\"yalenus_cinder_volume_id\"]\n  end\n\n  \n  # Set up Fog
              connection to Openstack.\n  os_user_id = $evm.object[\"os_authentication_userid\"]\n
              \ os_password = $evm.object[\"os_authentication_password\"]\n  os_auth_url
              = $evm.object[\"os_authentication_url\"]\n  os_tenant = $evm.object[\"os_tenant\"]\n
              \ info(\"Fog openstack_username: #{ os_user_id }, openstack_api_key:
              #{ os_password }, openstack_auth_url: #{ os_auth_url }, openstack_tenant:
              #{ os_tenant }\")\n  \n  fog_conn = Fog::Compute.new({:provider => 'openstack',\n
              \                             :openstack_username => os_user_id,\n                              :openstack_api_key
              => os_password,\n                              :openstack_auth_url =>
              os_auth_url,\n                              :openstack_tenant => os_tenant})\n
              \ \n  info(\"Fetching VM for association\")\n  vm = $evm.vmdb(:vm).find(vm_id)\n
              \ fog_vm = fog_conn.servers.select { |s| s.id == vm.uid_ems }.first\n
              \ info(\"VM fetched\")\n\n  info(\"Fetching volume #{ cinder_volume_id
              }\")\n  vol = fog_conn.volumes.select { |v| v.id == cinder_volume_id
              }.first\n  info(\"Volume #{ vol.name } fetched. Checking if status is
              available.\")\n  \n  # Ensure that the Volume is ready for attachment.\n
              \ retries = 0\n  until vol.status == 'available' or retries >= $evm.object['retries']
              do\n    info(\"Volume status is not 'available'\")\n    sleep $evm.object['sleep']\n
              \   retries += 1\n    vol.reload\n    info(\"Retry #{ retries } of #{
              $evm.object['retries'] }. Volume not yet available for attachment (#{
              vol.status }). Sleeping...\")\n  end\n\n  unless vol.status == 'available'\n
              \   error(\"Timeout while waiting for volume #{vol_id} to be available
              for attachment. Volume Status: #{ vol.status }\")\n    exit MIQ_ABORT\n
              \ end\n\n  # Attach to the VM.\n  dev_path = create_new_vol_attachment_path(fog_vm)\n
              \ info(\"Attaching to VM now on #{ dev_path }\")\n  response = fog_conn.attach_volume(vol.id,
              vm.ems_ref, dev_path)\n\n  unless [200, 202].include? response.status\n
              \   error(\"Volume did not attach successfully.\")\n    exit MIQ_ABORT\n
              \ end\n\n  # Ensure that the Volume has attached\n  retries = 0\n  until
              vol.status == 'in-use' or retries >= $evm.object['retries'] do\n    info(\"Volume
              status is not 'in-use'\")\n    sleep $evm.object['sleep']\n    retries
              += 1\n    vol.reload\n    info(\"Retry #{ retries } of #{ $evm.object['retries']
              }. Volume not yet in use for instance (#{ vol.status }). Sleeping...\")\n
              \ end\n\n  unless vol.status == 'in-use'\n    error(\"Timeout while
              waiting for volume #{vol_id} to be successfully attached. Volume Status:
              #{ vol.status }\")\n    exit MIQ_ABORT\n  end\n\n  info(\"Attached successfully\")\n\n
              \ exit MIQ_OK\nend\n"
            AttachVolume.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: AttachVolume
                  display_name: Attach Volume
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            VmButtonInitialization.rb: ! "###################################  \n#
              \ \n# CloudForms Automate Method: VmButtonInitialization  \n#  \n# This
              method is used to initialize the instance attributes for volume\n# deletion
              when called from a button on a VM.\n#\n# Dialog fields expected:\n#
              \  1. vm_id\n#   2. cinder_volume_id\n#\n###################################
              \ \n  \n###### TRACERS ######  \n# Method for logging  \ndef log(level,
              message)  \n  $evm.log(level, \"#{message}\")  \nend  \n  \ndef debug(message)
              \ \n  log(:debug, message)  \nend  \n  \ndef info(message)  \n  log(:info,
              message)  \nend  \n  \ndef error(message)  \n  log(:error, message)
              \ \nend  \n  \ndef dump_attributes(object)  \n  log(:info, \"Begin Attributes
              [object.attributes]\")  \n  object.attributes.sort.each { |k, v| log(:info,
              \"Attribute    #{k} = #{v.inspect}\") }  \n  log(:info, \"End Attributes
              [object.attributes]\")  \n  log(:info, \"\")  \nend\n\ndef dump_root
              \ \n  log(:info, \"Root:<$evm.root> Attributes - Begin\")  \n  $evm.root.attributes.sort.each
              { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }  \n  log(:info,
              \"Root:<$evm.root> Attributes - End\")  \n  log(:info, \"\")  \nend
              \ \n\n###### TRACERS ######  \n  \nbegin  \n  \n  info(\"Automate method
              started.\")\n  \n  dump_root\n  \n  # get the VM and EMS from the current
              context.\n  vm = $evm.root['vm']\n  ems = vm.ext_management_system\n
              \ info(\"VM name: #{ vm.name }\")\n  info(\"EMS name: #{ ems.name }\")\n
              \ \n  # fill in the instance attributes.\n  $evm.object[\"vm_id\"] =
              vm.id\n  $evm.object[\"cinder_volume_id\"] = $evm.root[\"dialog_cinder_volume_id\"]\n
              \ $evm.object[\"os_authentication_userid\"] = ems.authentication_userid\n
              \ $evm.object[\"os_authentication_password\"] = ems.authentication_password\n
              \ $evm.object[\"os_authentication_url\"] = \"http://#{ ems.hostname
              }:#{ ems.port }/v2.0/tokens\"\n\n  # show the values in the log.\n  info(\"Initialized
              the following instance attributes:\")\n  info(\"\tvm_id: #{ $evm.object[\"vm_id\"]
              }\")\n  info(\"\tcinder_volume_id: #{ $evm.object[\"cinder_volume_id\"]
              }\")\n  info(\"\tos_authentication_userid: #{ $evm.object[\"os_authentication_userid\"]
              }\")\n  info(\"\tos_authentication_password: #{ $evm.object[\"os_authentication_password\"]
              }\")\n  info(\"\tos_authentication_url: #{ $evm.object[\"os_authentication_url\"]
              }\")\n\n  info(\"Automate method ended.\")\n  \n  exit MIQ_OK\n  \nend\n"
            VmButtonInitialization.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: VmButtonInitialization
                  display_name: VM Button Initialization
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
        VolumeCreate.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: Create a Cinder Volume
                display_name: Volume Create
                name: VolumeCreate
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: attribute
                  name: vm_id
                  display_name: 
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: VMDB Id for the VM from which to detach the volume
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: cinder_volume_id
                  display_name: 
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Reference Id in OpenStack for the Volume to Delete
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: cinder_volume_az
                  display_name: 
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: nova
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Availability Zone where the Cinder Volume will reside
                    in
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: cinder_volume_name
                  display_name: 
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: cinder_volume_description
                  display_name: 
                  datatype: string
                  priority: 5
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: cinder_volume_size
                  display_name: 
                  datatype: string
                  priority: 6
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_userid
                  display_name: 
                  datatype: string
                  priority: 7
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: User Id to authenticate to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_password
                  display_name: 
                  datatype: string
                  priority: 8
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Password to authenticate to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_url
                  display_name: 
                  datatype: string
                  priority: 9
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Keystone URL to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_tenant
                  display_name: 
                  datatype: string
                  priority: 10
                  owner: 
                  default_value: admin
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Tenant in which the cinder volume belongs to
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: retries
                  display_name: 
                  datatype: integer
                  priority: 11
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Number of times to retry failed requests to OpenStack
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: sleep
                  display_name: 
                  datatype: integer
                  priority: 12
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Number of seconds to wait before retrying a failed
                    request to OpenStack
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: InitializeAttributesForThisInstance
                  display_name: 
                  datatype: string
                  priority: 13
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Context-specific method to initialize attributes
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Initializing
                    for Volume Create'') '
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: CreateVolume
                  display_name: 
                  datatype: string
                  priority: 14
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Method to create the volume
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Creating
                    Volume'') '
                  on_exit: ! 'update_serviceprovision_status(status => ''Volume Created'') '
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: relationship
                  name: AttachVolume
                  display_name: 
                  datatype: string
                  priority: 15
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Relationship to attach volume, if required
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Post-creation
                    activity'') '
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
          CatalogItemInvocation.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: Catalog Item Invocation
                name: CatalogItemInvocation
                inherits: 
                description: Select this instance when invoking VolumeCreate from
                  a Service Catalog
              fields:
              - InitializeAttributesForThisInstance:
                  value: CatalogItemInitialization
              - CreateVolume:
                  value: CreateVolume
          VmButtonInvocation.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: VM Button Invocation
                name: VmButtonInvocation
                inherits: 
                description: Select this instance when invoking VolumeCreate from
                  a Service Catalog
              fields:
              - InitializeAttributesForThisInstance:
                  value: VmButtonInitialization
              - CreateVolume:
                  value: CreateVolume
              - AttachVolume:
                  value: /Integration/OpenStack/Cinder/VolumeAttach/VmButtonInvocation#create
          __methods__:
            CatalogItemInitialization.rb: ! "###################################  \n#
              \ \n# CloudForms Automate Method: CatalogItemInitialization  \n#  \n#
              This method is used to initialize the instance attributes for volume\n#
              deletion when called from the Catalog Item context.\n#\n# Dialog fields
              expected:\n#   1. cinder_volume_id - OpenStack Cinder Volume Id\n#\n#
              Dialog fields optional:\n#   1. ems_id - The ID for the ext_management_system
              that the volume belongs to.\n#               If ems_id is not supplied,
              then we take the first ems_id returned\n#               from VMDB.\n###################################
              \ \n  \n###### TRACERS ######  \n# Method for logging  \ndef log(level,
              message)  \n  $evm.log(level, \"#{message}\")  \nend  \n  \ndef debug(message)
              \ \n  log(:debug, message)  \nend  \n  \ndef info(message)  \n  log(:info,
              message)  \nend  \n  \ndef error(message)  \n  log(:error, message)
              \ \nend  \n  \ndef dump_root  \n  log(:info, \"Root:<$evm.root> Attributes
              - Begin\")  \n  $evm.root.attributes.sort.each { |k, v| log(:info, \"
              \ Attribute - #{k}: #{v}\") }  \n  log(:info, \"Root:<$evm.root> Attributes
              - End\")  \n  log(:info, \"\")  \nend  \n  \ndef dump_attributes(object)
              \ \n  log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")  \n
              \ object.attributes.sort.each { |k, v| log(:info, \"CUSTOM    #{k} =
              #{v.inspect}\") }  \n  log(:info, \"CUSTOM  End Attributes [object.attributes]\")
              \ \n  log(:info, \"\")  \nend  \n###### TRACERS ######  \n  \nbegin
              \ \n  \n  info(\"Automate method started.\")  \n    \n  # if the dialog
              doesn't specify an EMS id, then we assume the first OpenStack EMS.\n
              \ if $evm.object.attributes.key? 'dialog_ems_id'\n    ems = $evm.vmdb(:ems_openstack).find($evm.object['dialog_ems_id'])\n
              \ else\n    ems = $evm.vmdb(:ems_openstack).first\n  end\n  \n  # fill
              in the instance attributes.\n  $evm.object[\"cinder_volume_name\"] =
              $evm.root[\"dialog_cinder_volume_name\"]\n  $evm.object[\"cinder_volume_description\"]
              = $evm.root[\"dialog_cinder_volume_description\"]\n  $evm.object[\"cinder_volume_size\"]
              = $evm.root[\"dialog_cinder_volume_size\"]\n  $evm.object[\"os_authentication_userid\"]
              = ems.authentication_userid\n  $evm.object[\"os_authentication_password\"]
              = ems.authentication_password\n  $evm.object[\"os_authentication_url\"]
              = \"http://#{ ems.hostname }:#{ ems.port }/v2.0/tokens\"\n\n  # show
              the values in the log.\n  info(\"Initialized the following instance
              attributes:\")\n  info(\"\tcinder_volume_az: #{ $evm.object[\"cinder_volume_az\"]
              }\")\n  info(\"\tcinder_volume_name: #{ $evm.object[\"cinder_volume_name\"]
              }\")\n  info(\"\tcinder_volume_description: #{ $evm.object[\"cinder_volume_description\"]
              }\")\n  info(\"\tcinder_volume_size: #{ $evm.object[\"cinder_volume_size\"]
              }\")\n  info(\"\tos_authentication_userid: #{ $evm.object[\"os_authentication_userid\"]
              }\")\n  info(\"\tos_authentication_password: #{ $evm.object[\"os_authentication_password\"]
              }\")\n  info(\"\tos_authentication_url: #{ $evm.object[\"os_authentication_url\"]
              }\")\n  exit MIQ_OK\n  \nend \n"
            CatalogItemInitialization.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: CatalogItemInitialization
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            CreateVolume.rb: ! "###################################\n#\n# CloudForms
              Automate Method: CreateVolume\n#\n# This method is used to create an
              OpenStack Cinder Volume\n#\n###################################\n\n######
              TRACERS ######\n# Method for logging\ndef log(level, message)\n  $evm.log(level,
              \"#{message}\")\nend\n\ndef info(message)\n  log(:info, message)\nend\n\ndef
              error(message)\n  log(:error, message)\nend\n\ndef debug(message)\n
              \ log(:debug, message)\nend\n\ndef dump_root\n  log(:info, \"Root:<$evm.root>
              Attributes - Begin\")\n  $evm.root.attributes.sort.each { |k, v| log(:info,
              \"  Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root> Attributes
              - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n  log(:info,
              \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
              { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info,
              \"CUSTOM  End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
              TRACERS ######\n\ndef clean_vol_name(given_name)\n  info(\"Create volume
              name from given name: #{given_name}\")\n  # this creates a Cinder name
              that follows the rules below\n  # max length is 32 chars, all lower
              case, no underscores or dashes except those as part of composition\n
              \ # pattern of userid-group name limited-name passed in\n  # regex used:
              /[\\W+]|[_]/  Strips all non word characters and underscores (underscore
              is part of /W)\n  # length of the group portion of the name is defined
              below\n  group_length_limit = 15\n  my_user = $evm.root['user']\n\n
              \ info(\"userid ===> #{my_user.userid}\")\n  info(\"group membership
              ===> #{my_user.miq_group.description}\")\n\n  cleaned_group = my_user.miq_group.description.downcase.gsub(/[\\W+]|[_]/,
              '').first(group_length_limit)\n\n  info(\"user group normalized (15
              chars) ===> #{cleaned_group}\")\n\n  # Get the name of the Volume name
              from the request and clean it\n  clean_name = given_name.downcase.gsub(/[\\W+]|[_]/,
              '')\n  $evm.log(\"info\", \"cleaned passed name ===> #{clean_name}\")\n\n
              \ cleaned_name = \"#{my_user.userid}-#{cleaned_group}-#{clean_name}\".first(255)\n
              \ info(\"Fully crafted name (255 char max): #{cleaned_name}\")\n  return
              cleaned_name\nend\n\nbegin\n  \n  info(\"Automate method started.\")\n
              \ \n  require 'fog'\n  \n  # cinder volume attributes\n  cinder_volume_name
              = clean_vol_name($evm.object[\"cinder_volume_name\"])\n  cinder_volume_description
              = $evm.object[\"cinder_volume_description\"]\n  cinder_volume_size =
              $evm.object[\"cinder_volume_size\"]\n  cinder_volume_az = $evm.object[\"cinder_volume_az\"]\n\n
              \ # Set up Fog connection to Openstack.\n  os_user_id = $evm.object[\"os_authentication_userid\"]\n
              \ os_password = $evm.object[\"os_authentication_password\"]\n  os_auth_url
              = $evm.object[\"os_authentication_url\"]\n  os_tenant = $evm.object[\"os_tenant\"]\n
              \ info(\"Fog openstack_username: #{ os_user_id }, openstack_api_key:
              #{ os_password }, openstack_auth_url: #{ os_auth_url }, openstack_tenant:
              #{ os_tenant }\")\n  \n  fog_conn = Fog::Compute.new({:provider => 'openstack',\n
              \                             :openstack_username => os_user_id,\n                              :openstack_api_key
              => os_password,\n                              :openstack_auth_url =>
              os_auth_url,\n                              :openstack_tenant => os_tenant})\n
              \ \n  # Create desired volume.\n  info(\"Creating new volume\")\n  response
              = fog_conn.create_volume(cinder_volume_name,\n                                    cinder_volume_description,\n
              \                                   cinder_volume_size,\n                                    {
              'availability_zone' => cinder_volume_az })\n  \n  unless [200, 202].include?
              response.status\n    exit MIQ_ABORT\n  end\n  \n  info(\"Volume Created\")\n
              \ \n  vol_id = response.body['volume']['id']\n  vol = fog_conn.volumes.select
              { |v| v.id == vol_id }.first\n  $evm.object[\"cinder_volume_id\"] =
              vol.id\n  $evm.root[\"yalenus_cinder_volume_id\"] = vol.id\n  \n  exit
              MIQ_OK\n  \nend\n"
            CreateVolume.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: CreateVolume
                  display_name: Create Volume
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            VmButtonInitialization.rb: ! "###################################  \n#
              \ \n# CloudForms Automate Method: VmButtonInitialization  \n#  \n# This
              method is used to initialize the instance attributes for volume\n# deletion
              when called from a button on a VM.\n#\n# Dialog fields expected:\n#
              \  1. cinder_volume_name - What to call the new volume\n#   2. cinder_volume_description\n#
              \  3. cinder_volume_size\n#\n###################################  \n
              \ \n###### TRACERS ######  \n# Method for logging  \ndef log(level,
              message)  \n  $evm.log(level, \"#{message}\")  \nend  \n  \ndef debug(message)
              \ \n  log(:debug, message)  \nend  \n  \ndef info(message)  \n  log(:info,
              message)  \nend  \n  \ndef error(message)  \n  log(:error, message)
              \ \nend  \n  \ndef dump_attributes(object)  \n  log(:info, \"Begin Attributes
              [object.attributes]\")  \n  object.attributes.sort.each { |k, v| log(:info,
              \"Attribute    #{k} = #{v.inspect}\") }  \n  log(:info, \"End Attributes
              [object.attributes]\")  \n  log(:info, \"\")  \nend\n\ndef dump_root
              \ \n  log(:info, \"Root:<$evm.root> Attributes - Begin\")  \n  $evm.root.attributes.sort.each
              { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }  \n  log(:info,
              \"Root:<$evm.root> Attributes - End\")  \n  log(:info, \"\")  \nend
              \ \n\n###### TRACERS ######  \n  \nbegin  \n  \n  info(\"Automate method
              started.\")\n  \n  # get the VM and EMS from the current context.\n
              \ vm = $evm.root['vm']\n  ems = vm.ext_management_system\n  info(\"VM
              name: #{ vm.name }\")\n  info(\"EMS name: #{ ems.name }\")\n  \n  #
              fill in the instance attributes.\n  $evm.object[\"vm_id\"] = vm.id\n
              \ $evm.object[\"cinder_volume_az\"] = vm.availability_zone.ems_ref\n
              \ $evm.object[\"cinder_volume_name\"] = $evm.root[\"dialog_cinder_volume_name\"]\n
              \ $evm.object[\"cinder_volume_description\"] = $evm.root[\"dialog_cinder_volume_description\"]\n
              \ $evm.object[\"cinder_volume_size\"] = $evm.root[\"dialog_cinder_volume_size\"]\n
              \ $evm.object[\"os_authentication_userid\"] = ems.authentication_userid\n
              \ $evm.object[\"os_authentication_password\"] = ems.authentication_password\n
              \ $evm.object[\"os_authentication_url\"] = \"http://#{ ems.hostname
              }:#{ ems.port }/v2.0/tokens\"\n\n  # show the values in the log.\n  info(\"Initialized
              the following instance attributes:\")\n  info(\"\tvm_id: #{ $evm.object[\"vm_id\"]
              }\")\n  info(\"\tcinder_volume_az: #{ $evm.object[\"cinder_volume_az\"]
              }\")\n  info(\"\tcinder_volume_name: #{ $evm.object[\"cinder_volume_name\"]
              }\")\n  info(\"\tcinder_volume_description: #{ $evm.object[\"cinder_volume_description\"]
              }\")\n  info(\"\tcinder_volume_size: #{ $evm.object[\"cinder_volume_size\"]
              }\")\n  info(\"\tos_authentication_userid: #{ $evm.object[\"os_authentication_userid\"]
              }\")\n  info(\"\tos_authentication_password: #{ $evm.object[\"os_authentication_password\"]
              }\")\n  info(\"\tos_authentication_url: #{ $evm.object[\"os_authentication_url\"]
              }\")\n\n  info(\"Automate method ended.\")\n  \n  exit MIQ_OK\n  \nend\n"
            VmButtonInitialization.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: VmButtonInitialization
                  display_name: VM Button Initialization
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
        VolumeDelete.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: Delete a Cinder Volume
                display_name: Volume Delete
                name: VolumeDelete
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: attribute
                  name: vm_id
                  display_name: 
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: VMDB Id for a VM in the context, if any
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: cinder_volume_id
                  display_name: 
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Reference Id in OpenStack for the Volume to Delete
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_userid
                  display_name: 
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: User Id to authenticate to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_password
                  display_name: 
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Password to authenticate to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_url
                  display_name: 
                  datatype: string
                  priority: 5
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Keystone URL to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_tenant
                  display_name: 
                  datatype: string
                  priority: 6
                  owner: 
                  default_value: admin
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Tenant in which the cinder volume belongs to
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: retries
                  display_name: 
                  datatype: integer
                  priority: 7
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Number of times to retry failed requests to OpenStack
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: sleep
                  display_name: 
                  datatype: integer
                  priority: 8
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Number of seconds to wait before retrying a failed
                    request to OpenStack
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: InitializeAttributesForThisInstance
                  display_name: 
                  datatype: string
                  priority: 9
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Context-specific method to initialize attributes
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Initializing
                    for Volume Delete'') '
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: state
                  name: DetachVolume
                  display_name: 
                  datatype: string
                  priority: 10
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Pointer to another StateMachine to detach the volume,
                    if required
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Detaching
                    Volume'') '
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: DeleteVolume
                  display_name: 
                  datatype: string
                  priority: 11
                  owner: 
                  default_value: DeleteVolume
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: ! 'update_serviceprovision_status(status => ''Deleting
                    Volume'') '
                  on_exit: ! 'update_serviceprovision_status(status => ''Volume Deleted'') '
                  on_error: 
                  max_retries: 
                  max_time: 
          CatalogItemInvocation.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: Catalog Item Invocation
                name: CatalogItemInvocation
                inherits: 
                description: Select this instance when invoking VolumeDelete from
                  a Service Catalog
              fields:
              - InitializeAttributesForThisInstance:
                  value: CatalogItemInitialization
          VmButtonInvocation.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: VM Button Invocation
                name: VmButtonInvocation
                inherits: 
                description: Select this instance when invoking VolumeDelete from
                  a Service Catalog
              fields:
              - InitializeAttributesForThisInstance:
                  value: VmButtonInitialization
                  on_entry: ! '#'
              - DetachVolume:
                  value: /Integration/OpenStack/Cinder/VolumeDetach/VmButtonInvocation
                  on_entry: ! '#'
              - DeleteVolume:
                  on_entry: ! '#'
                  on_exit: ! '#'
          __methods__:
            CatalogItemInitialization.rb: ! "###################################  \n#
              \ \n# CloudForms Automate Method: CatalogItemInitialization  \n#  \n#
              This method is used to initialize the instance attributes for volume\n#
              deletion when called from the Catalog Item context.\n#\n# Dialog fields
              expected:\n#   1. cinder_volume_id - OpenStack Cinder Volume Id\n#\n#
              Dialog fields optional:\n#   1. ems_id - The ID for the ext_management_system
              that the volume belongs to.\n#               If ems_id is not supplied,
              then we take the first ems_id returned\n#               from VMDB.\n###################################
              \ \n  \n###### TRACERS ######  \n# Method for logging  \ndef log(level,
              message)  \n  $evm.log(level, \"#{message}\")  \nend  \n  \ndef debug(message)
              \ \n  log(:debug, message)  \nend  \n  \ndef info(message)  \n  log(:info,
              message)  \nend  \n  \ndef error(message)  \n  log(:error, message)
              \ \nend  \n  \ndef dump_root  \n  log(:info, \"Root:<$evm.root> Attributes
              - Begin\")  \n  $evm.root.attributes.sort.each { |k, v| log(:info, \"
              \ Attribute - #{k}: #{v}\") }  \n  log(:info, \"Root:<$evm.root> Attributes
              - End\")  \n  log(:info, \"\")  \nend  \n  \ndef dump_attributes(object)
              \ \n  log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")  \n
              \ object.attributes.sort.each { |k, v| log(:info, \"CUSTOM    #{k} =
              #{v.inspect}\") }  \n  log(:info, \"CUSTOM  End Attributes [object.attributes]\")
              \ \n  log(:info, \"\")  \nend  \n###### TRACERS ######  \n  \nbegin
              \ \n  \n  info(\"Automate method started.\")  \n    \n  # if the dialog
              doesn't specify an EMS id, then we assume the first OpenStack EMS.\n
              \ if $evm.object.attributes.key? 'dialog_ems_id'\n    ems = $evm.vmdb(:ems_openstack).find($evm.object['dialog_ems_id'])\n
              \ else\n    ems = $evm.vmdb(:ems_openstack).first\n  end\n  \n  # fill
              in the instance attributes.\n  $evm.object[\"cinder_volume_id\"] = $evm.object[\"dialog_cinder_volume_id\"]\n
              \ $evm.object[\"os_authentication_userid\"] = ems.authentication_userid\n
              \ $evm.object[\"os_authentication_password\"] = ems.authentication_password\n
              \ $evm.object[\"os_authentication_url\"] = \"http://#{ ems.hostname
              }:#{ ems.port }/v2.0/tokens\"\n\n  # show the values in the log.\n  info(\"Initialized
              the following instance attributes:\")\n  info(\"\tcinder_volume_id:
              #{ $evm.object[\"cinder_volume_id\"] }\")\n  info(\"\tos_authentication_userid:
              #{ $evm.object[\"os_authentication_userid\"] }\")\n  info(\"\tos_authentication_password:
              #{ $evm.object[\"os_authentication_password\"] }\")\n  info(\"\tos_authentication_url:
              #{ $evm.object[\"os_authentication_url\"] }\")\n\n  info(\"Automate
              method ended.\")\n  \n  exit MIQ_OK\n  \nend \n"
            CatalogItemInitialization.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: CatalogItemInitialization
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            DeleteVolume.rb: ! "###################################\n#\n# CloudForms
              Automate Method: DeleteVolume\n#\n# This method is used to delete an
              OpenStack Cinder Volume\n#\n###################################\n\n######
              TRACERS ######\n# Method for logging\ndef log(level, message)\n  $evm.log(level,
              \"#{message}\")\nend\n\ndef info(message)\n  log(:info, message)\nend\n\ndef
              error(message)\n  log(:error, message)\nend\n\ndef debug(message)\n
              \ log(:debug, message)\nend\n\ndef dump_root\n  log(:info, \"Root:<$evm.root>
              Attributes - Begin\")\n  $evm.root.attributes.sort.each { |k, v| log(:info,
              \"  Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root> Attributes
              - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n  log(:info,
              \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
              { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info,
              \"CUSTOM  End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
              TRACERS ######\n\nbegin\n  \n  info(\"Automate method started.\")\n
              \ \n  require 'fog'\n  \n  # cinder volume ID\n  cinder_volume_id =
              $evm.object[\"cinder_volume_id\"]\n\n  # Set up Fog connection to Openstack.\n
              \ os_user_id = $evm.object[\"os_authentication_userid\"]\n  os_password
              = $evm.object[\"os_authentication_password\"]\n  os_auth_url = $evm.object[\"os_authentication_url\"]\n
              \ os_tenant = $evm.object[\"os_tenant\"]\n  info(\"Fog openstack_username:
              #{ os_user_id }, openstack_api_key: #{ os_password }, openstack_auth_url:
              #{ os_auth_url }, openstack_tenant: #{ os_tenant }\")\n  \n  fog_conn
              = Fog::Compute.new({:provider => 'openstack',\n                              :openstack_username
              => os_user_id,\n                              :openstack_api_key =>
              os_password,\n                              :openstack_auth_url => os_auth_url,\n
              \                             :openstack_tenant => os_tenant})\n\n  volume
              = fog_conn.volumes.get(cinder_volume_id)\n  volume_name = volume.name\n
              \   \n  if volume.destroy == false\n    error(\"Unable to delete volume
              #{volume_name} (#{cinder_volume_id})\")\n    exit MIQ_ABORT\n  end\n\n
              \ info(\"Volume successfully deleted\")\n  \n  info(\"Automate method
              ended.\")\n\n  exit MIQ_OK\nend\n"
            DeleteVolume.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: DeleteVolume
                  display_name: Delete Volume
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            VmButtonInitialization.rb: ! "###################################  \n#
              \ \n# CloudForms Automate Method: VmButtonInitialization  \n#  \n# This
              method is used to initialize the instance attributes for volume\n# deletion
              when called from a button on a VM.\n#\n# Dialog fields expected:\n#
              \  1. cinder_volume_id - OpenStack Cinder Volume Id\n#\n###################################
              \ \n  \n###### TRACERS ######  \n# Method for logging  \ndef log(level,
              message)  \n  $evm.log(level, \"#{message}\")  \nend  \n  \ndef debug(message)
              \ \n  log(:debug, message)  \nend  \n  \ndef info(message)  \n  log(:info,
              message)  \nend  \n  \ndef error(message)  \n  log(:error, message)
              \ \nend  \n  \ndef dump_root  \n  log(:info, \"Root:<$evm.root> Attributes
              - Begin\")  \n  $evm.root.attributes.sort.each { |k, v| log(:info, \"
              \ Attribute - #{k}: #{v}\") }  \n  log(:info, \"Root:<$evm.root> Attributes
              - End\")  \n  log(:info, \"\")  \nend  \n  \ndef dump_attributes(object)
              \ \n  log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")  \n
              \ object.attributes.sort.each { |k, v| log(:info, \"CUSTOM    #{k} =
              #{v.inspect}\") }  \n  log(:info, \"CUSTOM  End Attributes [object.attributes]\")
              \ \n  log(:info, \"\")  \nend  \n###### TRACERS ######  \n  \nbegin
              \ \n  \n  info(\"Automate method started.\")  \n    \n  # get the VM
              and EMS from the current context.\n  vm = $evm.root['vm']\n  ems = vm.ext_management_system\n
              \ info(\"VM name: #{ vm.name }\")\n  info(\"EMS name: #{ ems.name }\")\n
              \ \n  # fill in the instance attributes.\n  $evm.object[\"cinder_volume_id\"]
              = $evm.root[\"dialog_cinder_volume_id\"]\n  $evm.object[\"os_authentication_userid\"]
              = ems.authentication_userid\n  $evm.object[\"os_authentication_password\"]
              = ems.authentication_password\n  $evm.object[\"os_authentication_url\"]
              = \"http://#{ ems.hostname }:#{ ems.port }/v2.0/tokens\"\n\n  # show
              the values in the log.\n  info(\"Initialized the following instance
              attributes:\")\n  info(\"\tcinder_volume_id: #{ $evm.object[\"cinder_volume_id\"]
              }\")\n  info(\"\tos_authentication_userid: #{ $evm.object[\"os_authentication_userid\"]
              }\")\n  info(\"\tos_authentication_password: #{ $evm.object[\"os_authentication_password\"]
              }\")\n  info(\"\tos_authentication_url: #{ $evm.object[\"os_authentication_url\"]
              }\")\n\n  info(\"Automate method ended.\")\n  \n  exit MIQ_OK\n  \nend
              \n"
            VmButtonInitialization.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: VmButtonInitialization
                  display_name: VM Button Initialization
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
        VolumeDetach.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: Detach a Cinder Volume
                display_name: Volume Detach
                name: VolumeDetach
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: attribute
                  name: vm_id
                  display_name: 
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: VMDB Id for the VM from which to detach the volume
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: cinder_volume_id
                  display_name: 
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Reference Id in OpenStack for the Volume to Delete
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_userid
                  display_name: 
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: User Id to authenticate to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_password
                  display_name: 
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Password to authenticate to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_authentication_url
                  display_name: 
                  datatype: string
                  priority: 5
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Keystone URL to the OpenStack provider
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: os_tenant
                  display_name: 
                  datatype: string
                  priority: 6
                  owner: 
                  default_value: admin
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Tenant in which the cinder volume belongs to
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: retries
                  display_name: 
                  datatype: integer
                  priority: 7
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Number of times to retry failed requests to OpenStack
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: sleep
                  display_name: 
                  datatype: integer
                  priority: 8
                  owner: 
                  default_value: '5'
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Number of seconds to wait before retrying a failed
                    request to OpenStack
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: InitializeAttributesForThisInstance
                  display_name: 
                  datatype: string
                  priority: 9
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: Context-specific method to initialize attributes
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: DetachVolume
                  display_name: 
                  datatype: string
                  priority: 10
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: ''
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
          VmButtonInvocation.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: VM Button Invocation
                name: VmButtonInvocation
                inherits: 
                description: 
              fields:
              - InitializeAttributesForThisInstance:
                  value: VmButtonInitialization
              - DetachVolume:
                  value: DetachVolume
          __methods__:
            DetachVolume.rb: ! "###################################\n#\n# CloudForms
              Automate Method: DetachVolume\n#\n# This method is used to detach a
              volume\n# currently attached to an OpenStack Instance\n#\n###################################\n\n######
              TRACERS ######\n# Method for logging\ndef log(level, message)\n  $evm.log(level,
              \"#{message}\")\nend\n\ndef debug(message)\n  log(:debug, message)\nend\n\ndef
              info(message)\n  log(:info, message)\nend\n\ndef error(message)\n  log(:error,
              message)\nend\n\ndef dump_root\n  log(:info, \"Root:<$evm.root> Attributes
              - Begin\")\n  $evm.root.attributes.sort.each { |k, v| log(:info, \"
              \ Attribute - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root> Attributes
              - End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n  log(:info,
              \"CUSTOM  Begin Attributes [object.attributes]\")\n  object.attributes.sort.each
              { |k, v| log(:info, \"CUSTOM    #{k} = #{v.inspect}\") }\n  log(:info,
              \"CUSTOM  End Attributes [object.attributes]\")\n  log(:info, \"\")\nend\n######
              TRACERS ######\n\nbegin\n  \n  info(\"Automate method started.\")\n
              \ \n  require 'fog'\n  \n  # get the MIQ instance for the VM\n  vm =
              $evm.vmdb(:vm).find($evm.object[\"vm_id\"])\n\n  # cinder volume ID\n
              \ cinder_volume_id = $evm.object[\"cinder_volume_id\"]\n\n  # Set up
              Fog connection to Openstack.\n  os_user_id = $evm.object[\"os_authentication_userid\"]\n
              \ os_password = $evm.object[\"os_authentication_password\"]\n  os_auth_url
              = $evm.object[\"os_authentication_url\"]\n  os_tenant = $evm.object[\"os_tenant\"]\n
              \ info(\"Fog openstack_username: #{ os_user_id }, openstack_api_key:
              #{ os_password }, openstack_auth_url: #{ os_auth_url }, openstack_tenant:
              #{ os_tenant }\")\n  \n  fog_conn = Fog::Compute.new({:provider => 'openstack',\n
              \                             :openstack_username => os_user_id,\n                              :openstack_api_key
              => os_password,\n                              :openstack_auth_url =>
              os_auth_url,\n                              :openstack_tenant => os_tenant})\n\n
              \ # get the VM that this volume is attached to.\n  fog_vm = fog_conn.servers.get(vm.ems_ref)\n
              \ debug(\"Got Fog VM: #{ fog_vm.inspect }\")\n  \n  fog_vm.detach_volume(cinder_volume_id)\n
              \ \n  vol = fog_conn.volumes.get(cinder_volume_id)\n  # Ensure that
              the Volume has really detached(if so, status will say 'available').\n
              \ retries = 0\n  until vol.status == 'available' or retries >= $evm.object['retries']
              do\n    info(\"Volume status is not 'available'\")\n    sleep $evm.object['sleep']\n
              \   retries += 1\n    vol.reload\n    info(\"Retry #{ retries } of #{
              $evm.object['retries'] }. Volume not yet fully detached (#{ vol.status
              }). Sleeping...\")\n  end\n\n  # we exit with an error unless we know
              that the volume was detached successfully\n  unless vol.status == 'available'\n
              \   error(\"Timeout while waiting for volume #{vol_id} to be available
              for attachment. Volume Status: #{ vol.status }\")\n    exit MIQ_ERROR\n
              \ end\n\n  info(\"Volume successfully detached.\")\n\n  info(\"Automate
              method ended.\")\n\n  exit MIQ_OK\nend\n"
            DetachVolume.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: DetachVolume
                  display_name: Detach Volume
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            Notify.rb: ! "begin \n  vars = Hash.new\n  vars[:type] = \"detach_cinder_volume\"\n
              \ vars[:action] = \"Detached\"\n  vars[:service_name] = \"OpenStack
              Cinder\"\n  vars[:vol_name] = vol.name\n  vars[:vm_name] = vm['name']\n\n
              \ require 'json'\n  require 'uri'\n  args = \"payload=#{vars.to_json}\"\n
              \ args = URI.escape(args)\n  $evm.log(\"info\", \"============== vars:
              #{vars.inspect}\")\n  $evm.log(\"info\", \"============== args: #{args.inspect}\")\n
              \ $evm.instantiate(\"/Yale/Methods/Emails/Email_OpenStack_Owner?#{args}\")\nend\n"
            Notify.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: Notify
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            VmButtonInitialization.rb: ! "###################################  \n#
              \ \n# CloudForms Automate Method: VmButtonInitialization  \n#  \n# This
              method is used to initialize the instance attributes for volume\n# deletion
              when called from a button on a VM.\n#\n# Dialog fields expected:\n#
              \  1. cinder_volume_id - OpenStack Cinder Volume Id\n#\n###################################
              \ \n  \n###### TRACERS ######  \n# Method for logging  \ndef log(level,
              message)  \n  $evm.log(level, \"#{message}\")  \nend  \n  \ndef debug(message)
              \ \n  log(:debug, message)  \nend  \n  \ndef info(message)  \n  log(:info,
              message)  \nend  \n  \ndef error(message)  \n  log(:error, message)
              \ \nend  \n  \ndef dump_attributes(object)  \n  log(:info, \"Begin Attributes
              [object.attributes]\")  \n  object.attributes.sort.each { |k, v| log(:info,
              \"Attribute    #{k} = #{v.inspect}\") }  \n  log(:info, \"End Attributes
              [object.attributes]\")  \n  log(:info, \"\")  \nend\n\ndef dump_root
              \ \n  log(:info, \"Root:<$evm.root> Attributes - Begin\")  \n  $evm.root.attributes.sort.each
              { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }  \n  log(:info,
              \"Root:<$evm.root> Attributes - End\")  \n  log(:info, \"\")  \nend
              \ \n\n###### TRACERS ######  \n  \nbegin  \n  \n  info(\"Automate method
              started.\")\n  \n  # get the VM and EMS from the current context.\n
              \ vm = $evm.root['vm']\n  ems = vm.ext_management_system\n  info(\"VM
              name: #{ vm.name }\")\n  info(\"EMS name: #{ ems.name }\")\n  \n  #
              fill in the instance attributes.\n  $evm.object[\"vm_id\"] = vm.id\n
              \ $evm.object[\"cinder_volume_id\"] = $evm.root[\"dialog_cinder_volume_id\"]\n
              \ $evm.object[\"os_authentication_userid\"] = ems.authentication_userid\n
              \ $evm.object[\"os_authentication_password\"] = ems.authentication_password\n
              \ $evm.object[\"os_authentication_url\"] = \"http://#{ ems.hostname
              }:#{ ems.port }/v2.0/tokens\"\n\n  # show the values in the log.\n  info(\"Initialized
              the following instance attributes:\")\n  info(\"\tvm_id: #{ $evm.object[\"vm_id\"]
              }\")\n  info(\"\tcinder_volume_id: #{ $evm.object[\"cinder_volume_id\"]
              }\")\n  info(\"\tos_authentication_userid: #{ $evm.object[\"os_authentication_userid\"]
              }\")\n  info(\"\tos_authentication_password: #{ $evm.object[\"os_authentication_password\"]
              }\")\n  info(\"\tos_authentication_url: #{ $evm.object[\"os_authentication_url\"]
              }\")\n\n  info(\"Automate method ended.\")\n  \n  exit MIQ_OK\n  \nend\n"
            VmButtonInitialization.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: VmButtonInitialization
                  display_name: VM Button Initialization
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
    Amazon:
      __namespace__.yaml:
        object_type: namespace
        version: 1.0
        object:
          attributes:
            name: Amazon
            description: 
            display_name: 
            system: 
            priority: 
            enabled: 
      EC2.class:
        __class__.yaml:
          object_type: class
          version: 1.0
          object:
            attributes:
              description: 
              display_name: EC2
              name: EC2
              type: 
              inherits: 
              visibility: 
              owner: 
            schema:
            - field:
                aetype: method
                name: SyncVMTags
                display_name: 
                datatype: string
                priority: 1
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
        SyncVMTags.yaml:
          object_type: instance
          version: 1.0
          object:
            attributes:
              display_name: SyncVMTags
              name: SyncVMTags
              inherits: 
              description: 
            fields:
            - SyncVMTags:
                value: syncvmtags
        __methods__:
          syncvmtags.rb: ! "# SyncVMTags.rb\r\n#\r\n# Description: Synchronize tags
            between a CFME VM and a corresponding EC2 instance\r\n#\r\nrequire 'aws-sdk'\r\n\r\ndef
            log(level, msg, update_message=false)\r\n  $evm.log(level, \"#{msg}\")\r\n
            \ $evm.root['miq_provision'].message = msg if $evm.root['miq_provision']
            && update_message\r\nend\r\n\r\ndef retry_method(retry_time, msg)\r\n
            \ log(:info, \"#{msg} - Waiting #{retry_time} seconds}\", true)\r\n  $evm.root['ae_result']
            = 'retry'\r\n  $evm.root['ae_retry_interval'] = retry_time\r\n  exit MIQ_OK\r\nend\r\n\r\ndef
            get_aws_object(provider, type='EC2')\r\n  AWS.config( :access_key_id =>
            provider.authentication_userid, :secret_access_key => provider.authentication_password,
            :region => provider.provider_region )\r\n  return Object::const_get(\"AWS\").const_get(type).new()\r\nend\r\n\r\ndef
            process_tags( category, category_description, single_value, tag, tag_description)\r\n
            \ # Convert to lower case and replace all non-word characters with underscores\r\n
            \ category_name = category.to_s.downcase.gsub(/\\W/, '_')\r\n  tag_name
            = tag.to_s.downcase.gsub(/\\W/, '_')\r\n  unless $evm.execute('category_exists?',
            category_name)\r\n    log(:info, \"Creating Category {#{category_name}
            => #{category_description}}\")\r\n    $evm.execute('category_create',
            :name => category_name, :single_value => single_value, :description =>
            \"#{category_description}\")\r\n  end\r\n  unless $evm.execute('tag_exists?',
            category_name, tag_name)\r\n    log(:info, \"Creating Tag {#{tag_name}
            => #{tag_description}} in Category #{category_name}\")\r\n    $evm.execute('tag_create',
            category_name, :name => tag_name, :description => \"#{tag_description}\")\r\n
            \ end\r\n  return category_name, tag_name\r\nend\r\n\r\ncase $evm.root['vmdb_object_type']\r\nwhen
            'miq_provision'\r\n  prov = $evm.root[\"miq_provision\"]\r\n  log(:info,
            \"Provision: #{prov.id} Request: #{prov.miq_provision_request.id} Type:
            #{prov.type}\")\r\n  vm = prov.vm\r\n  retry_method(15.seconds, \"Provisioned
            instance: #{prov.get_option(:vm_target_name)} not ready\") if vm.nil?\r\nwhen
            'vm'\r\n  vm = $evm.root['vm']\r\nend\r\nexit MIQ_OK unless (vm.vendor.downcase
            rescue nil) == 'amazon'\r\n\r\nec2 = get_aws_object(vm.ext_management_system,
            'EC2')\r\nraise \"Unable to get EC2 Connection\" if ec2.nil?\r\n\r\nec2_instance
            = ec2.instances[vm.ems_ref]\r\nlog(:info, \"VM: #{vm.name} EC2: #{ec2_instance.id}\")\r\n\r\nec2_instance.tags.each
            do |key, value|\r\n  #next if key.starts_with?(\"cfme_\")\r\n  next if
            key.downcase == \"name\"\r\n  category_name, tag_name = process_tags(key,
            \"EC2 Tag #{key}\", true, value, value)\r\n  unless vm.tagged_with?(category_name,tag_name)\r\n
            \   log(:info, \"Assigning Tag: {#{category_name} => #{tag_name}} to VM:
            #{vm.name}\")\r\n    vm.tag_assign(\"#{category_name}/#{tag_name}\")\r\n
            \ end\r\nend\r\n\r\nputs \"SyncVMTags Method found VM Tags: #{vm.tags}\"\r\n\r\nvm.tags.each
            do |tag_element|\r\n  #next if tag_element.starts_with?(\"folder_path\")\r\n
            \ tag = tag_element.split(\"/\", 2)\r\n  log(:info, \"Assigning Tag: {#{tag.first}
            => #{tag.last}} to EC2 Instance: #{vm.ems_ref}\", true)\r\n  ec2_instance.add_tag(\"#{tag.first}\",
            :value => tag.last.to_s)\r\nend\r\n"
          syncvmtags.yaml:
            object_type: method
            version: 1.0
            object:
              attributes:
                name: syncvmtags
                display_name: sync vm tags Amazon
                description: 
                scope: instance
                language: ruby
                location: inline
              inputs: []
  Cloud:
    __namespace__.yaml:
      object_type: namespace
      version: 1.0
      object:
        attributes:
          name: Cloud
          description: 
          display_name: 
          system: 
          priority: 
          enabled: 
    VM:
      __namespace__.yaml:
        object_type: namespace
        version: 1.0
        object:
          attributes:
            name: VM
            description: 
            display_name: 
            system: 
            priority: 
            enabled: 
      Lifecycle.class:
        __class__.yaml:
          object_type: class
          version: 1.0
          object:
            attributes:
              description: 
              display_name: 
              name: Lifecycle
              type: 
              inherits: 
              visibility: 
              owner: 
            schema:
            - field:
                aetype: assertion
                name: guard
                display_name: 
                datatype: 
                priority: 1
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: on_entry
                display_name: 
                datatype: 
                priority: 2
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship1
                display_name: 
                datatype: 
                priority: 3
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method1
                display_name: 
                datatype: 
                priority: 4
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship2
                display_name: 
                datatype: 
                priority: 5
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method2
                display_name: 
                datatype: 
                priority: 6
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship3
                display_name: 
                datatype: 
                priority: 7
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method3
                display_name: 
                datatype: 
                priority: 8
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship4
                display_name: 
                datatype: 
                priority: 9
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method4
                display_name: 
                datatype: 
                priority: 10
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship5
                display_name: 
                datatype: 
                priority: 11
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method5
                display_name: 
                datatype: 
                priority: 12
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship6
                display_name: 
                datatype: 
                priority: 13
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method6
                display_name: 
                datatype: 
                priority: 14
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship7
                display_name: 
                datatype: 
                priority: 15
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method7
                display_name: 
                datatype: 
                priority: 16
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship8
                display_name: 
                datatype: 
                priority: 17
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method8
                display_name: 
                datatype: 
                priority: 18
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship9
                display_name: 
                datatype: 
                priority: 19
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method9
                display_name: 
                datatype: 
                priority: 20
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship10
                display_name: 
                datatype: 
                priority: 21
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method10
                display_name: 
                datatype: 
                priority: 22
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship11
                display_name: 
                datatype: 
                priority: 23
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method11
                display_name: 
                datatype: 
                priority: 24
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship12
                display_name: 
                datatype: 
                priority: 25
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method12
                display_name: 
                datatype: 
                priority: 26
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship13
                display_name: 
                datatype: 
                priority: 27
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: Method13
                display_name: 
                datatype: 
                priority: 28
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: relationship
                name: Relationship14
                display_name: 
                datatype: 
                priority: 29
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
            - field:
                aetype: method
                name: on_exit
                display_name: 
                datatype: 
                priority: 30
                owner: 
                default_value: 
                substitute: true
                message: create
                visibility: 
                collect: 
                scope: 
                description: 
                condition: 
                on_entry: 
                on_exit: 
                on_error: 
                max_retries: 
                max_time: 
        Provisioning.yaml:
          object_type: instance
          version: 1.0
          object:
            attributes:
              display_name: 
              name: Provisioning
              inherits: 
              description: 
            fields:
            - Relationship5:
                value: /Cloud/VM/Provisioning/Profile/${/#user.normalized_ldap_group}#get_state_machine
            - Relationship6:
                value: /Cloud/VM/Provisioning/StateMachines/${/#state_machine}/${/#miq_provision.source.vendor}_${/#miq_provision.provision_type}
            - Relationship7:
                value: ! '#/Cloud/VM/Provisioning/StateMachines/${/#state_machine}/${/#miq_provision.provision_type}'
      Provisioning:
        __namespace__.yaml:
          object_type: namespace
          version: 1.0
          object:
            attributes:
              name: Provisioning
              description: 
              display_name: 
              system: 
              priority: 
              enabled: 
        Email.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: 
                display_name: 
                name: Email
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: attribute
                  name: to_email_address
                  display_name: 
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: evmadmin@company.com
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: from_email_address
                  display_name: 
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: evmadmin@company.com
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: signature
                  display_name: 
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: Virtualization Infrastructure Team
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: vm_retire_extend_days
                  display_name: 
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: method1
                  display_name: 
                  datatype: string
                  priority: 5
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
          MiqProvisionRequest_Approved.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: MiqProvisionRequest_Approved
                inherits: 
                description: 
              fields:
              - method1:
                  value: MiqProvisionRequest_Approved
          MiqProvisionRequest_Denied.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: MiqProvisionRequest_Denied
                inherits: 
                description: 
              fields:
              - method1:
                  value: MiqProvisionRequest_Denied
          MiqProvisionRequest_Pending.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: MiqProvisionRequest_Pending
                inherits: 
                description: 
              fields:
              - method1:
                  value: MiqProvisionRequest_Pending
          MiqProvision_Complete.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: MiqProvision_Complete
                inherits: 
                description: 
              fields:
              - method1:
                  value: MiqProvision_Complete
          __methods__:
            MiqProvisionRequest_Approved.rb: ! "#\n# Description: This method is used
              to email the provision requester that\n# VM provisioning request has
              been approved\n#\n# Events: request_approved\n#\n# Model Notes:\n# 1.
              to_email_address - used to specify an email address in the case where
              the\n#    requester does not have a valid email address. To specify
              more than one email\n#    address separate email address with commas.
              (I.e. admin@company.com,user@company.com)\n# 2. from_email_address -
              used to specify an email address in the event the\n#    requester replies
              to the email\n# 3. signature - used to stamp the email with a custom
              signature\n#\n\n###################################\n#\n# Method: emailrequester\n#\n#
              Send email to requester\n#\n###################################\ndef
              emailrequester(miq_request, appliance)\n  $evm.log('info', \"Requester
              email logic starting\")\n\n  # Get requester object\n  requester = miq_request.requester\n\n
              \ # Get requester email else set to nil\n  requester_email = requester.email
              || nil\n\n  # Get Owner Email else set to nil\n  owner_email = miq_request.options[:owner_email]
              || nil\n  $evm.log('info', \"Requester email:<#{requester_email}> Owner
              Email:<#{owner_email}>\")\n\n  # if to is nil then use requester_email\n
              \ to = nil\n  to ||= requester_email\n\n  # If to is still nil use to_email_address
              from model\n  to ||= $evm.object['to_email_address']\n\n  # Get from_email_address
              from model unless specified below\n  from = nil\n  from ||= $evm.object['from_email_address']\n\n
              \ # Get signature from model unless specified below\n  signature = nil\n
              \ signature ||= $evm.object['signature']\n\n  # Build subject\n  subject
              = \"Request ID #{miq_request.id} - Your Virtual Machine configuration
              was Approved, pending Quota Validation\"\n\n  # Build email body\n  body
              = \"Hello, \"\n  body += \"<br>Your Virtual Machine Request was approved.
              If Quota validation is successful you will be notified via email when
              the VM is available.\"\n  body += \"<br><br>Approvers notes: #{miq_request.reason}\"\n
              \ body += \"<br><br>To view this Request go to: <a href='https://#{appliance}/miq_request/show/#{miq_request.id}'>https://#{appliance}/miq_request/show/#{miq_request.id}</a>\"\n
              \ body += \"<br><br> Thank you,\"\n  body += \"<br> #{signature}\"\n\n
              \ # Send email\n  $evm.log(\"info\", \"Sending email to <#{to}> from
              <#{from}> subject: <#{subject}>\")\n  $evm.execute(:send_email, to,
              from, subject, body)\nend\n\n###################################\n#\n#
              Method: emailapprover\n#\n# Send email to Approver\n#\n###################################\ndef
              emailapprover(miq_request, appliance)\n  $evm.log('info', \"Requester
              email logic starting\")\n\n  # Get requester object\n  requester = miq_request.requester\n\n
              \ # Get requester email else set to nil\n  requester_email = requester.email
              || nil\n\n  # If to is still nil use to_email_address from model\n  to
              = nil\n  to ||= $evm.object['to_email_address']\n\n  # Get from_email_address
              from model unless specified below\n  from = nil\n  from ||= $evm.object['from_email_address']\n\n
              \ # Get signature from model unless specified below\n  signature = nil\n
              \ signature ||= $evm.object['signature']\n\n  # Build subject\n  subject
              = \"Request ID #{miq_request.id} - Your Virtual Machine configuration
              was Approved, pending Quota Validation\"\n\n  # Build email body\n  body
              = \"Approver, \"\n  body += \"<br>Virtual Machine request received from
              #{requester_email} was approved.\"\n  body += \"<br><br>Approvers reason:
              #{miq_request.reason}\"\n  body += \"<br><br>To view this Request go
              to: <a href='https://#{appliance}/miq_request/show/#{miq_request.id}'>https://#{appliance}/miq_request/show/#{miq_request.id}</a>\"\n
              \ body += \"<br><br> Thank you,\"\n  body += \"<br> #{signature}\"\n\n
              \ # Send email\n  $evm.log(\"info\", \"Sending email to <#{to}> from
              <#{from}> subject: <#{subject}>\")\n  $evm.execute(:send_email, to,
              from, subject, body)\nend\n\n# Get miq_request from root\nmiq_request
              = $evm.root['miq_request']\nraise \"miq_request missing\" if miq_request.nil?\n$evm.log(\"info\",
              \"Detected Request:<#{miq_request.id}> with Approval State:<#{miq_request.approval_state}>\")\n\n#
              Override the default appliance IP Address below\nappliance = nil\n#
              appliance ||= 'evmserver.company.com'\nappliance ||= $evm.root['miq_server'].ipaddress\n\n#
              Email Requester\nemailrequester(miq_request, appliance)\n"
            MiqProvisionRequest_Approved.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: MiqProvisionRequest_Approved
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            MiqProvisionRequest_Denied.rb: ! "\n#\n# Description: This method is used
              to email the provision requester and approver that\n# the VM provision
              request has been denied\n#\n# Events: request_denied\n#\n# Model Notes:\n#
              1. to_email_address - used to specify an email address in the case where
              the\n#    requester does not have a valid email address.To specify more
              than one email\n#    address separate email address with commas. (I.e.
              admin@company.com,user@company.com)\n# 2. from_email_address - used
              to specify an email address in the event the\n#    requester replies
              to the email\n# 3. signature - used to stamp the email with a custom
              signature\n#\n\n###################################\n#\n# Method: emailrequester\n#\n#
              Build email to requester with reason\n#\n###################################\ndef
              emailrequester(miq_request, appliance, msg, provisionRequestApproval)\n
              \ $evm.log('info', \"Requester email logic starting\")\n\n  # Get requester
              object\n  requester = miq_request.requester\n\n  # Get requester email
              else set to nil\n  requester_email = requester.email || nil\n\n  # Get
              Owner Email else set to nil\n  owner_email = miq_request.options[:owner_email]
              || nil\n  $evm.log('info', \"Requester email:<#{requester_email}> Owner
              Email:<#{owner_email}>\")\n\n  # if to is nil then use requester_email
              or owner_email\n  to = nil\n  to ||= requester_email || owner_email\n\n
              \ # If to is still nil use to_email_address from model\n  to ||= $evm.object['to_email_address']\n\n
              \ # Get from_email_address from model unless specified below\n  from
              = nil\n  from ||= $evm.object['from_email_address']\n\n  # Get signature
              from model unless specified below\n  signature = nil\n  signature ||=
              $evm.object['signature']\n\n  # Set email subject\n  if provisionRequestApproval\n
              \   subject = \"Request ID #{miq_request.id} - Your virtual machine
              request was not approved\"\n  else\n    subject = \"Request ID #{miq_request.id}
              - Virtual Machine request was denied due to quota limitations\"\n  end\n\n
              \ # Build email body\n  body = \"Hello, \"\n  body += \"<br>#{msg}.\"\n
              \ body += \"<br><br>Approvers notes: #{miq_request.reason}\" if provisionRequestApproval\n
              \ body += \"<br><br>For more information you can go to: <a href='https://#{appliance}/miq_request/show/#{miq_request.id}'>https://#{appliance}/miq_request/show/#{miq_request.id}</a>\"\n
              \ body += \"<br><br> Thank you,\"\n  body += \"<br> #{signature}\"\n\n
              \ # Send email to requester\n  $evm.log('info', \"Sending email to <#{to}>
              from <#{from}> subject: <#{subject}>\")\n  $evm.execute(:send_email,
              to, from, subject, body)\nend\n\n###################################\n#\n#
              Method: emailapprover\n#\n# Build email to approver with reason\n#\n###################################\ndef
              emailapprover(miq_request, appliance, msg, provisionRequestApproval)\n
              \ $evm.log('info', \"Approver email logic starting\")\n\n  # Override
              to requesters to_email_address below or get value from requester.email
              then from model\n  requester_email = miq_request.requester.email\n  if
              requester_email.to_s.empty?\n    requester_email ||= miq_request.requester.email\n
              \ else\n    requester_email ||= $evm.object['to_email_address']\n  end\n\n
              \ # Override to email address below or get to_email_address from from
              model\n  to = nil\n  to  ||= $evm.object['to_email_address']\n\n  #
              Override from_email_address below or get from_email_address from model\n
              \ from = nil\n  from ||= $evm.object['from_email_address']\n\n  # Get
              signature from model unless specified below\n  signature = nil\n  signature
              ||= $evm.object['signature']\n\n  # Set email subject\n  if provisionRequestApproval\n
              \   subject = \"Request ID #{miq_request.id} - Virtual machine request
              was not approved\"\n  else\n    subject = \"Request ID #{miq_request.id}
              - Virtual Machine request was denied due to quota limitations\"\n  end\n\n
              \ # Build email body\n  body = \"Approver, \"\n  body += \"<br>A request
              received from #{requester_email} was denied.\"\n  body += \"<br><br>#{msg}.\"\n
              \ body += \"<br><br>Approvers notes: #{miq_request.reason}\" if provisionRequestApproval\n
              \ body += \"<br><br>For more information you can go to: <a href='https://#{appliance}/miq_request/show/#{miq_request.id}'>https://#{appliance}/miq_request/show/#{miq_request.id}</a>\"\n
              \ body += \"<br><br> Thank you,\"\n  body += \"<br> #{signature}\"\n\n
              \ # Send email to approver\n  $evm.log('info', \"Sending email to <#{to}>
              from <#{from}> subject: <#{subject}>\")\n  $evm.execute(:send_email,
              to, from, subject, body)\nend\n\n# Get miq_request from root\nmiq_request
              = $evm.root['miq_request']\nraise \"miq_request missing\" if miq_request.nil?\n$evm.log('info',
              \"Detected Request:<#{miq_request.id}> with Approval State:<#{miq_request.approval_state}>\")\n\n#
              Override the default appliance IP Address below\nappliance = nil\n#
              appliance ||= 'evmserver.company.com'\nappliance ||= $evm.root['miq_server'].ipaddress\n\n#
              Get incoming message or set it to default if nil\nmsg = miq_request.resource.message
              || \"Request denied\"\n\n# Check to see which state machine called this
              method\nif msg.downcase.include?('quota')\n  provisionRequestApproval
              = false\nelse\n  provisionRequestApproval = true\nend\n\n# Email Requester\nemailrequester(miq_request,
              appliance, msg, provisionRequestApproval)\n\n# Email Approver\nemailapprover(miq_request,
              appliance, msg, provisionRequestApproval)\n\n"
            MiqProvisionRequest_Denied.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: MiqProvisionRequest_Denied
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            MiqProvisionRequest_Pending.rb: ! "#\n# Description: This method is launched
              from the not_approved method which raises the requst_pending event\n#
              when the provisioning request is NOT auto-approved\n#\n# Events: request_pending\n#\n#
              Model Notes:\n# 1. to_email_address - used to specify an email address
              in the case where the\n#    requester does not have a valid email address.To
              specify more than one email\n#    address separate email address with
              commas. (I.e. admin@company.com,user@company.com)\n# 2. from_email_address
              - used to specify an email address in the event the\n#    requester
              replies to the email\n# 3. signature - used to stamp the email with
              a custom signature\n#\n\n###################################\n#\n# Method:
              emailrequester\n#\n# Build email to requester with reason\n#\n###################################\ndef
              emailrequester(miq_request, appliance, msg)\n  $evm.log('info', \"Requester
              email logic starting\")\n\n  # Get requester object\n  requester = miq_request.requester\n\n
              \ # Get requester email else set to nil\n  requester_email = requester.email
              || nil\n\n  # Get Owner Email else set to nil\n  owner_email = miq_request.options[:owner_email]
              || nil\n  $evm.log('info', \"Requester email:<#{requester_email}> Owner
              Email:<#{owner_email}>\")\n\n  # if to is nil then use requester_email
              or owner_email\n  to = nil\n  to ||= requester_email # || owner_email\n\n
              \ # If to is still nil use to_email_address from model\n  to ||= $evm.object['to_email_address']\n\n
              \ # Get from_email_address from model unless specified below\n  from
              = nil\n  from ||= $evm.object['from_email_address']\n\n  # Get signature
              from model unless specified below\n  signature = nil\n  signature ||=
              $evm.object['signature']\n\n  # Set email subject\n  subject = \"Request
              ID #{miq_request.id} - Your Request for a new VM(s) was not Auto-Approved\"\n\n
              \ # Build email body\n  body = \"Hello, \"\n  body += \"<br>#{msg}.\"\n
              \ body += \"<br><br>Please review your Request and update or wait for
              approval from an Administrator.\"\n  body += \"<br><br>To view this
              Request go to: \"\n  body += \"<a href='https://#{appliance}/miq_request/show/#{miq_request.id}'>https://#{appliance}/miq_request/show/#{miq_request.id}</a>\"\n
              \ body += \"<br><br> Thank you,\"\n  body += \"<br> #{signature}\"\n\n
              \ # Send email to requester\n  $evm.log('info', \"Sending email to <#{to}>
              from <#{from}> subject: <#{subject}>\")\n  $evm.execute(:send_email,
              to, from, subject, body)\nend\n\n###################################\n#\n#
              Method: emailapprover\n#\n# Build email to approver with reason\n#\n###################################\ndef
              emailapprover(miq_request, appliance, msg, provisionRequestApproval)\n
              \ $evm.log('info', \"Approver email logic starting\")\n\n  # Get requester
              object\n  requester = miq_request.requester\n\n  # Get requester email
              else set to nil\n  requester_email = requester.email || nil\n\n  # Get
              Owner Email else set to nil\n  owner_email = miq_request.options[:owner_email]
              || nil\n  $evm.log('info', \"Requester email:<#{requester_email}> Owner
              Email:<#{owner_email}>\")\n\n  # Override to email address below or
              get to_email_address from from model\n  to = nil\n  to  ||= $evm.object['to_email_address']\n\n
              \ # Override from_email_address below or get from_email_address from
              model\n  from = nil\n  from ||= $evm.object['from_email_address']\n\n
              \ # Get signature from model unless specified below\n  signature = nil\n
              \ signature ||= $evm.object['signature']\n\n  # Set email subject\n
              \ if provisionRequestApproval\n    subject = \"Request ID #{miq_request.id}
              - Virtual machine request was not approved\"\n  else\n    subject =
              \"Request ID #{miq_request.id} - Virtual Machine request was denied
              due to quota limitations\"\n  end\n\n  # Build email body\n  body =
              \"Approver, \"\n  body += \"<br>A request received from #{requester_email}
              is pending.\"\n  body += \"<br><br>#{msg}.\"\n  body += \"<br><br>Approvers
              notes: #{miq_request.reason}\" if provisionRequestApproval\n  body +=
              \"<br><br>For more information you can go to: <a href='https://#{appliance}/miq_request/show/#{miq_request.id}'>https://#{appliance}/miq_request/show/#{miq_request.id}</a>\"\n
              \ body += \"<br><br> Thank you,\"\n  body += \"<br> #{signature}\"\n\n
              \ # Send email to approver\n  $evm.log('info', \"Sending email to <#{to}>
              from <#{from}> subject: <#{subject}>\")\n  $evm.execute(:send_email,
              to, from, subject, body)\nend\n\n# Get miq_request from root\nmiq_request
              = $evm.root['miq_request']\nraise \"miq_request missing\" if miq_request.nil?\n$evm.log('info',
              \"Detected Request:<#{miq_request.id}> with Approval State:<#{miq_request.approval_state}>\")\n\n#
              Override the default appliance IP Address below\nappliance = nil\n#
              appliance ||= 'evmserver.company.com'\nappliance ||= $evm.root['miq_server'].ipaddress\n\n#
              Get incoming message or set it to default if nil\nmsg = miq_request.resource.message
              || \"Request pending\"\n\n# Check to see which state machine called
              this method\nif msg.downcase.include?('quota')\n  provisionRequestApproval
              = false\nelse\n  provisionRequestApproval = true\nend\n\n# Email Requester\nemailrequester(miq_request,
              appliance, msg)\n\n# Email Approver\nemailapprover(miq_request, appliance,
              msg, provisionRequestApproval)\n\n"
            MiqProvisionRequest_Pending.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: MiqProvisionRequest_Pending
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            MiqProvision_Complete.rb: ! "#\n# Description: This method sends an e-mail
              when the following event is raised:\n#\n# Events: vm_provisioned\n#\n#
              Model Notes:\n# 1. to_email_address - used to specify an email address
              in the case where the\n#    vm's owner does not have an  email address.
              To specify more than one email\n#    address separate email address
              with commas. (I.e. admin@company.com,user@company.com)\n# 2. from_email_address
              - used to specify an email address in the event the\n#    requester
              replies to the email\n# 3. signature - used to stamp the email with
              a custom signature\n#\n\n# Get vm from miq_provision object\nprov =
              $evm.root['miq_provision']\nvm = prov.vm\nraise \"VM not found\" if
              vm.nil?\n\n# Override the default appliance IP Address below\n# appliance
              ||= 'evmserver.company.com'\nappliance ||= $evm.root['miq_server'].ipaddress\n\n#\n#
              Get VM Owner Name and Email\n#\nevm_owner_id = vm.attributes['evm_owner_id']\nowner
              = nil\nowner = $evm.vmdb('user', evm_owner_id) unless evm_owner_id.nil?\n$evm.log(\"info\",
              \"VM Owner: #{owner.inspect}\")\n\nto = nil\nto = owner.email unless
              owner.nil?\nto ||= $evm.object['to_email_address']\nif to.nil?\n  $evm.log(\"info\",
              \"Email not sent because no recipient specified.\")\n  exit MIQ_OK\nend\n\n#
              Assign original to_email_Address to orig_to for later use\norig_to =
              to\n\n# Get from_email_address from model unless specified below\nfrom
              = nil\nfrom ||= $evm.object['from_email_address']\n\n# Get signature
              from model unless specified below\nsignature = nil\nsignature ||= $evm.object['signature']\n\n#
              Set email Subject\nsubject = \"Your virtual machine request has Completed
              - VM: #{vm['name']}\"\n\n# Set the opening body to Hello\nbody = \"Hello,
              \"\n\n# Override email to VM owner and send email to a different email
              address\n# if the template provisioned contains 'xx'\n#\nif prov.vm_template.name.downcase.include?('_xx_')\n
              \ $evm.log(\"info\", \"Setup of special email for DBMS VM\")\n\n  #
              Specify special email address below\n  to      = 'evmadmin@company.com'\n\n
              \ body += \"This email was sent by EVM to inform you of the provisioning
              of a new DBMS VM.<br>\"\n  body += \"This new VM requires changes to
              DNS and DHCP to function correctly.<br>\"\n  body += \"Please set the
              IP Address to static.<br>\"\n  body += \"Once that has been completed,
              use this message to inform the \"\n  body += \"requester that their
              new VM is ready.<br><br>\"\n  body += \"--------------------------------
              <br>\"\n  body += \"Forward the message below to <br>\"\n  body += \"#{orig_to}<br>\"\n
              \ body += \"-------------------------------- <br><br>\"\n  body += \"<br>\"\nend\n\n#
              VM Provisioned Email Body\nbody += \"<br><br>Your request to provision
              a virtual machine was approved and completed on #{Time.now.strftime('%A,
              %B %d, %Y at %I:%M%p')}. \"\nbody += \"<br><br>Virtual machine #{vm['name']}<b>
              will be available in approximately 15 minutes</b>. \"\nbody += \"<br><br>For
              Windows VM access is available via RDP and for Linux VM access is available
              via putty/ssh, etc. Or you can use the Console Access feature found
              in the detail view of your VM. \"\nbody += \"<br><br>This VM will automatically
              be retired on #{vm['retires_on'].strftime('%A, %B %d, %Y')}, unless
              you request an extension. \" if vm['retires_on'].respond_to?('strftime')\nbody
              += \" You will receive a warning #{vm['reserved'][:retirement][:warn]}
              days before #{vm['name']} set retirement date.\" if vm['reserved'] &&
              vm['reserved'][:retirement] && vm['reserved'][:retirement][:warn]\nbody
              += \" As the designated owner you will receive expiration warnings at
              this email address: #{orig_to}\"\nbody += \"<br><br>If you are not already
              logged in, you can access and manage your virtual machine here <a href='https://#{appliance}/vm_or_template/show/#{vm['id']}'>https://#{appliance}/vm_or_template/show/#{vm['id']}'</a>\"\nbody
              += \"<br><br> If you have any issues with your new virtual machine please
              contact Support.\"\nbody += \"<br><br> Thank you,\"\nbody += \"<br>
              #{signature}\"\n\n#\n# Send email\n#\n$evm.log(\"info\", \"Sending email
              to <#{to}> from <#{from}> subject: <#{subject}>\")\n$evm.execute('send_email',
              to, from, subject, body)\n\n"
            MiqProvision_Complete.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: MiqProvision_Complete
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
        Naming.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: VM Naming Profiles
                display_name: 
                name: Naming
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: attribute
                  name: vm_prefix
                  display_name: 
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: cfme
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: on_entry
                  display_name: 
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: relationship
                  name: rel1
                  display_name: 
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: meth1
                  display_name: 
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: relationship
                  name: rel5
                  display_name: 
                  datatype: string
                  priority: 5
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: on_exit
                  display_name: 
                  datatype: string
                  priority: 6
                  owner: 
                  default_value: 
                  substitute: true
                  message: create
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
          default.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: default
                inherits: 
                description: 
              fields:
              - meth1:
                  value: vmname
          __methods__:
            vmname.rb: ! "#\n# Description: This is the default vmnaming method\n#
              1. If VM Name was not chosen during dialog processing then use vm_prefix\n#
              \   from dialog else use model and [:environment] tag to generate name\n#
              2. Else use VM name chosen in dialog\n# 3. Then add 3 digit suffix to
              vm_name\n# 4. Added support for dynamic service naming\n#\n\n$evm.log(\"info\",
              \"Detected vmdb_object_type:<#{$evm.root['vmdb_object_type']}>\")\n\nprov
              = $evm.root['miq_provision_request'] || $evm.root['miq_provision'] ||
              $evm.root['miq_provision_request_template']\n\nvm_name = prov.get_option(:vm_name).to_s.strip\nnumber_of_vms_being_provisioned
              = prov.get_option(:number_of_vms)\ndiamethod = prov.get_option(:vm_prefix).to_s.strip\n\n#
              If no VM name was chosen during dialog\nif vm_name.blank? || vm_name
              == 'changeme'\n  vm_prefix = nil\n  vm_prefix ||= $evm.object['vm_prefix']\n
              \ $evm.log(\"info\", \"vm_name from dialog:<#{vm_name.inspect}> vm_prefix
              from dialog:<#{diamethod.inspect}> vm_prefix from model:<#{vm_prefix.inspect}>\")\n\n
              \ # Get Provisioning Tags for VM Name\n  tags = prov.get_tags\n  $evm.log(\"info\",
              \"Provisioning Object Tags: #{tags.inspect}\")\n\n  # Set a Prefix for
              VM Naming\n  if diamethod.blank?\n    vm_name = vm_prefix\n  else\n
              \   vm_name = diamethod\n  end\n  $evm.log(\"info\", \"VM Naming Prefix:
              <#{vm_name}>\")\n\n  # Check :environment tag\n  env = tags[:environment]\n\n
              \ # If environment tag is not nil\n  unless env.nil?\n    $evm.log(\"info\",
              \"Environment Tag: <#{env}> detected\")\n    # Get the first 3 characters
              of the :environment tag\n    env_first = env[0, 3]\n\n    vm_name =
              \ \"#{vm_name}#{env_first}\"\n    $evm.log(\"info\", \"Updating VM Name:
              <#{vm_name}>\")\n  end\n  derived_name = \"#{vm_name}$n{3}\"\nelse\n
              \ if number_of_vms_being_provisioned == 1\n    derived_name = \"#{vm_name}\"\n
              \ else\n    derived_name = \"#{vm_name}$n{3}\"\n  end\nend\n\n$evm.object['vmname']
              = derived_name\n$evm.log(\"info\", \"VM Name: <#{derived_name}>\")\n"
            vmname.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: vmname
                  display_name: default
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
        Profile.class:
          __class__.yaml:
            object_type: class
            version: 1.0
            object:
              attributes:
                description: Profile
                display_name: 
                name: Profile
                type: 
                inherits: 
                visibility: 
                owner: 
              schema:
              - field:
                  aetype: relationship
                  name: vmname
                  display_name: 
                  datatype: string
                  priority: 1
                  owner: 
                  default_value: /Cloud/VM/Provisioning/Naming/Default#create
                  substitute: true
                  message: get_vmname
                  visibility: 
                  collect: /vmname = vmname
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: pre_dialog_name
                  display_name: 
                  datatype: string
                  priority: 2
                  owner: 
                  default_value: 
                  substitute: true
                  message: get_pre_dialog_name
                  visibility: 
                  collect: /dialog_name = pre_dialog_name
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: get_dialog_name
                  display_name: 
                  datatype: string
                  priority: 3
                  owner: 
                  default_value: 
                  substitute: true
                  message: get_state_machine
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: method
                  name: vm_dialog_name_prefix
                  display_name: 
                  datatype: string
                  priority: 4
                  owner: 
                  default_value: vm_dialog_name_prefix
                  substitute: true
                  message: get_dialog_name
                  visibility: 
                  collect: 
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: dialog_name
                  display_name: 
                  datatype: string
                  priority: 5
                  owner: 
                  default_value: ${#dialog_name_prefix}_${/#dialog_input_request_type}
                  substitute: true
                  message: get_dialog_name
                  visibility: 
                  collect: /dialog_name = dialog_name
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: auto_approval_state_machine
                  display_name: 
                  datatype: string
                  priority: 6
                  owner: 
                  default_value: ProvisionRequestApproval
                  substitute: true
                  message: get_auto_approval_state_machine
                  visibility: 
                  collect: /state_machine = auto_approval_state_machine
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: quota_state_machine
                  display_name: 
                  datatype: string
                  priority: 7
                  owner: 
                  default_value: ProvisionRequestQuotaVerification
                  substitute: true
                  message: get_quota_state_machine
                  visibility: 
                  collect: /state_machine = quota_state_machine
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
              - field:
                  aetype: attribute
                  name: state_machine
                  display_name: 
                  datatype: string
                  priority: 8
                  owner: 
                  default_value: VMProvision_${/#miq_provision.target_type}
                  substitute: true
                  message: get_state_machine
                  visibility: 
                  collect: /state_machine = state_machine
                  scope: 
                  description: 
                  condition: 
                  on_entry: 
                  on_exit: 
                  on_error: 
                  max_retries: 
                  max_time: 
          _missing.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: .missing
                inherits: 
                description: 
              fields:
              - vm_dialog_name_prefix:
                  value: Yale
              - dialog_name:
                  value: ${#vm_dialog_name_prefix}_${/#dialog_input_request_type}
          EvmGroup-super_administrator.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: EvmGroup-super_administrator
                inherits: 
                description: 
              fields: []
          Yale-NUS-user_self_service.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: 
                name: Yale-NUS-user_self_service
                inherits: 
                description: 
              fields: []
          YaleNUS-YODA.yaml:
            object_type: instance
            version: 1.0
            object:
              attributes:
                display_name: Yale NUS YODA Project Group Profile
                name: YaleNUS-YODA
                inherits: 
                description: 
              fields:
              - dialog_name:
                  value: Yale_miq_provision_amazon_dialogs_template
          __methods__:
            get_deploy_dialog.rb: ! "#\n# Description: Dynamically choose dialog based
              on Category:environment chosen in pre-dialog\n#\n\n# Set to true to
              dynamically choose dialog name based on environment tag\nrun_env_dialog
              = false\n\nif run_env_dialog\n  # Get incoming environment tags from
              pre-dialog\n  dialog_input_vm_tags = $evm.root['dialog_input_vm_tags']\n\n
              \ # Use a regular expression to grab the environment from the incoming
              tag category\n  # I.e. environment/dev for Category:environment Tag:dev\n
              \ regex = /(.*)(\\/)(\\w*)/i\n\n  # If the regular express matches dynamically
              choose the next dialog\n  if regex =~ dialog_input_vm_tags\n    cat
              = Regexp.last_match[1]\n    tag = Regexp.last_match[3]\n    $evm.log(\"info\",
              \"Category: <#{cat}> Tag: <#{tag}>\")\n    dialog_name = 'miq_provision_dialogs-deploy-#{tag}'\n
              \ end\n  ## Set dialog name in the root object to be picked up by dialogs\n
              \ $evm.root['dialog_name'] = dialog_name\n  $evm.log(\"info\", \"Launching
              <#{dialog_name}>\")\nend\n"
            get_deploy_dialog.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: get_deploy_dialog
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
            vm_dialog_name_prefix.rb: ! "#\n# Description: This is the default method
              to determine the dialog prefix name to use\n#\n\nplatform  = $evm.root['platform']\n$evm.log(\"info\",
              \"Detected Platform:<#{platform}>\")\n\nif platform.nil?\n  source_id
              = $evm.root['dialog_input_src_vm_id']\n  source    = $evm.vmdb('vm_or_template',
              source_id) unless source_id.nil?\n  if source\n    platform = source.model_suffix.downcase\n
              \ else\n    platform = \"vmware\"\n  end\nend\n\ndialog_name_prefix
              = \"yalenus_miq_provision_#{platform}_dialogs\"\ndialog_name_prefix
              = \"yalenus_miq_provision_dialogs\" if platform == \"vmware\"  # For
              Backward Compatibility\n\n$evm.object['dialog_name_prefix'] = dialog_name_prefix\n$evm.log(\"info\",
              \"Platform:<#{platform}> dialog_name_prefix:<#{dialog_name_prefix}>\")\n\nif
              platform == \"amazon\"\n  $evm.log(\"info\", \"Setting EMS Amazon access_key
              and secret key.\")\n  access_key = $evm.vmdb(:ems_amazon).first.authentication_userid\n
              \ secret_key = $evm.vmdb(:ems_amazon).first.authentication_password\n
              \ \n  $evm.root['access_key_id'] = access_key\n  $evm.root['secret_access_key']
              = secret_key\n  \nend\n\n\n"
            vm_dialog_name_prefix.yaml:
              object_type: method
              version: 1.0
              object:
                attributes:
                  name: vm_dialog_name_prefix
                  display_name: 
                  description: 
                  scope: instance
                  language: ruby
                  location: inline
                inputs: []
        StateMachines:
          __namespace__.yaml:
            object_type: namespace
            version: 1.0
            object:
              attributes:
                name: StateMachines
                description: 
                display_name: 
                system: 
                priority: 
                enabled: 
          Methods.class:
            __class__.yaml:
              object_type: class
              version: 1.0
              object:
                attributes:
                  description: 
                  display_name: 
                  name: Methods
                  type: 
                  inherits: 
                  visibility: 
                  owner: 
                schema:
                - field:
                    aetype: relationship
                    name: common_rel1
                    display_name: 
                    datatype: 
                    priority: 1
                    owner: 
                    default_value: 
                    substitute: true
                    message: ! '*'
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: method
                    name: common_meth1
                    display_name: 
                    datatype: string
                    priority: 2
                    owner: 
                    default_value: 
                    substitute: true
                    message: ! '*'
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: relationship
                    name: rel1
                    display_name: 
                    datatype: 
                    priority: 3
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: method
                    name: execute
                    display_name: 
                    datatype: string
                    priority: 4
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: relationship
                    name: amazon_rel1
                    display_name: 
                    datatype: 
                    priority: 5
                    owner: 
                    default_value: 
                    substitute: true
                    message: amazon
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: method
                    name: amazon_meth1
                    display_name: 
                    datatype: string
                    priority: 6
                    owner: 
                    default_value: 
                    substitute: true
                    message: amazon
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: method
                    name: openstack_meth1
                    display_name: 
                    datatype: string
                    priority: 7
                    owner: 
                    default_value: 
                    substitute: true
                    message: openstack
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: relationship
                    name: openstack_rel1
                    display_name: 
                    datatype: 
                    priority: 8
                    owner: 
                    default_value: 
                    substitute: true
                    message: openstack
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
            Add_VM_To_Service.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: Add_VM_To_Service
                  inherits: 
                  description: 
                fields:
                - execute:
                    value: add_vm_to_service
            CheckProvisioned.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: CheckProvisioned
                  inherits: 
                  description: 
                fields:
                - execute:
                    value: check_provisioned
            CustomizeRequest.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: CustomizeRequest
                  inherits: 
                  description: 
                fields:
                - amazon_meth1:
                    value: amazon_CustomizeRequest
                - openstack_meth1:
                    value: openstack_CustomizeRequest
            PostProvision.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: PostProvision
                  inherits: 
                  description: 
                fields:
                - amazon_meth1:
                    value: amazon_PostProvision
                - openstack_meth1:
                    value: openstack_PostProvision
                - openstack_rel1:
                    value: /Integration/OpenStack/Neutron/FloatingIPAttach/GenericInvocation#create
            PreProvision.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: PreProvision
                  inherits: 
                  description: 
                fields:
                - amazon_meth1:
                    value: amazon_PreProvision
                - openstack_meth1:
                    value: openstack_PreProvision
            Provision.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: Provision
                  inherits: 
                  description: 
                fields:
                - execute:
                    value: provision
            __methods__:
              add_vm_to_service.rb: ! "# add_vm_to_service.rb\n#\n# Author: Kevin
                Morey <kmorey@redhat.com>\n# License: GPL v3\n#\n# Description: This
                method adds VMs and Flexed VMs to a service after Post Provisioning
                as well as set VM group ownership\n#\nbegin\n  def log(level, msg,
                update_message=false)\n    $evm.log(level,\"#{msg}\")\n    @task.message
                = msg if @task.respond_to?('message') && update_message\n  end\n\n
                \ def dump_root()\n    $evm.log(:info, \"Begin $evm.root.attributes\")\n
                \   $evm.root.attributes.sort.each { |k, v| log(:info, \"\\t Attribute:
                #{k} = #{v}\")}\n    $evm.log(:info, \"End $evm.root.attributes\")\n
                \   $evm.log(:info, \"\")\n  end\n\n  # basic retry logic\n  def retry_method(retry_time,
                msg='INFO')\n    log(:info, \"#{msg} - Waiting #{retry_time} seconds}\",
                true)\n    $evm.root['ae_result'] = 'retry'\n    $evm.root['ae_retry_interval']
                = retry_time\n    exit MIQ_OK\n  end\n\n  def process_tags(category,
                single_value, tag)\n    # Convert to lower case and replace all non-word
                characters with underscores\n    category_name = category.to_s.downcase.gsub(/\\W/,'_')\n
                \   tag_name = tag.to_s.downcase.gsub(/\\W/,'_')\n\n    # if the category
                exists else create it\n    unless $evm.execute('category_exists?',
                category_name)\n      log(:info, \"Category <#{category_name}> doesn't
                exist, creating category\")\n      $evm.execute('category_create',
                :name => category_name, :single_value => single_value, :description
                => \"#{category}\")\n    end\n    # if the tag exists else create
                it\n    unless $evm.execute('tag_exists?', category_name, tag_name)\n
                \     log(:info, \"Adding new tag <#{tag_name}> in Category <#{category_name}>\")\n
                \     $evm.execute('tag_create', category_name, :name => tag_name,
                :description => \"#{tag}\")\n    end\n  end\n\n  ###############\n
                \ # Start Method\n  ###############\n  log(:info, \"CloudForms Automate
                Method Started\", true)\n  dump_root()\n\n  # Get miq_provision from
                root\n  @task = $evm.root['miq_provision']\n  log(:info, \"Provision:<#{@task.id}>
                Request:<#{@task.miq_provision_request.id}> Type:<#{@task.type}>\")\n\n
                \ vm = @task.vm\n  retry_method(15.seconds, \"Waiting for VM: #{@task.get_option(:vm_target_name)}\")
                if vm.nil?\n\n  ws_values = @task.options.fetch(:ws_values, {})\n
                \ log(:info, \"WS Values: #{ws_values.inspect}\")\n\n  ws_tags = ws_values[:vm_tags]\n
                \n  unless ws_tags.nil?\n    begin\n      vm.tag_assign(\"yale_projects/#{ws_tags}\")\n
                \   rescue => ex\n      log(:info, \"Exception adding tags to VM:
                [#{ws_tags}]\")\n      log(:info, \"#{ex.message}\")\n    end\n  end\n\n
                \   # Add retirement date\n  retirement_date = ws_values[:retires_on]
                \n  unless retirement_date.nil?\n    begin\n      vm.retires_on =
                retirement_date\n    rescue => ex\n      log(:info, \"Exception: adding
                retirement date [#{retirement_date} to VM\")\n      log(:info, \"#{ex.message}\")\n
                \   end\n  end\n      \n  prov_tags = @task.get_tags\n  log(:info,
                \"Inspecting miq_provision tags: #{prov_tags.inspect}\")\n\n  # skip
                this method if a :service_guid and :service_resource_id exist because
                the instance will automatically be added to the service anyway\n  service_guid
                = @task.get_option(:service_guid)\n  service_resource_id = @task.get_option(:service_resource_id)\n
                \ if service_guid.nil? && service_resource_id.nil?\n    unless ws_values[:service_id].blank?\n
                \     # get :service_id from ws_values (This is set during the Build_VMProvisionRequest)\n
                \     service_id = ws_values[:service_id]\n      log(:info, \"Found
                ws_values[:service_id]: #{service_id.inspect}\") unless service_id.nil?\n
                \   end\n\n    unless service_id.nil?\n      # Look up the parent
                service by id\n      parent_service = $evm.vmdb('service').find_by_id(service_id)\n
                \     unless parent_service.nil?\n        # Add vm to the parent service\n
                \       log(:info, \"Adding VM: #{vm.name} to Service: #{parent_service.name}\",
                true)\n        vm.add_to_service(parent_service)\n        log(:info,
                \"Service: #{parent_service.name} vms: #{parent_service.vms.count}
                tags: #{parent_service.tags.inspect}\")\n      end\n    end # if service_guid.nil?
                && service_resource_id.nil?\n  end # service_id.nil?\n\n  # get :group_id
                from @task.options or ws_values (This is set during the Build_VMProvisionRequest)\n
                \ group_id = @task.get_option(:group_id) || ws_values[:group_id]\n
                \ unless group_id.nil?\n    log(:info, \"Found group_id: #{group_id.inspect}\")
                unless group_id.nil?\n    # Look up the group by id\n    group = $evm.vmdb(:miq_group).find_by_id(group_id)\n
                \   unless group.nil?\n      log(:info, \"Assigning ownership for
                group: #{group.description} to VM: #{vm.name}\", true)\n      vm.group
                = group\n    end\n  end\n\n  # Process Flexed VM\n  if ws_values[:flex_reason]\n
                \   parent_vm = $evm.vmdb('vm').find_by_guid(ws_values[:flex_vm_guid])\n
                \   log(:info, \"Found flex parent_vm: #{parent_vm.name}\")\n\n    #
                Add custom attributes on the provisioned VM\n    log(:info, \"Adding
                custom attribute {:flex_reason => #{ws_values[:flex_reason].to_s}}
                to VM: #{vm.name}\", true)\n    vm.custom_set(:flex_reason, ws_values[:flex_reason].to_s)\n
                \   log(:info, \"Adding custom attribute {:flex_vm_name => #{ws_values[:flex_vm_name].to_s}}
                to VM: #{vm.name}\", true)\n    vm.custom_set(:flex_vm_name, ws_values[:flex_vm_name].to_s)\n
                \   log(:info, \"Adding custom attribute {:flex_vm_guid => #{ws_values[:flex_vm_guid].to_s}}
                to VM: #{vm.name}\", true)\n    vm.custom_set(:flex_vm_guid, ws_values[:flex_vm_guid].to_s)\n\n
                \   # Get the flex_current tag and convert it to an integer\n    flex_current
                = parent_vm.tags(:flex_current).first.to_i\n    # Get the flex_pending
                tag and convert it to an integer\n    flex_pending = parent_vm.tags(:flex_pending).first.to_i\n\n
                \   # Never drop below 0\n    unless flex_pending.zero?\n      # Decrement
                flex_pending by 1\n      new_flex_pending = flex_pending - 1\n      #
                Tag parent service with new_flex_pending\n      unless parent_vm.tagged_with?('flex_pending',
                new_flex_pending)\n        # Create flex_pending tags if they do not
                already exist\n        process_tags('flex_pending', true, new_flex_pending)\n
                \       log(:info, \"Assigning tag: {#{flex_pending} => #{new_flex_pending}}
                to parent_vm: #{parent_vm.name}\", true)\n        parent_vm.tag_assign(\"flex_pending/#{new_flex_pending}\")\n
                \     end\n    end\n    # Increment flex_current by 1\n    new_flex_current
                = flex_current + 1\n    # Tag parent service with new_flex_current\n
                \   unless parent_vm.tagged_with?('flex_current', new_flex_current)\n
                \     # Create flex_current tags if they do not already exist\n      process_tags('flex_current',
                true, new_flex_current)\n      log(:info, \"Assigning tag: {:flex_current
                => #{new_flex_current}} to parent_vm: #{parent_vm.name}\", true)\n
                \     parent_vm.tag_assign(\"flex_current/#{new_flex_current}\")\n
                \   end\n  end # if ws_values[:flex_reason]\n\n  ###############\n
                \ # Exit Method\n  ###############\n  log(:info, \"CloudForms Automate
                Method Ended\", true)\n  exit MIQ_OK\n\n  # Set Ruby rescue behavior\nrescue
                => err\n  log(:error, \"#{err.class} #{err}\")\n  log(:error, \"#{err.backtrace.join(\"\\n\")}\")\n
                \ exit MIQ_STOP\nend\n\n"
              add_vm_to_service.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: add_vm_to_service
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              amazon_CustomizeRequest.rb: ! "#\n# Method: process_amazon\n#\n#\n#################################\n\n#
                Method for logging\ndef log(level, message)\n  @method = 'amazon_CustomizeRequest'\n
                \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef dumpRoot\n
                \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                \"\")\nend\n\ndef process_amazon(mapping, prov )\n  # Get information
                from the template platform\n  #  Check for ws_values in prov object\n
                \ if prov.options.has_key?(:ws_values)\n    ws_values = prov.options[:ws_values]\n
                \   log(:info, \"Got Incoming WS_values>\")\n    log(:info, \"ws_values
                #{ws_values}\")\n  end\n\n  template = prov.vm_template\n  log(:info,
                \"Got the template\")\n\n  case mapping\n    when 0\n      # No mapping\n
                \   when 1\n      provider = template.ext_management_system\n      raise
                \"Provider not found for template [#{template.name}\" if provider.nil?\n
                \     \n      log(:info, \"Provider: #{provider.inspect} Flavors:
                #{provider.flavors}\")\n\n       \n      # copy everything blind at
                first, customize later\n      ws_values.each { |k, v| prov.set_option(k,
                v) }\n    \n      flavor = $evm.vmdb(:flavor).find(ws_values[:flavor])\n
                \     prov.set_option(:instance_type, [flavor.id,\"#{flavor.name}':'#{flavor.description}\"])\n\n
                \     #instance_types = provider.flavors\n      #instance_types.each
                do |i|\n      #  log(:info, \"Checking passed in Flavor: [#{ws_values[:flavor]}]
                against Instance Type: [#{i.name}]\")\n\n      #  if i.id ==  ws_values[:flavor]\n
                \     #    prov.set_option(:instance_type, [i.id,\"#{i.name}':'#{i.description}\"])\n
                \     #    log(:info, \"Setting Instance type to: #{i.name}\")\n      #
                \ end\n      #end\n\n      #set Key pair\n      \n      #keypairs
                = provider.key_pairs\n      #log(:info, \"Keypairs: #{keypairs.inspect}:\\nWSvalue:
                cf322}\")\n        \n      #keypairs.each do |k|\n      #  log(:info,
                \"K.name : #{k.name}\")\n      #  if k.name == \"cf322\"\n      #
                \   prov.set_option(:guest_access_key_pair, [k.id, k.name])\n      #
                \   log(:info, \"Setting Access Key type to: #{k.name}\")\n      #
                \ end\n      #end\n\n      availability_zones = provider.availability_zones\n
                \     availability_zones.each do |a|\n      if a.name == ws_values[:availability_zone]\n
                \       log(:info, \"a_zone: id: #{a.id} name: #{a.name}\")\n\n        #current_obj
                = $evm.current\n        #current_obj[\"availability_zone\"] = a\n
                \       prov.set_option(:placement_availability_zone,[a.id, a.name])\n
                \     end\n      \n\n      unless ws_values[:vpc].blank?\n        network
                = $evm.vmdb(\"cloud_network\").find_by_ems_ref(ws_values[:vpc])\n
                \       log(:info, \"network: #{network.inspect} for vpc_id: #{ws_values[:vpc]}\")\n
                \     end\n      unless ws_values[:subnet].blank?\n        subnet
                = $evm.vmdb(\"cloud_subnet\").find_by_ems_ref(ws_values[:subnet])\n
                \       log(:info, \"subnet: #{subnet}\")\n      end\n    \n      \n
                \     # Get customization template for cloud-init\n      customization_template
                = $evm.vmdb(:CustomizationTemplate).find(ws_values[:customization_template_id])\n
                \   \n      unless customization_template.nil?\n        prov.set_customization_template(customization_template)
                rescue nil\n      end\n\n      \n      prov.set_option(:cloud_subnet,
                [subnet.id ,subnet.name]) unless subnet.nil?\n      prov.set_option(:cloud_network,
                [network.id ,network.name]) unless network.nil?\n  \n      prov.set_option(:vm_tags,
                JSON.parse(ws_values[:vm_tags]))\n\n    #unless ws_values[:vm_tags].blank?\n
                \     #  tag = ws_values[:vm_tags]\n      #  prov.set_option(:vm_tags,
                [\"#{tag}\"]) unless tag.nil?\n      #end\n\n        # keypairs =
                provider.key_pairs\n        # keypairs.each do |k|\n        #   if
                k.name ==  ws_values[:guest_access_key_pair]\n        #     prov.set_option(:guest_access_key_pair,
                [k.id,k.name])\n        #     log(:info, \"Setting Access Key type
                to: #{k.name}\")\n        #   end\n\n        #end\n    end # kj\n\n
                \ end # end process_amazon\nend\n\n# Get provisioning object\nprov
                = $evm.root[\"miq_provision\"]\n\n$evm.log(\"info\", \"Yale Domain
                amazon_CustomizeRequest: Provisioning ID:<#{prov.id}> Provision Request
                ID:<#{prov.miq_provision_request.id}> Provision Type: <#{prov.type}>\")\n\n#
                dump root object attributes\ndumpRoot\n\n\nmapping = 1\nprocess_amazon(mapping,
                prov)\n"
              amazon_CustomizeRequest.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: amazon_CustomizeRequest
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              amazon_PostProvision.rb: ! '#

                # Description: This method is used to process tasks immediately after
                the VM has been provisioned

                #


                # Get provisioning object

                prov = $evm.root["miq_provision"]


                $evm.log("info", "Amazon Post Provision: Provisioning ID:<#{prov.id}>
                Provision Request ID:<#{prov.miq_provision_request.id}> Provision
                Type: <#{prov.provision_type}>")

'
              amazon_PostProvision.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: amazon_PostProvision
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              amazon_PreProvision.rb: ! '#

                # Description: This method is used to apply PreProvision customizations
                for Amazon provisioning

                #


                # Get provisioning object

                prov = $evm.root[''miq_provision'']


                $evm.log("info", "Provisioning ID:<#{prov.id}> Provision Request ID:<#{prov.miq_provision_request.id}>
                Provision Type: <#{prov.provision_type}>")

'
              amazon_PreProvision.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: amazon_PreProvision
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              amazon_PreProvision_Clone_to_VM.rb: ! '#

                # Description: This method is used to apply PreProvision customizations
                during the cloning to a VM:

                #


                # Get provisioning object

                prov = $evm.root["miq_provision"]


                $evm.log("info", "Provisioning ID:<#{prov.id}> Provision Request ID:<#{prov.miq_provision_request.id}>
                Provision Type: <#{prov.provision_type}>")

'
              amazon_PreProvision_Clone_to_VM.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: amazon_PreProvision_Clone_to_VM
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              check_provisioned.rb: ! "#\n# Description: This method checks to see
                if the vm has been provisioned\n#\n# Get current provisioning status\ntask
                = $evm.root['miq_provision']\ntask_status = task['status']\nresult
                = task.status\n\n$evm.log('info', \"ProvisionCheck returned <#{result}>
                for state <#{task.state}> and status <#{task_status}>\")\n\ncase result\nwhen
                'error'\n  $evm.root['ae_result'] = 'error'\n  reason = $evm.root['miq_provision'].message\n
                \ reason = reason[7..-1] if reason[0..6] == 'Error: '\n  $evm.root['ae_reason']
                = reason\nwhen 'retry'\n  $evm.root['ae_result']         = 'retry'\n
                \ $evm.root['ae_retry_interval'] = '1.minute'\nwhen 'ok'\n  # Bump
                State\n  $evm.root['ae_result'] = 'ok'\nend\n"
              check_provisioned.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: check_provisioned
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              openstack_CustomizeRequest.rb: ! "#\n# Description: This method is used
                to Customize the Openstack Provisioning Request\n#\n\n###### TRACERS
                ######\n# Method for logging\ndef log(level, message)\n  @method =
                'openstack_CustomizeRequest'\n  $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef
                info(message)\n  log(:info, message)\nend\n\ndef dump_root\n  log(:info,
                \"Root:<$evm.root> Attributes - Begin\")\n  $evm.root.attributes.sort.each
                { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }\n  log(:info,
                \"Root:<$evm.root> Attributes - End\")\n  log(:info, \"\")\nend\n\ndef
                dump_attributes(object)\n  log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")\n
                \ object.attributes.sort.each { |k, v| log(:info, \"CUSTOM    #{k}
                = #{v.inspect}\") }\n  log(:info, \"CUSTOM  End Attributes [object.attributes]\")\n
                \ log(:info, \"\")\nend\n###### TRACERS ######\n\ninfo(\"openstack_CustomizeRequest
                Automate Method Started\")\n\nrequire 'json'\n\n# Get provisioning
                object\nprov = $evm.root[\"miq_provision\"]\n\nws_values = prov.get_option(:ws_values)\n\n#
                Check that we have :ws_values\nunless ws_values.nil?\n  \n  # copy
                everything blind at first, customize later\n  ws_values.each { |k,
                v| prov.set_option(k, v) }\n  \n  # Get the VM size\n  flavor_id =
                ws_values[:instance_type]\n  flavor = $evm.vmdb(:flavor).find_by_id(flavor_id)\n\n
                \ # Get number of VMs\n  no_of_vms = prov.get_option(:dialog_vm_qty)\n\n
                \ # Set up the VM name\n  vm_name = \"[#{ prov.get_option(:dialog_app_name)
                }] #{ prov.get_option(:dialog_vm_name) }\"\n\n  # Get customization
                template for cloud-init\n  customization_template = $evm.vmdb(:CustomizationTemplate).find(ws_values[:customization_template_id])\n
                \ \n  prov.set_option(:vm_tags, ws_values[:project])\n  prov.set_option(:instance_type,
                [flavor.id, flavor.name])\n\n  prov.set_option(:vm_tags, JSON.parse(ws_values[:vm_tags]))\n
                \ prov.set_option(:placement_auto, JSON.parse(ws_values[:placement_auto]))\n
                \ prov.set_option(:placement_availability_zone, JSON.parse(ws_values[:placement_availability_zone]))\n
                \ prov.set_option(:cloud_tenant, JSON.parse(ws_values[:cloud_tenant]))\n
                \ prov.set_option(:cloud_network, JSON.parse(ws_values[:cloud_network]))\n
                \ prov.set_option(:security_groups, JSON.parse(ws_values[:security_groups]))\n
                \ prov.set_customization_template(customization_template) rescue nil\n
                \ \n  # push the dialog options in as well\nend\n\ndump_attributes(prov)\n\ninfo(\"Provisioning
                ID:<#{prov.id}> Provision Request ID:<#{prov.miq_provision_request.id}>
                Provision Type: <#{prov.provision_type}>\")\n"
              openstack_CustomizeRequest.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: openstack_CustomizeRequest
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              openstack_PostProvision.rb: ! '#

                # Description: This method is used to process tasks immediately after
                the VM has been provisioned

                #


                # Get provisioning object

                prov = $evm.root["miq_provision"]


                ######################

                # MODIFY THIS LINE TO DEFINE WHICH FLOATING IP POOL IS USED BY DEFAULT
                TO ASSIGN IPS ON PROVISIONING.

                ######################

                $evm.root["/Integration/OpenStack/Neutron/FloatingIPAttach/floating_pool_name"]
                = "public"


                # Populate VM ID for floating IP allocation.

                $evm.root["/Integration/OpenStack/Neutron/FloatingIPAttach/vm_id"]
                = prov.vm.id


                $evm.log("info", "Provisioning ID:<#{prov.id}> Provision Request ID:<#{prov.miq_provision_request.id}>
                Provision Type: <#{prov.provision_type}>")

'
              openstack_PostProvision.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: openstack_PostProvision
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              openstack_PreProvision.rb: ! '#

                # Description: This method is used to apply PreProvision customizations
                for Openstack provisioning

                #


                # Get provisioning object

                prov = $evm.root[''miq_provision'']


                $evm.log("info", "Provisioning ID:<#{prov.id}> Provision Request ID:<#{prov.miq_provision_request.id}>
                Provision Type: <#{prov.provision_type}>")

'
              openstack_PreProvision.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: openstack_PreProvision
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              openstack_PreProvision_Clone_to_VM.rb: ! '#

                # Description: This method is used to apply PreProvision customizations
                during the cloning to a VM:

                #


                # Get provisioning object

                prov = $evm.root["miq_provision"]


                $evm.log("info", "Provisioning ID:<#{prov.id}> Provision Request ID:<#{prov.miq_provision_request.id}>
                Provision Type: <#{prov.provision_type}>")

'
              openstack_PreProvision_Clone_to_VM.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: openstack_PreProvision_Clone_to_VM
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              provision.rb: ! '#

                # Description: This method launches the provisioning job

                #


                $evm.root["miq_provision"].execute

'
              provision.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: provision
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              scan.rb: ! "#\n# Description: This method performs SmartState analysis
                on a VM\n#\n\nvm = $evm.root['vm']\nunless vm.nil?\n  ems = vm.ext_management_system\n
                \ $evm.log('info', \"Starting Scan of VM <#{vm.name}> in VC <#{ems
                ? ems.name : nil}\")\n  vm.scan\nend\n"
              scan.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: scan
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
          Methods-Archive.class:
            __class__.yaml:
              object_type: class
              version: 1.0
              object:
                attributes:
                  description: 
                  display_name: 
                  name: Methods-Archive
                  type: 
                  inherits: 
                  visibility: 
                  owner: 
                schema:
                - field:
                    aetype: relationship
                    name: common_rel1
                    display_name: 
                    datatype: 
                    priority: 1
                    owner: 
                    default_value: 
                    substitute: true
                    message: ! '*'
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: method
                    name: common_meth1
                    display_name: 
                    datatype: string
                    priority: 2
                    owner: 
                    default_value: 
                    substitute: true
                    message: ! '*'
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: relationship
                    name: rel1
                    display_name: 
                    datatype: 
                    priority: 3
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: method
                    name: execute
                    display_name: 
                    datatype: string
                    priority: 4
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: relationship
                    name: amazon_rel1
                    display_name: 
                    datatype: 
                    priority: 5
                    owner: 
                    default_value: 
                    substitute: true
                    message: amazon
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: method
                    name: amazon_meth1
                    display_name: 
                    datatype: string
                    priority: 6
                    owner: 
                    default_value: 
                    substitute: true
                    message: amazon
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: relationship
                    name: openstack_rel1
                    display_name: 
                    datatype: 
                    priority: 7
                    owner: 
                    default_value: 
                    substitute: true
                    message: openstack
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: method
                    name: openstack_meth1
                    display_name: 
                    datatype: string
                    priority: 8
                    owner: 
                    default_value: 
                    substitute: true
                    message: openstack
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
            Add_VM_To_Service.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: Add_VM_To_Service
                  name: Add_VM_To_Service
                  inherits: 
                  description: 
                fields:
                - execute:
                    value: add_vm_to_service
            AssignFloatingIP.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: Assign Floating IP
                  name: AssignFloatingIP
                  inherits: 
                  description: 
                fields:
                - amazon_meth1:
                    value: amazon_AssignFloatingIP
                - openstack_meth1:
                    value: openstack_AssignFloatingIP
            CheckProvisioned.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: CheckProvisioned
                  inherits: 
                  description: 
                fields:
                - execute:
                    value: check_provisioned
            CreateNewDisk.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: Create New Disk
                  name: CreateNewDisk
                  inherits: 
                  description: 
                fields:
                - amazon_meth1:
                    value: amazon_CreateNewDisk
                - openstack_meth1:
                    value: openstack_CreateNewDisk
            CustomizeRequest.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: CustomizeRequest
                  inherits: 
                  description: 
                fields:
                - amazon_meth1:
                    value: amazon_CustomizeRequest
                - openstack_meth1:
                    value: openstack_CustomizeRequest
            PostProvision.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: PostProvision
                  inherits: 
                  description: 
                fields:
                - amazon_meth1:
                    value: amazon_PostProvision
                - openstack_meth1:
                    value: openstack_PostProvision
            PreProvision.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: PreProvision
                  inherits: 
                  description: 
                fields:
                - amazon_meth1:
                    value: amazon_PreProvision
                - openstack_meth1:
                    value: openstack_PreProvision
            Provision.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: Provision
                  inherits: 
                  description: 
                fields:
                - execute:
                    value: provision
            ReleaseFloatingIP.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: Release Floating IP
                  name: ReleaseFloatingIP
                  inherits: 
                  description: 
                fields:
                - amazon_meth1:
                    value: amazon_ReleaseFloatingIP
                - openstack_meth1:
                    value: openstack_ReleaseFloatingIP
            __methods__:
              add_vm_to_service.rb: ! "# add_vm_to_service.rb\r\n#\r\n# Author: Kevin
                Morey <kmorey@redhat.com>\r\n# License: GPL v3\r\n#\r\n# Description:
                This method adds VMs and Flexed VMs to a service after Post Provisioning
                as well as set VM group ownership\r\n#\r\nbegin\r\n  def log(level,
                msg, update_message=false)\r\n    $evm.log(level,\"#{msg}\")\r\n    @task.message
                = msg if @task.respond_to?('message') && update_message\r\n  end\r\n\r\n
                \ def dump_root()\r\n    $evm.log(:info, \"Begin $evm.root.attributes\")\r\n
                \   $evm.root.attributes.sort.each { |k, v| log(:info, \"\\t Attribute:
                #{k} = #{v}\")}\r\n    $evm.log(:info, \"End $evm.root.attributes\")\r\n
                \   $evm.log(:info, \"\")\r\n  end\r\n\r\n  # basic retry logic\r\n
                \ def retry_method(retry_time, msg='INFO')\r\n    log(:info, \"#{msg}
                - Waiting #{retry_time} seconds}\", true)\r\n    $evm.root['ae_result']
                = 'retry'\r\n    $evm.root['ae_retry_interval'] = retry_time\r\n    exit
                MIQ_OK\r\n  end\r\n\r\n  def process_tags(category, single_value,
                tag)\r\n    # Convert to lower case and replace all non-word characters
                with underscores\r\n    category_name = category.to_s.downcase.gsub(/\\W/,'_')\r\n
                \   tag_name = tag.to_s.downcase.gsub(/\\W/,'_')\r\n\r\n    # if the
                category exists else create it\r\n    unless $evm.execute('category_exists?',
                category_name)\r\n      log(:info, \"Category <#{category_name}> doesn't
                exist, creating category\")\r\n      $evm.execute('category_create',
                :name => category_name, :single_value => single_value, :description
                => \"#{category}\")\r\n    end\r\n    # if the tag exists else create
                it\r\n    unless $evm.execute('tag_exists?', category_name, tag_name)\r\n
                \     log(:info, \"Adding new tag <#{tag_name}> in Category <#{category_name}>\")\r\n
                \     $evm.execute('tag_create', category_name, :name => tag_name,
                :description => \"#{tag}\")\r\n    end\r\n  end\r\n\r\n  ###############\r\n
                \ # Start Method\r\n  ###############\r\n  log(:info, \"CloudForms
                Automate Method Started\", true)\r\n  dump_root()\r\n\r\n  # Get miq_provision
                from root\r\n  @task = $evm.root['miq_provision']\r\n  log(:info,
                \"Provision:<#{@task.id}> Request:<#{@task.miq_provision_request.id}>
                Type:<#{@task.type}>\")\r\n\r\n  vm = @task.vm\r\n  retry_method(15.seconds,
                \"Waiting for VM: #{@task.get_option(:vm_target_name)}\") if vm.nil?\r\n\r\n
                \ ws_values = @task.options.fetch(:ws_values, {})\r\n  log(:info,
                \"WS Values: #{ws_values.inspect}\")\r\n\r\n  ws_tags = ws_values[:vm_tags]\r\n
                \r\n  unless ws_tags.nil?\r\n    begin\r\n      vm.tag_assign(\"yale_projects/#{ws_tags}\")\r\n
                \   rescue => ex\r\n      puts \"Exception adding tags to VM\"\r\n
                \     puts ex.message\r\n    end\r\n  end\r\n\r\n  prov_tags = @task.get_tags\r\n
                \ log(:info, \"Inspecting miq_provision tags: #{prov_tags.inspect}\")\r\n\r\n
                \ # skip this method if a :service_guid and :service_resource_id exist
                because the instance will automatically be added to the service anyway\r\n
                \ service_guid = @task.get_option(:service_guid)\r\n  service_resource_id
                = @task.get_option(:service_resource_id)\r\n  if service_guid.nil?
                && service_resource_id.nil?\r\n    unless ws_values[:service_id].blank?\r\n
                \     # get :service_id from ws_values (This is set during the Build_VMProvisionRequest)\r\n
                \     service_id = ws_values[:service_id]\r\n      log(:info, \"Found
                ws_values[:service_id]: #{service_id.inspect}\") unless service_id.nil?\r\n
                \   end\r\n\r\n    unless service_id.nil?\r\n      # Look up the parent
                service by id\r\n      parent_service = $evm.vmdb('service').find_by_id(service_id)\r\n
                \     unless parent_service.nil?\r\n        # Add vm to the parent
                service\r\n        log(:info, \"Adding VM: #{vm.name} to Service:
                #{parent_service.name}\", true)\r\n        vm.add_to_service(parent_service)\r\n
                \       log(:info, \"Service: #{parent_service.name} vms: #{parent_service.vms.count}
                tags: #{parent_service.tags.inspect}\")\r\n      end\r\n    end #
                if service_guid.nil? && service_resource_id.nil?\r\n  end # service_id.nil?\r\n\r\n
                \ # get :group_id from @task.options or ws_values (This is set during
                the Build_VMProvisionRequest)\r\n  group_id = @task.get_option(:group_id)
                || ws_values[:group_id]\r\n  unless group_id.nil?\r\n    log(:info,
                \"Found group_id: #{group_id.inspect}\") unless group_id.nil?\r\n
                \   # Look up the group by id\r\n    group = $evm.vmdb(:miq_group).find_by_id(group_id)\r\n
                \   unless group.nil?\r\n      log(:info, \"Assigning ownership for
                group: #{group.description} to VM: #{vm.name}\", true)\r\n      vm.group
                = group\r\n    end\r\n  end\r\n\r\n  # Process Flexed VM\r\n  if ws_values[:flex_reason]\r\n
                \   parent_vm = $evm.vmdb('vm').find_by_guid(ws_values[:flex_vm_guid])\r\n
                \   log(:info, \"Found flex parent_vm: #{parent_vm.name}\")\r\n\r\n
                \   # Add custom attributes on the provisioned VM\r\n    log(:info,
                \"Adding custom attribute {:flex_reason => #{ws_values[:flex_reason].to_s}}
                to VM: #{vm.name}\", true)\r\n    vm.custom_set(:flex_reason, ws_values[:flex_reason].to_s)\r\n
                \   log(:info, \"Adding custom attribute {:flex_vm_name => #{ws_values[:flex_vm_name].to_s}}
                to VM: #{vm.name}\", true)\r\n    vm.custom_set(:flex_vm_name, ws_values[:flex_vm_name].to_s)\r\n
                \   log(:info, \"Adding custom attribute {:flex_vm_guid => #{ws_values[:flex_vm_guid].to_s}}
                to VM: #{vm.name}\", true)\r\n    vm.custom_set(:flex_vm_guid, ws_values[:flex_vm_guid].to_s)\r\n\r\n
                \   # Get the flex_current tag and convert it to an integer\r\n    flex_current
                = parent_vm.tags(:flex_current).first.to_i\r\n    # Get the flex_pending
                tag and convert it to an integer\r\n    flex_pending = parent_vm.tags(:flex_pending).first.to_i\r\n\r\n
                \   # Never drop below 0\r\n    unless flex_pending.zero?\r\n      #
                Decrement flex_pending by 1\r\n      new_flex_pending = flex_pending
                - 1\r\n      # Tag parent service with new_flex_pending\r\n      unless
                parent_vm.tagged_with?('flex_pending', new_flex_pending)\r\n        #
                Create flex_pending tags if they do not already exist\r\n        process_tags('flex_pending',
                true, new_flex_pending)\r\n        log(:info, \"Assigning tag: {#{flex_pending}
                => #{new_flex_pending}} to parent_vm: #{parent_vm.name}\", true)\r\n
                \       parent_vm.tag_assign(\"flex_pending/#{new_flex_pending}\")\r\n
                \     end\r\n    end\r\n    # Increment flex_current by 1\r\n    new_flex_current
                = flex_current + 1\r\n    # Tag parent service with new_flex_current\r\n
                \   unless parent_vm.tagged_with?('flex_current', new_flex_current)\r\n
                \     # Create flex_current tags if they do not already exist\r\n
                \     process_tags('flex_current', true, new_flex_current)\r\n      log(:info,
                \"Assigning tag: {:flex_current => #{new_flex_current}} to parent_vm:
                #{parent_vm.name}\", true)\r\n      parent_vm.tag_assign(\"flex_current/#{new_flex_current}\")\r\n
                \   end\r\n  end # if ws_values[:flex_reason]\r\n\r\n  ###############\r\n
                \ # Exit Method\r\n  ###############\r\n  log(:info, \"CloudForms
                Automate Method Ended\", true)\r\n  exit MIQ_OK\r\n\r\n  # Set Ruby
                rescue behavior\r\nrescue => err\r\n  log(:error, \"#{err.class} #{err}\")\r\n
                \ log(:error, \"#{err.backtrace.join(\"\\n\")}\")\r\n  exit MIQ_STOP\r\nend\r\n\r\n"
              add_vm_to_service.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: add_vm_to_service
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              amazon_CustomizeRequest.rb: ! "#\n# Method: process_amazon\n#\n#\n#################################\n\n#
                Method for logging\ndef log(level, message)\n  @method = 'amazon_CustomizeRequest'\n
                \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef dumpRoot\n
                \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                \"\")\nend\n\ndef process_amazon(mapping, prov )\n# Get information
                from the template platform\n# Check for ws_values in prov object\n
                \ if prov.options.has_key?(:ws_values)\n    ws_values = prov.options[:ws_values]\n
                \   log(:info, \"Got Incoming WS_values>\")\n    log(:info, \"ws_values
                #{ws_values}\")\n  end\n\n  template = prov.vm_template\n  log(:info,
                \"Got the template\")\n\n  case mapping\n    when 0\n      # No mapping\n
                \   when 1\n      provider = template.ext_management_system\n      raise
                \"Provider not found for template [#{template.name}\" if provider.nil?\n
                \     instance_types = provider.flavors\n      instance_types.each
                do |i|\n        if i.name ==  ws_values[:flavor]\n          puts \"Checking
                passed in Flavor: [#{ws_values[:flavor]}] against Instance Type: [#{i.name}]\"\n
                \         prov.set_option(:instance_type, [i.id,\"#{i.name}':'#{i.description}\"])\n
                \         log(:info, \"Setting Instance type to: #{i.name}\")\n        end\n
                \     end\n\n    #set Key pair\n      \n    keypairs = provider.key_pairs\n
                \   log(:info, \"Keypairs: #{keypairs.inspect}:\\nWSvalue: cf322}\")\n
                \       \n    keypairs.each do |k|\n        log(:info, \"K.name :
                #{k.name}\")\n        if k.name == \"cf322\"\n          prov.set_option(:guest_access_key_pair,
                [k.id, k.name])\n          log(:info, \"Setting Access Key type to:
                #{k.name}\")\n        end\n      end\n\n      availability_zones =
                provider.availability_zones\n      availability_zones.each do |a|\n
                \       if a.name == ws_values[:availability_zone]\n          log(:info,
                \"a_zone: id: #{a.id} name: #{a.name}\")\n\n          #current_obj
                = $evm.current\n          #current_obj[\"availability_zone\"] = a\n
                \         prov.set_option(:placement_availability_zone,[a.id, a.name])\n
                \       end\n      end\n\n      unless ws_values[:vpc].blank?\n        network
                = $evm.vmdb(\"cloud_network\").find_by_ems_ref(ws_values[:vpc])\n
                \       log(:info, \"network: #{network.inspect} for vpc_id: #{ws_values[:vpc]}\")\n
                \     end\n      unless ws_values[:vpc].blank?\n        subnet = $evm.vmdb(\"cloud_subnet\").find_by_ems_ref(ws_values[:subnet_id])\n
                \       log(:info, \"subnet: #{subnet}\")\n      end\n      prov.set_option(:cloud_subnet,
                [subnet.id ,subnet.name]) unless subnet.nil?\n      prov.set_option(:cloud_network,
                [network.id ,network.name]) unless network.nil?\n  \n      #unless
                ws_values[:vm_tags].blank?\n      #  tag = ws_values[:vm_tags]\n      #
                \ prov.set_option(:vm_tags, [\"#{tag}\"]) unless tag.nil?\n      #end\n\n
                \       # keypairs = provider.key_pairs\n        # keypairs.each do
                |k|\n        #   if k.name ==  ws_values[:guest_access_key_pair]\n
                \       #     prov.set_option(:guest_access_key_pair, [k.id,k.name])\n
                \       #     log(:info, \"Setting Access Key type to: #{k.name}\")\n
                \       #   end\n\n        #end\n    end\n\n  end # end process_amazon\n\n#
                Get provisioning object\nprov = $evm.root[\"miq_provision\"]\n\n$evm.log(\"info\",
                \"Yale Domain amazon_CustomizeRequest: Provisioning ID:<#{prov.id}>
                Provision Request ID:<#{prov.miq_provision_request.id}> Provision
                Type: <#{prov.type}>\")\n\n# dump root object attributes\ndumpRoot\n\n\nmapping
                = 1\nprocess_amazon(mapping, prov)\n"
              amazon_CustomizeRequest.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: amazon_CustomizeRequest
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              amazon_PostProvision.rb: ! "#\r\n# Description: This method is used
                to process tasks immediately after the VM has been provisioned\r\n#\r\n\r\n#
                Get provisioning object\r\nprov = $evm.root[\"miq_provision\"]\r\n\r\n$evm.log(\"info\",
                \"Provisioning ID:<#{prov.id}> Provision Request ID:<#{prov.miq_provision_request.id}>
                Provision Type: <#{prov.provision_type}>\")\r\n\r\n\r\n"
              amazon_PostProvision.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: amazon_PostProvision
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              amazon_PreProvision.rb: ! '#

                # Description: This method is used to apply PreProvision customizations
                for Amazon provisioning

                #


                # Get provisioning object

                prov = $evm.root[''miq_provision'']


                $evm.log("info", "Provisioning ID:<#{prov.id}> Provision Request ID:<#{prov.miq_provision_request.id}>
                Provision Type: <#{prov.provision_type}>")

'
              amazon_PreProvision.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: amazon_PreProvision
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              amazon_PreProvision_Clone_to_VM.rb: ! '#

                # Description: This method is used to apply PreProvision customizations
                during the cloning to a VM:

                #


                # Get provisioning object

                prov = $evm.root["miq_provision"]


                $evm.log("info", "Provisioning ID:<#{prov.id}> Provision Request ID:<#{prov.miq_provision_request.id}>
                Provision Type: <#{prov.provision_type}>")

'
              amazon_PreProvision_Clone_to_VM.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: amazon_PreProvision_Clone_to_VM
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              check_provisioned.rb: ! "#\n# Description: This method checks to see
                if the vm has been provisioned\n#\n# Get current provisioning status\ntask
                = $evm.root['miq_provision']\ntask_status = task['status']\n#result
                = task.statemachine_task_status\nresult = task.status\n\n$evm.log('info',
                \"ProvisionCheck returned <#{result}> for state <#{task.state}> and
                status <#{task_status}>\")\n\ncase result\nwhen 'error'\n  $evm.root['ae_result']
                = 'error'\n  reason = $evm.root['miq_provision'].message\n  reason
                = reason[7..-1] if reason[0..6] == 'Error: '\n  $evm.root['ae_reason']
                = reason\nwhen 'retry'\n  $evm.root['ae_result']         = 'retry'\n
                \ $evm.root['ae_retry_interval'] = '1.minute'\nwhen 'ok'\n  # Bump
                State\n  $evm.root['ae_result'] = 'ok'\nend\n"
              check_provisioned.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: check_provisioned
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              openstack_AssignFloatingIP.rb: ! "#\n# Description: This method is used
                to Assign a Public IP to an OpenStack Instance\n#\n\n###### TRACERS
                ######\n# Method for logging\ndef log(level, message)\n  @method =
                'assign_floating_ip'\n  $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef
                info(message)\n  log(:info, message)\nend\n\ndef dump_root\n  log(:info,
                \"Root:<$evm.root> Attributes - Begin\")\n  $evm.root.attributes.sort.each
                { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }\n  log(:info,
                \"Root:<$evm.root> Attributes - End\")\n  log(:info, \"\")\nend\n\ndef
                dump_attributes(object)\n  log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")\n
                \ object.attributes.sort.each { |k, v| log(:info, \"CUSTOM    #{k}
                = #{v.inspect}\") }\n  log(:info, \"CUSTOM  End Attributes [object.attributes]\")\n
                \ log(:info, \"\")\nend\n###### TRACERS ######\n\ninfo(\"Automate
                Method Started\")\n\nrequire 'fog'\n\ndef has_public_ip(fog_vm)\n
                \ # assumes only one network interface.\n  addresses = fog_vm.addresses.values[0]\n
                \ floating_ips = addresses.select { |address| address['OS-EXT-TYPE:type']=='floating'
                }\n  if floating_ips.length > 0\n    return true\n  end\n  return
                false\nend\n\n\nvm = $evm.root['vm']\nems = vm.ext_management_system\n\n#
                Set up Fog connection to Openstack.\nos_user_id = ems.authentication_userid\nos_password
                = ems.authentication_password\nos_auth_url = \"http://#{ ems.hostname
                }:#{ ems.port }/v2.0/tokens\"\nos_tenant = ems.cloud_tenants.find(vm.cloud_tenant_id).first.name\ncompute
                = Fog::Compute.new({:provider => ems.emstype,\n                            :openstack_username
                => os_user_id,\n                            :openstack_api_key =>
                os_password,\n                            :openstack_auth_url => os_auth_url,\n
                \                           :openstack_tenant => os_tenant})\n\n\nif
                has_public_ip(fog_vm)\n  info(\"VM already has a public IP!\")\n  exit
                MIQ_ABORT\nend\n\n# Get an unattached floating IP or create one if
                all are attached.\nfog_floating_ip = compute.addresses.select { |a|
                a.instance_id == nil }.first\nif fog_floating_ip == nil\n  # exception
                handling req here if not able to allocate address.\n  begin\n    fog_floating_ip
                = compute.allocate_address\n  rescue\n    exit MIQ_ABORT\n  end\nend\n\n#
                Get the VM in Fog and attach the Floating IP.\nfog_vm = compute.servers.select
                { |s| s.id == vm.uid_ems }.first\nfog_vm.associate_address(fog_floating_ip.ip)\n\n#
                After association, refresh VMDB's info on the VM\nvm.refresh\n\ninfo(\"Automate
                Method Ended\")\n\nexit MIQ_OK\n"
              openstack_AssignFloatingIP.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: openstack_AssignFloatingIP
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              openstack_CreateNewDisk.rb: ! "#\n# Description: This method is used
                to create a new volume and attach to an OpenStack Instance\n#\n\n######
                TRACERS ######\n# Method for logging\ndef log(level, message)\n  @method
                = 'assign_floating_ip'\n  $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef
                info(message)\n  log(:info, message)\nend\n\ndef dump_root\n  log(:info,
                \"Root:<$evm.root> Attributes - Begin\")\n  $evm.root.attributes.sort.each
                { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }\n  log(:info,
                \"Root:<$evm.root> Attributes - End\")\n  log(:info, \"\")\nend\n\ndef
                dump_attributes(object)\n  log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")\n
                \ object.attributes.sort.each { |k, v| log(:info, \"CUSTOM    #{k}
                = #{v.inspect}\") }\n  log(:info, \"CUSTOM  End Attributes [object.attributes]\")\n
                \ log(:info, \"\")\nend\n###### TRACERS ######\n\ninfo(\"Automate
                Method Started\")\n\nrequire 'fog'\n\ndef create_new_vol_attachment_path(fog_vm)\n
                \ # assumes each VM will have no more than 25 volume attachments.\n
                \ possible_suffixes = ('b'..'z').to_set\n  reserved_letters = fog_vm.volume_attachments.collect
                { |a| a['device'][-1] }\n  usable_suffixes = possible_suffixes - reserved_letters\n
                \ return '/dev/vd' + usable_suffixes.first\nend\n\n\ndump_root\n\n#
                Retrieve volume creation options.\nname = $evm.root.attributes['dialog_name'].to_s\nsize
                = $evm.root.attributes['dialog_size'].to_s\ndescription = $evm.root.attributes['dialog_description'].to_s\ninfo(\"Disk
                name: #{ name }\")\ninfo(\"Disk size: #{ size }\")\ninfo(\"Disk description:
                #{ description }\")\n\nvm = $evm.root['vm']\nems = vm.ext_management_system\n\n#
                Set up Fog connection to Openstack.\nos_user_id = ems.authentication_userid\nos_password
                = ems.authentication_password\nos_auth_url = \"http://#{ ems.hostname
                }:#{ ems.port }/v2.0/tokens\"\nos_tenant = ems.cloud_tenants.find(vm.cloud_tenant_id).first.name\ncompute
                = Fog::Compute.new({:provider => ems.emstype,\n                            :openstack_username
                => os_user_id,\n                            :openstack_api_key =>
                os_password,\n                            :openstack_auth_url => os_auth_url,\n
                \                           :openstack_tenant => os_tenant})\n\n#
                Create desired volume.\nvol = compute.create_volume(name,\n                            description,\n
                \                           size,\n                            { 'availability_zone'
                => vm.availability_zone.ems_ref })\nvol_id = vol.body['volume']['id']\n\n#
                Attach to the VM.\nfog_vm = compute.servers.select { |s| s.id == vm.uid_ems
                }.first\ndev_path = create_new_vol_attachment_path(fog_vm)\ncompute.attach_volume(vol_id,
                vm.ems_ref, dev_path)\n\n# After release, refresh VMDB's info on the
                VM\nvm.refresh\n\ninfo(\"Automate Method Ended\")\n\nexit MIQ_OK\n"
              openstack_CreateNewDisk.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: openstack_CreateNewDisk
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              openstack_CustomizeRequest.rb: ! "#\n# Description: This method is used
                to Customize the Openstack Provisioning Request\n#\n\n###### TRACERS
                ######\n# Method for logging\ndef log(level, message)\n  @method =
                'openstack_CustomizeRequest'\n  $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef
                info(message)\n  log(:info, message)\nend\n\ndef dump_root\n  log(:info,
                \"Root:<$evm.root> Attributes - Begin\")\n  $evm.root.attributes.sort.each
                { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }\n  log(:info,
                \"Root:<$evm.root> Attributes - End\")\n  log(:info, \"\")\nend\n\ndef
                dump_attributes(object)\n  log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")\n
                \ object.attributes.sort.each { |k, v| log(:info, \"CUSTOM    #{k}
                = #{v.inspect}\") }\n  log(:info, \"CUSTOM  End Attributes [object.attributes]\")\n
                \ log(:info, \"\")\nend\n###### TRACERS ######\n\ninfo(\"openstack_CustomizeRequest
                Automate Method Started\")\n\nrequire 'json'\n\n# Get provisioning
                object\nprov = $evm.root[\"miq_provision\"]\n\nws_values = prov.get_option(:ws_values)\n\n#
                Check that we have :ws_values\nunless ws_values.nil?\n  \n  # copy
                everything blind at first, customize later\n  ws_values.each { |k,
                v| prov.set_option(k, v) }\n  \n  # Get the VM size\n  flavor_id =
                ws_values[:instance_type]\n  flavor = $evm.vmdb(:flavor).find_by_id(flavor_id)\n\n
                \ # Get number of VMs\n  no_of_vms = prov.get_option(:dialog_vm_qty)\n\n
                \ # Set up the VM name\n  vm_name = \"[#{ prov.get_option(:dialog_app_name)
                }] #{ prov.get_option(:dialog_vm_name) }\"\n\n  # Get customization
                template for cloud-init\n  customization_template = $evm.vmdb(:CustomizationTemplate).find(ws_values[:customization_template_id])\n
                \ \n  prov.set_option(:vm_tags, ws_values[:project])\n  prov.set_option(:instance_type,
                [flavor.id, flavor.name])\n\n  prov.set_option(:vm_tags, JSON.parse(ws_values[:vm_tags]))\n
                \ prov.set_option(:placement_auto, JSON.parse(ws_values[:placement_auto]))\n
                \ prov.set_option(:placement_availability_zone, JSON.parse(ws_values[:placement_availability_zone]))\n
                \ prov.set_option(:cloud_tenant, JSON.parse(ws_values[:cloud_tenant]))\n
                \ prov.set_option(:cloud_network, JSON.parse(ws_values[:cloud_network]))\n
                \ prov.set_option(:security_groups, JSON.parse(ws_values[:security_groups]))\n
                \ prov.set_customization_template(customization_template) rescue nil\n
                \ \n  # push the dialog options in as well\nend\n\ndump_attributes(prov)\n\ninfo(\"Provisioning
                ID:<#{prov.id}> Provision Request ID:<#{prov.miq_provision_request.id}>
                Provision Type: <#{prov.provision_type}>\")\n"
              openstack_CustomizeRequest.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: openstack_CustomizeRequest
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
              openstack_ReleaseFloatingIP.rb: ! "#\n# Description: This method is
                used to Release a Public IP to an OpenStack Instance\n#\n\n######
                TRACERS ######\n# Method for logging\ndef log(level, message)\n  @method
                = 'assign_floating_ip'\n  $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef
                info(message)\n  log(:info, message)\nend\n\ndef dump_root\n  log(:info,
                \"Root:<$evm.root> Attributes - Begin\")\n  $evm.root.attributes.sort.each
                { |k, v| log(:info, \"  Attribute - #{k}: #{v}\") }\n  log(:info,
                \"Root:<$evm.root> Attributes - End\")\n  log(:info, \"\")\nend\n\ndef
                dump_attributes(object)\n  log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")\n
                \ object.attributes.sort.each { |k, v| log(:info, \"CUSTOM    #{k}
                = #{v.inspect}\") }\n  log(:info, \"CUSTOM  End Attributes [object.attributes]\")\n
                \ log(:info, \"\")\nend\n###### TRACERS ######\n\ninfo(\"Automate
                Method Started\")\n\nrequire 'fog'\n\ndef has_public_ip(fog_vm)\n
                \ # assumes only one network interface.\n  addresses = fog_vm.addresses.values[0]\n
                \ floating_ips = addresses.select { |address| address['OS-EXT-TYPE:type']=='floating'
                }\n  if floating_ips.length > 0\n    return true\n  end\n  return
                false\nend\n\nvm = $evm.root['vm']\nems = vm.ext_management_system\n\n#
                Set up Fog connection to Openstack.\nos_user_id = ems.authentication_userid\nos_password
                = ems.authentication_password\nos_auth_url = \"http://#{ ems.hostname
                }:#{ ems.port }/v2.0/tokens\"\nos_tenant = ems.cloud_tenants.find(vm.cloud_tenant_id).first.name\ncompute
                = Fog::Compute.new({:provider => ems.emstype,\n                            :openstack_username
                => os_user_id,\n                            :openstack_api_key =>
                os_password,\n                            :openstack_auth_url => os_auth_url,\n
                \                           :openstack_tenant => os_tenant})\n\n\n#
                Get the VM in Fog and attach the Floating IP.\nfog_vm = compute.servers.select
                { |s| s.id == vm.uid_ems }.first\n\nif not has_public_ip(fog_vm)\n
                \ info(\"VM has no public IP to release!\")\n  exit MIQ_ABORT\nend\n\n#
                Get the floating IP (assuming only one interface and one floating
                IP).\nfloating_ip = fog_vm.addresses.values[0].select{ |address| address['OS-EXT-IPS:type']=='floating'
                }.first\nfog_vm.disassociate_address(floating_ip['addr'])\n\n# After
                release, refresh VMDB's info on the VM\nvm.refresh\n\ninfo(\"Automate
                Method Ended\")\n\nexit MIQ_OK\n"
              openstack_ReleaseFloatingIP.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: openstack_ReleaseFloatingIP
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
          OpenStackBuildRequest.class:
            __class__.yaml:
              object_type: class
              version: 1.0
              object:
                attributes:
                  description: 
                  display_name: OpenStack Build Request
                  name: OpenStackBuildRequest
                  type: 
                  inherits: 
                  visibility: 
                  owner: 
                schema:
                - field:
                    aetype: attribute
                    name: customization_template
                    display_name: 
                    datatype: string
                    priority: 1
                    owner: 
                    default_value: Cloud Init script for RHEL 7
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: attribute
                    name: placement_auto
                    display_name: 
                    datatype: boolean
                    priority: 2
                    owner: 
                    default_value: 'false'
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: attribute
                    name: placement_availability_zone
                    display_name: 
                    datatype: string
                    priority: 3
                    owner: 
                    default_value: nova
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: attribute
                    name: security_group
                    display_name: 
                    datatype: string
                    priority: 4
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: attribute
                    name: cloud_network
                    display_name: 
                    datatype: string
                    priority: 5
                    owner: 
                    default_value: private
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: attribute
                    name: cloud_tenant
                    display_name: 
                    datatype: string
                    priority: 6
                    owner: 
                    default_value: admin
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: method
                    name: BuildRequest
                    display_name: 
                    datatype: string
                    priority: 7
                    owner: 
                    default_value: OpenStackBuildRequest
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
            OpenStackBuildRequest.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: OpenStack Build Request
                  name: OpenStackBuildRequest
                  inherits: 
                  description: 
                fields:
                - BuildRequest:
                    value: OpenStackBuildRequest
            __methods__:
              OpenStackBuildRequest.rb: ! "###################################\n#\n#
                CloudForms Automate Method: build_request_openstack\n#\n# This method
                is used to build provision request for Openstack\n#\n# RedHat: George
                Goh (modified from original code from Bill Helgeson)\n###################################\n######
                UTILITY METHODS ######\n# Method for logging\ndef log(level, message)\n
                \ @method = 'build_request_openstack'\n  $evm.log(level, \"#{message}\")\nend\n\n#
                Convenience methods\ndef info(message)\n  log(:info, message)\nend\n\ndef
                debug(message)\n  log(:debug, message)\nend\n\ndef dump_root\n  info(\"Root:<$evm.root>
                Attributes - Begin\")\n  $evm.root.attributes.sort.each { |k, v| info(\"
                Attribute - #{k}: #{v}\") }\n  info(\"Root:<$evm.root> Attributes
                - End\")\n  info(\"\")\nend\n\ndef dump_attributes(object)\n  info(\"Begin
                Attributes [object.attributes]\")\n  object.attributes.sort.each {
                |k, v| info(\"  #{k} = #{v.inspect}\") }\n  info(\"End Attributes
                [object.attributes]\")\n  info(\"\")\nend\n###### UTILITY METHODS
                ######\n\n# Look in tags_hash for tags and tag the service\ndef tag_service(service,
                tags_hash)\n  # Look for tags with a sequence_id of 0 to tag the destination
                Service\n  unless tags_hash.nil?\n    tags_hash.each do |k, v|\n      $evm.log(\"info\",
                \"Adding Tag:<#{k.inspect}/#{v.inspect}> to Service:<#{service.name}>\")\n
                \     service.tag_assign(\"#{k}/#{v}\")\n    end\n  end\nend\n\n\n#
                name_service - name the service to avoid duplicate names\ndef name_service(service,
                new_service_name=nil)\n  unless new_service_name.blank?\n    log(:info,
                \"Changing Service name:<#{service.name}> to <#{new_service_name}>\")\n
                \ else\n    new_service_name = \"#{service.name}-#{Time.now.strftime('%Y%m%d-%H%M%S')}\"\n
                \   log(:info, \"Changing Service name:<#{service.name}> to <#{new_service_name}>\")\n
                \ end\n  service.name = new_service_name\nend\n\n\nbegin\n  info(\"<CloudForms
                Automate Method Started\")\n\n  # Start Here\n  def build_request(template_options,
                vm_options, tag_options, ws_options)\n    user = $evm.root['user']\n
                \   user_id = user ? user.userid : \"admin\"\n    user_email = user
                ? user.email : \"admin@example.com\"\n\n    # Setup the parameter
                needed for request\n    args = []\n    # arg1 = version\n    args
                << '1.1'\n    # arg2 = templateFields\n    args << template_options.collect
                { |k, v| \"#{k}=#{v}\" }.join('|')\n    # arg3 = vmFields\n    args
                << vm_options.collect { |k, v| \"#{k}=#{v}\" }.join('|')\n    # arg4
                = requester\n    args << \"user_name=#{user_id}|owner_email=#{user_email}\"\n
                \   # arg5 = tags\n    args << tag_options.collect { |k, v| \"#{k}=#{v}\"
                }.join('|')\n    # arg6 = WS Values\n    args << ws_options.collect
                { |k, v| \"#{k}=#{v}\" }.join('|')\n    # arg7 = emsCustomAttributes\n
                \   args << nil\n    # arg8 = miqCustomAttributes\n    args << nil\n\n
                \   info(\"ARGS: #{args}\")\n    info(\"Building provisioning request
                with the following arguments: <#{args.inspect}>\")\n    $evm.execute('create_provision_request',
                *args)\n  end\n\n  # check for tag by project create if does not exists\n
                \ def tag_exists(tag_name, category_name, desc)\n    if $evm.execute('tag_exists?',
                category_name, tag_name)\n      info(\"Tag <#{tag_name}> exists\")\n
                \   else\n      info(\"Adding new tag <#{tag_name}> in Category <#{category_name}>\")\n
                \     $evm.execute('tag_create', category_name, :name => tag_name,
                :description => \"#{desc}\")\n    end\n  end\n\n  # Start\n\n  # Set
                up the Service Task\n  info(\"CloudForms Service Task starting\")\n
                \ stp_task = $evm.root[\"service_template_provision_task\"]\n  # Get
                destination service object\n  service = stp_task.destination\n\n  #
                Pull dialog data\n  project = JSON.parse($evm.root['dialog_project'])\n
                \ info(\"Project tag ID: #{ project['tag_id'] }\")\n  info(\"Project
                tag name: #{ project['tag_name'] }\")\n  project_tag = project['tag_id']\n
                \ service_name = ($evm.root['dialog_service_name'].strip.gsub(/\\W/,
                '_')).downcase\n  vm_name = ($evm.root['dialog_vm_name'].strip.gsub(/\\W/,
                '_')).downcase\n\n  tag_exists(project['tag_name'],\"projects\",project['tag_name'])
                unless project.nil?\n\n  # Section to set provision options\n  \n
                \ # Name the service\n  name_service(service, service_name)\n  \n
                \ # Tag the service\n  info(\"Assigning #{project['tag_name']} to
                service\")\n  service.tag_assign(project['tag_name'])\n  \n  # Template
                options\n  template_options = {}\n  info(\"Dialog image chosen: #{
                $evm.root['dialog_image'] }\")\n  image = $evm.vmdb(:template_cloud).find($evm.root['dialog_image'])\n
                \ template_options[:guid] = image.guid\n  template_options[:ems_guid]
                = image.ems_ref_string\n  template_options[:request_type] = 'template'\n\n
                \ # Get Ext Management System and placement info\n  ems = $evm.vmdb(:ext_management_system).find(image.ems_id)\n
                \ placement_auto = $evm.object['placement_auto']\n  unless placement_auto==true\n
                \   placement_availability_zone = ems.availability_zones.select {
                |az| az.ems_ref == $evm.object['placement_availability_zone'] }.first\n
                \   cloud_tenant = ems.cloud_tenants.select { |tenant| tenant.name
                == $evm.object['cloud_tenant'] }.first\n    cloud_network = ems.cloud_networks.select
                { |network| network.name == $evm.object['cloud_network'] }.first\n
                \   customization_template = $evm.vmdb(:customization_template).find_by_description($evm.object['customization_template'])\n
                \ end\n  \n  # VM Fields\n  vm_options = {}\n  #vm_options[:pxe_image_id]
                \     = pxe_image.id\n  #vm_options[:pxe_server_id]     = pxe_image.pxe_server.id\n
                \ vm_options[:vm_name] = vm_name.downcase\n  \n  vm_options[:hostname]
                = vm_name.downcase\n  vm_options[:root_password] = $evm.root['dialog_root_password']\n
                \ vm_options[:number_of_vms] = $evm.root['dialog_vm_qty']\n\n  # Tags\n
                \ tag_options = {}\n  tag_options[:project] = project_tag\n  tag_options[:data_class]
                = project['tag_name']\n  tag_options[:vm_tags] = project['tag_name']\n
                \ \n  # WS_Values\n  ws_options = stp_task.options[:dialog].dup\n
                \ info(\"WS options: #{ws_options.inspect}\")\n  ws_options[:project]
                = project_tag\n  ws_options[:instance_type] = $evm.root['dialog_vm_size']\n
                \ ws_options[:vm_tags] = [project['tag_id']]\n\n  # placement\n  ws_options[:placement_auto]
                = placement_auto ? [true, 1] : [false, 0]\n  unless placement_auto==true\n
                \   ws_options[:placement_availability_zone] = [placement_availability_zone.id,
                placement_availability_zone.name]\n    ws_options[:cloud_tenant] =
                [cloud_tenant.id, cloud_tenant.name]\n    ws_options[:cloud_network]
                = [cloud_network.id, cloud_network.name]\n    ws_options[:security_groups]
                = [65000000000042]\n    ws_options[:customization_template_id] = customization_template.id\n
                \ end\n\n  # associate VM with service\n  ws_options[:service_id]
                = \"#{service.id}\"\n\n  retirement_date = $evm.root['dialog_retirement_date'];\n
                \ log(:info, \"Retirement date: #{retirement_date}\")\n  # We will
                process this once the VM is provisioned. Code currently in AddVMToService
                method.\n  ws_options[:retires_on] = retirement_date\n\n  # Build
                the request with all information\n  build_request(template_options,
                vm_options, tag_options, ws_options)\n  ############\n  # Exit method\n
                \ #\n  stp_task.finished(\"Service Task Finished\")\n  info(\"CloudForms
                Automate Method Ended\")\n  exit MIQ_OK\n\n    #\n    # Set Ruby rescue
                behavior\n    #\nrescue => err\n  log(:error, \"[#{err}]\\n#{err.backtrace.join(\"\\n\")}\")\n
                \ exit MIQ_ABORT\nend\n"
              OpenStackBuildRequest.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: OpenStackBuildRequest
                    display_name: OpenStack Build Request
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
          ProvisionRequestApproval.class:
            __class__.yaml:
              object_type: class
              version: 1.0
              object:
                attributes:
                  description: Factory State Machines
                  display_name: 
                  name: ProvisionRequestApproval
                  type: 
                  inherits: 
                  visibility: 
                  owner: 
                schema:
                - field:
                    aetype: attribute
                    name: max_cpus
                    display_name: 
                    datatype: string
                    priority: 1
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: attribute
                    name: max_vms
                    display_name: 
                    datatype: string
                    priority: 2
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: attribute
                    name: max_memory
                    display_name: 
                    datatype: string
                    priority: 3
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: attribute
                    name: max_retirement_days
                    display_name: 
                    datatype: string
                    priority: 4
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: state
                    name: ValidateRequest
                    display_name: 
                    datatype: string
                    priority: 5
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: validate_request
                    on_exit: 
                    on_error: pending_request
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: ApproveRequest
                    display_name: 
                    datatype: string
                    priority: 6
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: approve_request
                    on_exit: 
                    on_error: 
                    max_retries: '100'
                    max_time: 
            Default.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: Default
                  inherits: 
                  description: 
                fields:
                - max_vms:
                    value: '2'
          VMProvision_VM.class:
            __class__.yaml:
              object_type: class
              version: 1.0
              object:
                attributes:
                  description: Factory State Machines
                  display_name: 
                  name: VMProvision_VM
                  type: 
                  inherits: 
                  visibility: 
                  owner: 
                schema:
                - field:
                    aetype: state
                    name: CustomizeRequest
                    display_name: 
                    datatype: string
                    priority: 1
                    owner: 
                    default_value: /Cloud/VM/Provisioning/StateMachines/Methods/CustomizeRequest#${/#miq_provision.source.vendor}
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Customizing Request')
                    on_exit: update_provision_status(status => 'Customized Request')
                    on_error: update_provision_status(status => 'Error Customizing
                      Request')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: AcquireIPAddress
                    display_name: 
                    datatype: string
                    priority: 2
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Acquiring IP Address')
                    on_exit: update_provision_status(status => 'Acquired IP Address')
                    on_error: update_provision_status(status => 'Error Acquiring IP
                      Address')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: AcquireMACAddress
                    display_name: 
                    datatype: string
                    priority: 3
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Acquiring MAC Address')
                    on_exit: update_provision_status(status => 'Acquired MAC Address')
                    on_error: update_provision_status(status => 'Error Acquiring MAC
                      Address')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: RegisterDNS
                    display_name: 
                    datatype: string
                    priority: 4
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Registering DNS')
                    on_exit: update_provision_status(status => 'Registered DNS')
                    on_error: update_provision_status(status => 'Error Registering
                      DNS')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: RegisterCMDB
                    display_name: 
                    datatype: string
                    priority: 5
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Registering CMDB')
                    on_exit: update_provision_status(status => 'Registered CMDB')
                    on_error: update_provision_status(status => 'Error Registering
                      CMDB')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: RegisterAD
                    display_name: 
                    datatype: string
                    priority: 6
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Registering ActiveDirectory')
                    on_exit: update_provision_status(status => 'Registered ActiveDirectory')
                    on_error: update_provision_status(status => 'Error Registering
                      ActiveDirectory')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: Placement
                    display_name: 
                    datatype: string
                    priority: 7
                    owner: 
                    default_value: /Cloud/VM/Provisioning/Placement/default#${/#miq_provision.source.vendor}
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Starting Placement')
                    on_exit: update_provision_status(status => 'Placement Finished')
                    on_error: update_provision_status(status => 'Error in Placement')
                    max_retries: 
                    max_time: 
                - field:
                    aetype: state
                    name: PreProvision
                    display_name: 
                    datatype: string
                    priority: 8
                    owner: 
                    default_value: /Cloud/VM/Provisioning/StateMachines/Methods/PreProvision#${/#miq_provision.source.vendor}
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Applying PreProvision
                      Customizations')
                    on_exit: update_provision_status(status => 'Applied PreProvision
                      Customizations')
                    on_error: update_provision_status(status => 'Error Applying PreProvision
                      Customizations')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: Provision
                    display_name: 
                    datatype: string
                    priority: 9
                    owner: 
                    default_value: /Cloud/VM/Provisioning/StateMachines/Methods/Provision
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Creating VM')
                    on_exit: update_provision_status(status => 'Creating VM')
                    on_error: update_provision_status(status => 'Error Creating VM')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: CheckProvisioned
                    display_name: 
                    datatype: string
                    priority: 10
                    owner: 
                    default_value: /Cloud/VM/Provisioning/StateMachines/Methods/CheckProvisioned
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: update_provision_status(status => 'Creating VM')
                    on_error: update_provision_status(status => '${/#ae_reason}')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: PostProvision
                    display_name: 
                    datatype: string
                    priority: 11
                    owner: 
                    default_value: /Cloud/VM/Provisioning/StateMachines/Methods/PostProvision#${/#miq_provision.source.vendor}
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Applying PostProvision
                      Customizations')
                    on_exit: update_provision_status(status => 'Applied PostProvision
                      Customizations')
                    on_error: update_provision_status(status => 'Error Applying PostProvision
                      Customizations')
                    max_retries: 
                    max_time: 
                - field:
                    aetype: state
                    name: AddVMToService
                    display_name: 
                    datatype: string
                    priority: 12
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'AddVMToService')
                    on_exit: update_provision_status(status => 'AddVMToService')
                    on_error: update_provision_status(status => 'Error AddVMToService')
                    max_retries: 
                    max_time: 
                - field:
                    aetype: state
                    name: PostProvision2
                    display_name: 
                    datatype: string
                    priority: 13
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: ! 'update_provision_status(status => ''Post Provision
                      2'') '
                    on_exit: ! 'update_provision_status(status => ''Post Provision
                      2'') '
                    on_error: ! 'update_provision_status(status => ''Error Post Provision
                      2'') '
                    max_retries: 
                    max_time: 
                - field:
                    aetype: state
                    name: RegisterWithCloudFlareDNS
                    display_name: 
                    datatype: string
                    priority: 14
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: ! 'update_provision_status(status => ''Registering with
                      CloudFlareDNS'') '
                    on_exit: ! 'update_provision_status(status => ''Registering with
                      CloudFlareDNS'') '
                    on_error: ! 'update_provision_status(status => ''Error Registering
                      with CloudFlareDNS'') '
                    max_retries: 
                    max_time: 
                - field:
                    aetype: state
                    name: RegisterDHCP
                    display_name: 
                    datatype: string
                    priority: 15
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Registering DHCP')
                    on_exit: update_provision_status(status => 'Registered DHCP')
                    on_error: update_provision_status(status => 'Error Registering
                      DHCP')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: ActivateCMDB
                    display_name: 
                    datatype: string
                    priority: 16
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Activating CMDB')
                    on_exit: update_provision_status(status => 'Activated CMDB')
                    on_error: update_provision_status(status => 'Error Activating
                      CMDB')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: EmailOwner
                    display_name: 
                    datatype: string
                    priority: 17
                    owner: 
                    default_value: /Cloud/VM/Provisioning/Email/MiqProvision_Complete?event=vm_provisioned
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: update_provision_status(status => 'Emailing Owner')
                    on_exit: update_provision_status(status => 'Emailed Owner')
                    on_error: update_provision_status(status => 'Error Emailing Owner')
                    max_retries: '100'
                    max_time: 
                - field:
                    aetype: state
                    name: Finished
                    display_name: 
                    datatype: string
                    priority: 18
                    owner: 
                    default_value: /System/CommonMethods/StateMachineMethods/vm_provision_finished
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: '100'
                    max_time: 
            OpenStack_template.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: OpenStack Provisioning Template
                  name: OpenStack_template
                  inherits: 
                  description: 
                fields:
                - Provision:
                    value: /Cloud/VM/Provisioning/StateMachines/Methods/Provision
                - CheckProvisioned:
                    value: /Cloud/VM/Provisioning/StateMachines/Methods/CheckProvisioned
                - PostProvision:
                    on_error: update_provision_status(status => '${/#ae_reason}')
                - AddVMToService:
                    value: /Cloud/VM/Provisioning/StateMachines/Methods/Add_VM_To_Service
                - PostProvision2:
                    value: ! '#/Integration/Amazon/EC2/SyncVMTags'
                - RegisterWithCloudFlareDNS:
                    value: /Integration/CloudFlare/CloudFlareDNS/RegisterOpenStackVM
            amazon_template.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: Amazon Provisioning Template
                  name: amazon_template
                  inherits: 
                  description: 
                fields:
                - Provision:
                    value: /Cloud/VM/Provisioning/StateMachines/Methods/Provision
                - CheckProvisioned:
                    value: /Cloud/VM/Provisioning/StateMachines/Methods/CheckProvisioned
                - AddVMToService:
                    value: /Cloud/VM/Provisioning/StateMachines/Methods/Add_VM_To_Service
                - PostProvision2:
                    value: /Integration/Amazon/EC2/SyncVMTags
                - RegisterWithCloudFlareDNS:
                    value: /Integration/CloudFlare/CloudFlareDNS/RegisterAmazonVM
            clone_to_vm.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: Clone VM
                  name: clone_to_vm
                  inherits: 
                  description: 
                fields:
                - PreProvision:
                    value: /Cloud/VM/Provisioning/StateMachines/Methods/PreProvision_Clone_to_VM#${/#miq_provision.source.vendor}
                - PostProvision:
                    value: /Cloud/VM/Provisioning/StateMachines/Methods/PostProvision#${/#miq_provision.source.vendor}
                - EmailOwner:
                    value: /Cloud/VM/Provisioning/Email/MiqProvision_Complete?event=vm_cloned
            template.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: Provision VM from Template
                  name: template
                  inherits: 
                  description: 
                fields:
                - Provision:
                    value: /Cloud/VM/Provisioning/StateMachines/Methods/Provision
                - CheckProvisioned:
                    value: /Cloud/VM/Provisioning/StateMachines/Methods/CheckProvisioned
            __methods__:
              update_provision_status.rb: ! "#\n# Description: Update provision status.\n#
                Required inputs: status\n#\n\nprov   = $evm.root['miq_provision']\nstatus
                = $evm.inputs['status']\n\n# Update Status for on_entry,on_exit\nif
                $evm.root['ae_result'] == 'ok' || $evm.root['ae_result'] == 'error'\n
                \ prov.message = status\nend\n"
              update_provision_status.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: update_provision_status
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs:
                  - field:
                      aetype: 
                      name: status
                      display_name: 
                      datatype: 
                      priority: 1
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
          Yale-NUS-AWS-Services:
            __namespace__.yaml:
              object_type: namespace
              version: 1.0
              object:
                attributes:
                  name: Yale-NUS-AWS-Services
                  description: 
                  display_name: 
                  system: 
                  priority: 
                  enabled: 
            AWS-EBS-Attach.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: Attaches an EBS Volume to an AWS Instance
                    display_name: EBS Attach Instance State Machine
                    name: AWS-EBS-Attach
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: state
                      name: attach_instance_to_ebs
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: state
                      name: send_email
                      display_name: 
                      datatype: string
                      priority: 2
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              AWS-EBS-Attach-Instance.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Attach EBS to Instance
                    name: AWS-EBS-Attach-Instance
                    inherits: 
                    description: Attach EBS Volume to Instance
                  fields:
                  - attach_instance_to_ebs:
                      on_entry: attach_ebs
                  - send_email:
                      on_entry: send_email
              __methods__:
                attach_ebs.rb: ! "###################################\n#\n# CloudForms
                  Automate Method: attach_ebs_volume_button\n#\n# This method is used
                  to create a AWS EC2 EBS Volume via button\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'attach_ebs_volume_button'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\ndialog_field
                  = $evm.object\n\n# Get provisioning object\n\nbegin\n\n  vm = $evm.root['vm']\n
                  \ #log(:info, \" VM Info : #{vm.inspect}\")\n\n  ems = vm.ext_management_system\n\n
                  \ region = ems.provider_region\n\n  $evm.log(\"info\", \"--------------calculate_ebs_name
                  started------------------\")\n  # this creates an ELB name that
                  follows the rules below\n  # max length is 32 chars, all lower case,
                  no underscores or dashes except those as part of composition\n  #
                  pattern of userid-group name limited-name passed in\n  # regex used:
                  /[\\W+]|[_]/  Strips all non word characters and underscores (underscore
                  is part of /W)\n  # length of the group portion of the name is defined
                  below\n  group_length_limit = 15\n  my_user = $evm.root['user']\n\n
                  \ $evm.log(\"info\", \"userid ===> #{my_user.userid}\")\n  $evm.log(\"info\",
                  \"group membership ===> #{my_user.miq_group.description}\")\n\n
                  \ cleaned_group = my_user.miq_group.description.downcase.gsub(/[\\W+]|[_]/,
                  '').first(group_length_limit)\n\n  $evm.log(\"info\", \"user group
                  normalized (15 chars) ===> #{cleaned_group}\")\n\n  # Addiong the
                  user info and downcasing it\n  user = $evm.root['user'].userid.downcase\n\n
                  \ #AWS doesn't like underscores, dashes or spaces so strip for group\n
                  \ user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n\n
                  \ # Get the Amazon authentication credentials...\n  access_key_id
                  ||= ems.authentication_userid\n  secret_access_key = ems.authentication_password\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Start Here\n\n  ec2 = AWS::EC2.new(
                  :region => region  )\n\n  i = ec2.instances[\"#{vm.uid_ems}\"]\n
                  \ availability_zone = i.availability_zone\n\n  # Retreive the device
                  name from the dialog (ex /dev/sdf)\n  volume_id, region = $evm.root.attributes['dialog_aws_list_ebs'].split(\"|\")\n
                  \ selected_device_name = $evm.root.attributes['dialog_ebs_device_list']\n\n
                  \ volume = ec2.volumes[\"#{volume_id}\"]\n  vol_name = \"#{volume.id}\"\n
                  \ # Now Tag the newly created volume from the username/groupid and
                  volume name\n  ec2.volumes[\"#{volume_id}\"].tags[\"userid\"] =
                  \"#{user}\"\n  ec2.volumes[\"#{volume_id}\"].tags[\"usergroup\"]
                  = \"#{user_group}\"\n  ec2.volumes[\"#{volume_id}\"].tags[\"Name\"]
                  = \"#{vol_name}\"\n\n  # Now attach the newly created volume to
                  the current instance\n  attachment = volume.attach_to(ec2.instances[vm.uid_ems],
                  \"#{selected_device_name}\")\n  sleep 1 until attachment.status
                  != :attaching\n  log(:info, \"+++++++++++++++++++ Attached #{attachment}
                  to #{i} with device #{selected_device_name} ++++++++++++++++++++++\")\n\n
                  \ vars = Hash.new\n  vars[:type] = \"create_attach_ebs_volume\"\n
                  \ vars[:action] = \"Created\"\n  vars[:service_name] = \"AWS EBS\"\n
                  \ #vars[:vol_name] = vol_name\n  vars[:selected_device_name] = selected_device_name\n
                  \ vars[:vm_name] = vm['name']\n\n  require 'json'\n  require 'uri'\n
                  \ args = \"payload=#{vars.to_json}\"\n  args = URI.escape(args)\n
                  \ $evm.log(\"info\", \"============== vars: #{vars.inspect}\")\n
                  \ $evm.log(\"info\", \"============== args: #{args.inspect}\")\n
                  \ $evm.instantiate(\"/Yale/Methods/Emails/Email_Owner?#{args}\")\n\n
                  \ ############\n  # Exit method\n  #\n  log(:info, \"CloudForms
                  Automate Method Ended\")\n  exit MIQ_OK\nend\n\n\n\n"
                attach_ebs.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: attach_ebs
                      display_name: Attach EBS Volume to Instance
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                send_email.rb: ! '#

                  #            Automate Method

                  #

                  $evm.log("info", "Automate Method Started")

                  #

                  #            Method Code Goes here

                  #


                  #

                  #

                  #

                  $evm.log("info", "Automate Method Ended")

                  exit MIQ_OK

'
                send_email.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: send_email
                      display_name: Send Email
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
            AWS-EBS-Create.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: 
                    display_name: 
                    name: AWS-EBS-Create
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: state
                      name: create_ebs
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: state
                      name: create_attach_ebs_button
                      display_name: 
                      datatype: string
                      priority: 2
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              create_attach_ebs_button.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: create_attach_ebs_button
                    inherits: 
                    description: 
                  fields:
                  - create_attach_ebs_button:
                      on_entry: create_attach_ebs_button
              create_ebs.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: create_ebs
                    inherits: 
                    description: 
                  fields:
                  - create_ebs:
                      on_entry: create_ebs_volume
              __methods__:
                create_attach_ebs_button.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: create_attach_ebs_volume_button\n#\n#
                  This method is used to create a AWS EC2 EBS Volume via button\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'create_attach_ebs_volume_button'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\ndialog_field
                  = $evm.object\n\n# Get provisioning object\n\nbegin\n\n  vm = $evm.root['vm']\n
                  \ #log(:info, \" VM Info : #{vm.inspect}\")\n\n  ems = vm.ext_management_system\n\n
                  \ region = ems.provider_region\n\n  $evm.log(\"info\", \"--------------calculate_ebs_name
                  started------------------\")\n  # this creates an ELB name that
                  follows the rules below\n  # max length is 32 chars, all lower case,
                  no underscores or dashes except those as part of composition\n  #
                  pattern of userid-group name limited-name passed in\n  # regex used:
                  /[\\W+]|[_]/  Strips all non word characters and underscores (underscore
                  is part of /W)\n  # length of the group portion of the name is defined
                  below\n  group_length_limit = 15\n  my_user = $evm.root['user']\n\n
                  \ $evm.log(\"info\", \"userid ===> #{my_user.userid}\")\n  $evm.log(\"info\",
                  \"group membership ===> #{my_user.miq_group.description}\")\n\n
                  \ cleaned_group = my_user.miq_group.description.downcase.gsub(/[\\W+]|[_]/,
                  '').first(group_length_limit)\n\n  $evm.log(\"info\", \"user group
                  normalized (15 chars) ===> #{cleaned_group}\")\n\n  # Get the name
                  of the ELB name from the request ... validate_ELB_name adds it\n\n
                  \ vol_name = $evm.root.attributes['dialog_aws_ebs_volume_name']\n
                  \ clean_name = vol_name.downcase.gsub(/[\\W+]|[_]/, '')\n  $evm.log(\"info\",
                  \"cleaned passed name ===> #{clean_name}\")\n\n  cleaned_ebs = \"#{my_user.userid}-#{cleaned_group}-#{clean_name}\".first(32)\n
                  \ ebs_name = cleaned_ebs\n\n  $evm.log(\"info\", \"Fully crafted
                  name (32 char max, AWS limit) ===> #{cleaned_ebs}\")\n  $evm.log(\"info\",
                  \"--------------calculate_elb_name ended------------------\")\n\n
                  \ # Addiong the user info and downcasing it\n  user = $evm.root['user'].userid.downcase\n\n
                  \ #AWS doesn't like underscores, dashes or spaces so strip for group\n
                  \ user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n\n
                  \ # Get the Amazon authentication credentials...\n  access_key_id
                  ||= ems.authentication_userid\n  secret_access_key = ems.authentication_password\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n\n  # Get volume name from the dialog\n
                  \ # vol_name = $evm.root.attributes['dialog_aws_ebs_volume_name']\n
                  \  log(:info, \"++++++++++++++++++ Volume Name : #{ebs_name} +++++++++++++++++++++++++\")\n\n\n
                  \ # Get the EBS size\n  ebs_size = $evm.root.attributes['dialog_ebs_size'].to_i\n\n
                  \ log(:info, \" +++++++++++++++++ EBS Size : #{ebs_size.to_i} ++++++++++++++\")\n\n\n
                  \ # Start Here\n\n  ec2 = AWS::EC2.new( :region => region  )\n\n
                  \ i = ec2.instances[\"#{vm.uid_ems}\"]\n  availability_zone = i.availability_zone\n\n
                  \ # Retreive the device name from the dialog (ex /dev/sdf)\n  selected_device_name
                  = $evm.root.attributes['dialog_ebs_device_list']\n\n  #log(:info,
                  \"+++++++++++++++ Selected Region: #{region} +++++++++++++++++++++++++\")\n\n
                  \ #Set Availability Zone\n\n  #log(:info, \"+++++++++++++++ Selected
                  Availability Zone : #{availability_zone} ++++++++++++++++++\")\n\n
                  \ #log(:info, \"+++++++++++++++ User Name : #{user} ++++++++++++++++++++++\")\n
                  \ #log(:info, \"+++++++++++++++ Group Name : #{user_group} +++++++++++++++++++\")\n\n
                  \ volume = ec2.volumes.create(:size => ebs_size,\n                              :availability_zone
                  => availability_zone)\n  sleep 1 until volume.status != :creating\n\n
                  \ # Now Tag the newly created volume from the username/groupid and
                  volume name\n  ec2.volumes[\"#{volume.id}\"].tags[\"userid\"] =
                  \"#{user}\"\n  ec2.volumes[\"#{volume.id}\"].tags[\"usergroup\"]
                  = \"#{user_group}\"\n  ec2.volumes[\"#{volume.id}\"].tags[\"Name\"]
                  = \"#{vol_name}\"\n\n  # Now attach the newly created volume to
                  the current instance\n  attachment = volume.attach_to(ec2.instances[vm.uid_ems],
                  \"#{selected_device_name}\")\n  sleep 1 until attachment.status
                  != :attaching\n  log(:info, \"+++++++++++++++++++ Attached #{attachment}
                  to #{i} with device #{selected_device_name} ++++++++++++++++++++++\")\n\n
                  \ vars = Hash.new\n  vars[:type] = \"create_attach_ebs_volume\"\n
                  \ vars[:action] = \"Created\"\n  vars[:service_name] = \"AWS EBS\"\n
                  \ vars[:vol_name] = vol_name\n  vars[:selected_device_name] = selected_device_name\n
                  \ vars[:vm_name] = vm['name']\n\n  require 'json'\n  require 'uri'\n
                  \ args = \"payload=#{vars.to_json}\"\n  args = URI.escape(args)\n
                  \ $evm.log(\"info\", \"============== vars: #{vars.inspect}\")\n
                  \ $evm.log(\"info\", \"============== args: #{args.inspect}\")\n
                  \ $evm.instantiate(\"/Yale/Methods/Emails/Email_Owner?#{args}\")\n\n
                  \ ############\n  # Exit method\n  #\n  log(:info, \"CloudForms
                  Automate Method Ended\")\n  exit MIQ_OK\nend\n\n"
                create_attach_ebs_button.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: create_attach_ebs_button
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                create_ebs_volume.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: create_ebs_volume\n#\n# This method
                  is used to create a AWS EC2 EBS Volume\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'create_ebs_volume'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\n\n#
                  Get provisioning object\n\nbegin\n\n  access_key_id = nil\n  secret_access_key
                  = nil\n\n  # Get the Amazon ems ref\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  # Addiong the user info and downcasing it\n  user = $evm.root['user'].userid.downcase\n\n
                  \ #AWS doesn't like underscores, dashes or spaces so strip for group\n
                  \ user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n\n
                  \ # Get the Amazon authentication credentials...\n  access_key_id
                  = ems.authentication_userid       # $evm.object['access_key_id']\n
                  \ secret_access_key = ems.authentication_password # $evm.object.decrypt('secret_access_key')\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  region = $evm.object['dialog_aws_region']\n\n
                  \ availability_zone = $evm.object['dialog_availability_zone']\n\n
                  \ # Get volume name from the dialog\n  vol_name = $evm.object['dialog_aws_ebs_volume_name']\n\n
                  \ # Get the EBS size\n  ebs_size = $evm.object['dialog_ebs_size'].to_i\n\n
                  \ log(:info, \" +++++++++++++++++ EBS Size : #{ebs_size.to_i} ++++++++++++++\")\n\n\n
                  \ # Start Here\n\n\n  log(:info, \"+++++++++++++++ Selected Region:
                  #{region} +++++++++++++++++++++++++\")\n\n  #Set Availability Zone\n\n
                  \ log(:info, \"+++++++++++++++ Selected Availability Zone : #{availability_zone}
                  ++++++++++++++++++\")\n\n  log(:info, \"+++++++++++++++ User Name
                  : #{user} ++++++++++++++++++++++\")\n  log(:info, \"+++++++++++++++
                  Group Name : #{user_group} +++++++++++++++++++\")\n\n  ec2 = AWS::EC2.new(
                  :region => region  )\n\n\n  volume = ec2.volumes.create(:size =>
                  ebs_size,\n                              :availability_zone => availability_zone)\n\n
                  \ # Now Tag the newly created volume from the username/groupid and
                  volume name\n  ec2.volumes[\"#{volume.id}\"].tags[\"userid\"] =
                  \"#{user}\"\n  ec2.volumes[\"#{volume.id}\"].tags[\"usergroup\"]
                  = \"#{user_group}\"\n  ec2.volumes[\"#{volume.id}\"].tags[\"Name\"]
                  = \"#{vol_name}\"\n\n  ############\n  # Exit method\n  #\n  log(:info,
                  \"CloudForms Automate Method Ended\")\n  exit MIQ_OK\nend\n\n"
                create_ebs_volume.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: create_ebs_volume
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
            AWS-EBS-Delete.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: Amazon EBS Volume Delete
                    display_name: Amazon EBS Volume Delete
                    name: AWS-EBS-Delete
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: state
                      name: delete_ebs
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: state
                      name: delete_ebs_button
                      display_name: 
                      datatype: string
                      priority: 2
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              AWS-EBS-Delete.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Delete EBS Volume
                    name: AWS-EBS-Delete
                    inherits: 
                    description: Delete EBS Volume
                  fields:
                  - delete_ebs:
                      on_entry: delete_ebs
              AWS-EBS-Delete-Button.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EBS Delete Button
                    name: AWS-EBS-Delete-Button
                    inherits: 
                    description: AWS EBS Delete via Button
                  fields:
                  - delete_ebs_button:
                      on_entry: delete_ebs_button
              __methods__:
                delete_ebs.rb: ! "###################################\n#\n# CloudForms
                  Automate Method: delete_ebs_volume\n#\n# This method is used to
                  delete a AWS EC2 EBS Volume\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'delete_ebs_volume'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef dumpRoot\n
                  \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                  \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                  - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                  \"\")\nend\n\n# dump root object attributes\ndumpRoot\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\n\n#
                  Get provisioning object\ndialog_field = $evm.object\n\nbegin\n\n
                  \ access_key_id = nil\n  secret_access_key = nil\n\n  # Addiong
                  the user info and downcasing it\n  user = $evm.root['user'].userid.downcase\n\n
                  \ #AWS doesn't like underscores, dashes or spaces so strip for group\n
                  \ user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n\n
                  \ # Get the Amazon ems ref\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  # Get the Amazon authentication credentials...\n  access_key_id
                  = ems.authentication_userid       # $evm.object['access_key_id']\n
                  \ secret_access_key = ems.authentication_password # $evm.object.decrypt('secret_access_key')\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  vol_list_region = $evm.object['dialog_aws_ebs_volume_list']\n
                  \ log(:info, \"++++++++++++++++ Vol List Region : #{vol_list_region}
                  +++++++++++++++++++\")\n  vol_list_region = vol_list_region.split(\"|\").each
                  {|t| t.strip!}\n\n  region = vol_list_region[1]\n\n\n  selected_ebs_volume
                  = vol_list_region[0]\n  log(:info, \"++++++++++++ Selected EBS Volume
                  : #{selected_ebs_volume} ++++++++++++++++++++\")\n\n  # Start Here\n\n
                  \ log(:info, \"++++++++++++++++++ Region : #{region} +++++++++++++++++++\")\n\n
                  \ ec2 = AWS::EC2.new( :region => region  )\n\n  volume = ec2.volumes[selected_ebs_volume]\n
                  \   volume.attachments.each do |attachment|\n        attachment.delete(:force
                  => true)\n      end\n    sleep 1 until volume.status == :available\n
                  \   volume.delete\n\n  ############\n  # Exit method\n  #\n  log(:info,
                  \"CloudForms Automate Method Ended\")\n  exit MIQ_OK\nend\n"
                delete_ebs.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: delete_ebs
                      display_name: Delete EBS Volume
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                delete_ebs_button.rb: ! "###################################\r\n#\r\n#
                  CloudForms Automate Method: delete_ebs_volume_button\r\n#\r\n# This
                  method is used to delete a AWS EC2 EBS Volume via Button\r\n#\r\n###################################\r\n#
                  Method for logging\r\ndef log(level, message)\r\n  @method = 'delete_ebs_volume_button'\r\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\r\nend\r\n\r\ndef
                  dumpRoot\r\n  $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  Begin Attributes\")\r\n  $evm.root.attributes.sort.each { |k, v|
                  $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Attributes -
                  #{k}: #{v}\")}\r\n  $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  End Attributes\")\r\n  $evm.log(\"info\", \"\")\r\nend\r\n\r\n#
                  dump root object attributes\r\ndumpRoot\r\n\r\nlog(:info, \"CloudForms
                  Automate Method Started\")\r\n\r\nrequire 'aws-sdk'\r\n\r\n# Get
                  provisioning object\r\ndialog_field = $evm.object\r\n\r\nbegin\r\n\r\n
                  \ vm = $evm.root['vm']\r\n  #log(:info, \" VM Info : #{vm.inspect}\")\r\n\r\n
                  \ ems = vm.ext_management_system\r\n\r\n  region = ems.provider_region\r\n\r\n
                  \ # Get the Amazon authentication credentials...\r\n  access_key_id
                  ||= ems.authentication_userid\r\n  secret_access_key = ems.authentication_password\r\n\r\n
                  \ # Addiong the user info and downcasing it\r\n  user = $evm.root['user'].userid.downcase\r\n\r\n
                  \ #AWS doesn't like underscores, dashes or spaces so strip for group\r\n
                  \ user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\r\n\r\n
                  \ AWS.config(\r\n      :access_key_id => access_key_id,\r\n      :secret_access_key
                  => secret_access_key\r\n  )\r\n\r\n  vol_list_region = $evm.root.attributes['dialog_aws_ebs_volume_list']\r\n
                  \ log(:info, \"++++++++++++++++ Vol List Region : #{vol_list_region}
                  +++++++++++++++++++\")\r\n  vol_list_region = vol_list_region.split(\"|\").each
                  {|t| t.strip!}\r\n\r\n  region = vol_list_region[1]\r\n\r\n\r\n
                  \ selected_ebs_volume = vol_list_region[0]\r\n  log(:info, \"++++++++++++
                  Selected EBS Volume : #{selected_ebs_volume} ++++++++++++++++++++\")\r\n\r\n
                  \ # Start Here\r\n\r\n  log(:info, \"++++++++++++++++++ Region :
                  #{region} +++++++++++++++++++\")\r\n\r\n  ec2 = AWS::EC2.new( :region
                  => region  )\r\n\r\n  volume = ec2.volumes[selected_ebs_volume]\r\n
                  \ volume.attachments.each do |attachment|\r\n    attachment.delete(:force
                  => true)\r\n  end\r\n  sleep 1 until volume.status == :available\r\n
                  \ volume.delete\r\n\r\n  # Email info\r\n  vars = Hash.new\r\n  vars[:type]
                  = \"delete_ebs_volume\"\r\n  vars[:action] = \"Deleted\"\r\n  vars[:service_name]
                  = \"AWS EBS\"\r\n  vars[:vm_name] = vm['name']\r\n  vars[:vol_name]
                  = selected_ebs_volume\r\n\r\n  require 'json'\r\n  require 'uri'\r\n
                  \ args = \"payload=#{vars.to_json}\"\r\n  args = URI.escape(args)\r\n
                  \ $evm.log(\"info\", \"============== vars: #{vars.inspect}\")\r\n
                  \ $evm.log(\"info\", \"============== args: #{args.inspect}\")\r\n
                  \ $evm.instantiate(\"/Yale/Methods/Emails/Email_Owner?#{args}\")\r\n\r\n
                  \ ############\r\n  # Exit method\r\n  #\r\n  log(:info, \"CloudForms
                  Automate Method Ended\")\r\n  exit MIQ_OK\r\nend\r\n"
                delete_ebs_button.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: delete_ebs_button
                      display_name: Delete EBS Volume Button
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
            AWS-EBS-Detach.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: 
                    display_name: 
                    name: AWS-EBS-Detach
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: state
                      name: detach_ebs
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              Detach-EBS.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: Detach-EBS
                    inherits: 
                    description: 
                  fields:
                  - detach_ebs:
                      on_entry: detach_ebs
              __methods__:
                detach_ebs.rb: ! "###################################\n#\n# CloudForms
                  Automate Method: detach_ebs\n#\n# This method is used to detach
                  a AWS EC2 EBS Volume from an instance\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'detach_ebs'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef dumpRoot\n
                  \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                  \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                  - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                  \"\")\nend\n\n# dump root object attributes\ndumpRoot\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\ndialog_field
                  = $evm.object\n\n# Get provisioning object\n\nbegin\n  vm = $evm.root['vm']\n
                  \ #log(:info, \" VM Info : #{vm.inspect}\")\n\n  ems = vm.ext_management_system\n\n
                  \ region = ems.provider_region\n\n  # Get the Amazon authentication
                  credentials...\n  access_key_id ||= ems.authentication_userid\n
                  \ secret_access_key = ems.authentication_password\n\n  AWS.config(\n
                  \     :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Start Here\n  log(:info, \" ++++++++++++++++++
                  Selected Region: #{region} ++++++++++++++++++++\")\n\n  #\n  ec2
                  = AWS::EC2.new( :region => region )\n\n  selected_ebs_volume = $evm.root.attributes['dialog_aws_ec2_ebs_list_attachments']\n
                  \ log(:info, \"++++++++++++ Selected EBS Volume : #{selected_ebs_volume}
                  ++++++++++++++++++++\")\n\n  volume_id, device, name = selected_ebs_volume.split('|')\n\n
                  \ # Start Here\n  volume = ec2.volumes[volume_id]\n  log(:info,
                  \"+++++++++++++++++ Inspect Volume : #{volume.inspect} +++++++++++++++++++++++++\")\n
                  \ volume.attachments.each do |attachment|\n    attachment.delete(:force
                  => true)\n  end\n  sleep 1 until volume.status == :available\n\n
                  \ # Email info\n\n  vars = Hash.new\n  vars[:type] = \"detach_ebs_volume\"\n
                  \ vars[:action] = \"Detached\"\n  vars[:service_name] = \"AWS EBS\"\n
                  \ vars[:vol_name] = selected_ebs_volume\n  vars[:vm_name] = vm['name']\n\n
                  \ require 'json'\n  require 'uri'\n  args = \"payload=#{vars.to_json}\"\n
                  \ args = URI.escape(args)\n  $evm.log(\"info\", \"==============
                  vars: #{vars.inspect}\")\n  $evm.log(\"info\", \"==============
                  args: #{args.inspect}\")\n  $evm.instantiate(\"/Yale/Methods/Emails/Email_Owner?#{args}\")\n\n
                  \ ############\n  # Exit method\n  #\n  log(:info, \"Detach EBS
                  Volume - CloudForms Automate Method Ended\")\n  exit MIQ_OK\nend\n\n"
                detach_ebs.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: detach_ebs
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
            aws_provision_instance_state_machine.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: 
                    display_name: 
                    name: aws_provision_instance_state_machine
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: attribute
                      name: customization_template
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: Cloud Init script for RHEL 7
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: amazon_build_request
                      display_name: 
                      datatype: string
                      priority: 2
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              aws_provision_instance.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_provision_instance
                    inherits: 
                    description: 
                  fields:
                  - amazon_build_request:
                      value: amazon_build_request
              __methods__:
                amazon_build_request.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: build_request_amazon\n#\n# This method
                  is used to build provision request for Amazon\n#\n###################################\nbegin\n
                  \ # Load the aws-sdk\n  #gem 'aws-sdk','=1.50.0'\n  require \"aws-sdk\"\n\n
                  \ # Method for logging\n  def log(level, message)\n    @method =
                  'build_request_amazon'\n    $evm.log(level, \"#{@method} - #{message}\")\n
                  \ end\n  log(:info, \"<CloudForms Automate Method Started\")\n  \n
                  \ \n  # Start Here\n  def build_request(template_options, vm_options,
                  tag_options, ws_options)\n    user = $evm.root['user']\n    user_id
                  = user ? user.userid : \"admin\"\n    #user_email = user ? user.email
                  : \"lester@redhat.com\" #\"admin@example.com\"\n    user_email =
                  \"lester@redhat.com\" #\"admin@example.com\"\n    # Setup the parameter
                  needed for request\n    args = []\n    # arg1 = version\n    args
                  << '1.1'\n    # arg2 = templateFields\n    args << template_options.collect
                  { |k, v| \"#{k}=#{v}\" }.join('|')\n    # arg3 = vmFields\n    args
                  << vm_options.collect { |k, v| \"#{k}=#{v}\" }.join('|')\n    #
                  arg4 = requester\n    args << \"user_name=#{user_id}|owner_email=#{user_email}\"\n
                  \   # arg5 = tags\n    args << tag_options.collect { |k, v| \"#{k}=#{v}\"
                  }.join('|')\n    # arg6 = WS Values\n    args << ws_options.collect
                  { |k, v| \"#{k}=#{v}\" }.join('|')\n    # arg7 = emsCustomAttributes\n
                  \   args << nil\n    # arg8 = miqCustomAttributes\n    args << nil\n\n
                  \   log(:info, \"#{@method} - Building provisioning request with
                  the following arguments: <#{args.inspect}>\")\n    $evm.execute('create_provision_request',
                  *args)\n  end\n  \n# Look in tags_hash for tags and tag the service\ndef
                  tag_service(service, tags_hash)\n  # Look for tags with a sequence_id
                  of 0 to tag the destination Service\n  unless tags_hash.nil?\n    tags_hash.each
                  do |k, v|\n      $evm.log(\"info\", \"Adding Tag:<#{k.inspect}/#{v.inspect}>
                  to Service:<#{service.name}>\")\n      service.tag_assign(\"#{k}/#{v}\")\n
                  \   end\n  end\nend\n\n# name_service - name the service to avoid
                  duplicate names\ndef name_service(service, new_service_name=nil)\n
                  \ unless new_service_name.blank?\n    log(:info, \"Changing Service
                  name:<#{service.name}> to <#{new_service_name}>\")\n  else\n    new_service_name
                  = \"#{service.name}-#{Time.now.strftime('%Y%m%d-%H%M%S')}\"\n    log(:info,
                  \"Changing Service name:<#{service.name}> to <#{new_service_name}>\")\n
                  \ end\n  service.name = new_service_name\nend\n\n  \n# Start\n#
                  Set up the Service Task\nlog(:info, \"===========================================\")\nlog(:info,
                  \"#{@method} - Listing ROOT Attributes:\")\n$evm.root.attributes.sort.each
                  { |k, v| log(:info, \" \\t#{k}: #{v}\") }\n log(:info, \"===========================================\")\n\n
                  \ \nlog(:info, \"#{@method} - CloudForms Service Task starting\")\nstp_task
                  = $evm.root[\"service_template_provision_task\"]\n  \n# Get destination
                  service object\nservice = stp_task.destination\n$evm.log(\"info\",
                  \"Detected Service:<#{service.name}> Id:<#{service.id}>\")\n  \n
                  \ # Pull dialog data\n  vm_name = $evm.root['dialog_instance_name'].to_s\n
                  \ default_region = $evm.root['dialog_aws_region'].to_s\n  ##route
                  = $evm.root['dialog_route'].to_s\n  ##log(:info, \"Route setting:
                  #{route}\")\n \n  access_key_id  = $evm.object.decrypt('access_key_id')\n
                  \ secret_access_key  = $evm.object.decrypt('secret_access_key')\n
                  \ if $evm.root['dialog_aws_region'] == \"us-east-1\"\n    awszone=
                  \"east\"\n  else\n    awszone = \"west\"\n  end\n\n  vpc = $evm.root['dialog_aws_vpc'].to_s\n
                  \ subnet_id, subnet_icdr_block = $evm.root['dialog_aws_subnet_list'].split(\"|\")\n
                  \ availability_zone_dialog = $evm.root.attributes['dialog_aws_availability_zone'].to_s\n
                  \ log(:info, \"Availability Setting: #{availability_zone_dialog}\")\n\n
                  \ # Process tag dialogs\n\n  # Pull dialog data\n  project = JSON.parse($evm.root['dialog_project'])\n
                  \ log(:info, \"Project tag ID: #{ project['tag_id'] }\")\n  log(:info,\"Project
                  tag name: #{ project['tag_name'] }\")\n  project_tag = project['tag_id']\n\n
                  \n  # Tag the service\n  log(:info, \"Assigning #{project['tag_name']}
                  to service\")\n  service.tag_assign(project['tag_name'])\n\n  log(:info,
                  \"Got Keys\")\n\n  # Set amazon config\n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n  # Create the basic EC2 object\n  ec2 = AWS::EC2.new(:region
                  => default_region)\n  \n  # Section to set provision options\n  #
                  Template options\n  template_options = {}\n  \n  aws_ami_id, aws_region,
                  aws_ami_name = $evm.root['dialog_aws_image'].split(\"|\")\n  \n
                  \ \n  aws_template_info = $evm.vmdb(\"miq_template\").find_by_ems_ref(aws_ami_id)\n
                  \ \n  guid = aws_template_info['GUID']\n  \n  template_options[:guid]
                  = guid\n  template_options[:request_type] = 'template'\n\n  # VM
                  Fields\n  vm_options = {}\n  # Get the root password for the instance\n
                  \ vm_options[:root_password] = $evm.root['dialog_root_password']\n
                  \ vm_options[:name] = vm_name.downcase\n  vm_options[:vm_name] =
                  vm_name.downcase\n  vm_options[:hostname] = vm_name.downcase\n  vm_options[:number_of_vms]
                  = $evm.root['dialog_num_instances'] \n\n  \n  new_service_name =
                  vm_name.downcase \n  name_service(service, new_service_name)\n  \n\n
                  # Tags\n  tag_options = {}\n  tag_options[:project] = project_tag\n
                  \ tag_options[:data_class] = project['tag_name']\n  tag_options[:vm_tags]
                  = project['tag_name']\n\n  # Get the customization template to pass
                  in the SSH key and Password for the instance.\n  customization_template
                  = $evm.vmdb(:customization_template).find_by_description($evm.object['customization_template'])\n
                  \ net_tags=nil\n  \n  # WS_Values\n  #ws_options = {}\n  # WS_Values
                  - George Goh made me do it :-)\n  ws_options = stp_task.options[:dialog].dup\n
                  \ ws_options[:availability_zone] = availability_zone_dialog\n  ws_options[:subnet]
                  = subnet_id unless subnet_id.blank?\n  ws_options[:subnet_name]
                  = net_tags['Name'] unless net_tags.nil?\n  ws_options[:region] =
                  default_region\n  ws_options[:image_id] = aws_ami_id\n  ws_options[:vpc]
                  = vpc unless vpc.nil?\n  ws_options[:flavor] = $evm.root['dialog_aws_instance_type']\n
                  \ ws_options[:aws_zone] = awszone\n\n  ws_options[:project] = project_tag\n
                  \ ws_options[:vm_tags] = [project['tag_id']]\n\n  ws_options[:service_id]
                  = \"#{service.id}\"\n  \n  retirement_date = $evm.root['dialog_retirement_date'];\n
                  \ log(:info, \"Retirement date: #{retirement_date}\")\n  \n  # We
                  will process this once the VM is provisioned. Code currently in
                  AddVMToService method.\n  ws_options[:retires_on] = retirement_date\n\n
                  \ ws_options[:customization_template_id] = customization_template.id\n\n\n#
                  To support key pairs coming from Amazon ...\n  #ws_options[:keypair_chosen]
                  = $evm.root['dialog_aws_ssh_pair']\n  #ws_options[:key_name] = $evm.root['dialog_aws_ssh_pair']\n\n
                  \ # Build the request with all information\n  build_request(template_options,
                  vm_options, tag_options, ws_options)\n  \n  \n  ############\n  #
                  Exit method\n  #\n  stp_task.finished(\"Service Task Finished\")\n
                  \ log(:info, \"CloudForms Automate Method Ended\")\n  exit MIQ_OK\n\n
                  \   #\n    # Set Ruby rescue behavior\n    #\nrescue => err\n  log(:error,
                  \"[#{err}]\\n#{err.backtrace.join(\"\\n\")}\")\n  exit MIQ_ABORT\nend\n\n\n"
                amazon_build_request.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: amazon_build_request
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
          AWS-Services-Archive:
            __namespace__.yaml:
              object_type: namespace
              version: 1.0
              object:
                attributes:
                  name: AWS-Services-Archive
                  description: 
                  display_name: 
                  system: 
                  priority: 
                  enabled: 
            AWS-EBS-Attach.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: Attaches an EBS Volume to an AWS Instance
                    display_name: EBS Attach Instance State Machine
                    name: AWS-EBS-Attach
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: attribute
                      name: access_key_id
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: AKIAIOCVMVAOW327SEJQ
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: secret_access_key
                      display_name: 
                      datatype: password
                      priority: 2
                      owner: 
                      default_value: v2:{tJdSOsAqIckUycQyke3iHg6jhw8drpMAgsjpZXz5TGCtJfE1clFJFvpy+/sFMoay}
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: state
                      name: attach_instance_to_ebs
                      display_name: 
                      datatype: string
                      priority: 3
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: state
                      name: send_email
                      display_name: 
                      datatype: string
                      priority: 4
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              AWS-EBS-Attach-Instance.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Attach EBS to Instance
                    name: AWS-EBS-Attach-Instance
                    inherits: 
                    description: Attach EBS Volume to Instance
                  fields:
                  - attach_instance_to_ebs:
                      on_entry: attach_ebs
                  - send_email:
                      on_entry: send_email
              __methods__:
                attach_ebs.rb: ! "###################################\n#\n# CloudForms
                  Automate Method: attach_ebs_volume_button\n#\n# This method is used
                  to create a AWS EC2 EBS Volume via button\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'attach_ebs_volume_button'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\ndialog_field
                  = $evm.object\n\n# Get provisioning object\n\nbegin\n\n  vm = $evm.root['vm']\n
                  \ #log(:info, \" VM Info : #{vm.inspect}\")\n\n  ems = vm.ext_management_system\n\n
                  \ region = ems.provider_region\n\n  $evm.log(\"info\", \"--------------calculate_ebs_name
                  started------------------\")\n  # this creates an ELB name that
                  follows the rules below\n  # max length is 32 chars, all lower case,
                  no underscores or dashes except those as part of composition\n  #
                  pattern of userid-group name limited-name passed in\n  # regex used:
                  /[\\W+]|[_]/  Strips all non word characters and underscores (underscore
                  is part of /W)\n  # length of the group portion of the name is defined
                  below\n  group_length_limit = 15\n  my_user = $evm.root['user']\n\n
                  \ $evm.log(\"info\", \"userid ===> #{my_user.userid}\")\n  $evm.log(\"info\",
                  \"group membership ===> #{my_user.miq_group.description}\")\n\n
                  \ cleaned_group = my_user.miq_group.description.downcase.gsub(/[\\W+]|[_]/,
                  '').first(group_length_limit)\n\n  $evm.log(\"info\", \"user group
                  normalized (15 chars) ===> #{cleaned_group}\")\n\n  # Addiong the
                  user info and downcasing it\n  user = $evm.root['user'].userid.downcase\n\n
                  \ #AWS doesn't like underscores, dashes or spaces so strip for group\n
                  \ user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n\n
                  \ # Get the Amazon authentication credentials...\n  access_key_id
                  ||= ems.authentication_userid\n  secret_access_key = ems.authentication_password\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Start Here\n\n  ec2 = AWS::EC2.new(
                  :region => region  )\n\n  i = ec2.instances[\"#{vm.uid_ems}\"]\n
                  \ availability_zone = i.availability_zone\n\n  # Retreive the device
                  name from the dialog (ex /dev/sdf)\n  volume_id, region = $evm.root.attributes['dialog_aws_list_ebs'].split(\"|\")\n
                  \ selected_device_name = $evm.root.attributes['dialog_ebs_device_list']\n\n
                  \ volume = ec2.volumes[\"#{volume_id}\"]\n  vol_name = \"#{volume.id}\"\n
                  \ # Now Tag the newly created volume from the username/groupid and
                  volume name\n  ec2.volumes[\"#{volume_id}\"].tags[\"userid\"] =
                  \"#{user}\"\n  ec2.volumes[\"#{volume_id}\"].tags[\"usergroup\"]
                  = \"#{user_group}\"\n  ec2.volumes[\"#{volume_id}\"].tags[\"Name\"]
                  = \"#{vol_name}\"\n\n  # Now attach the newly created volume to
                  the current instance\n  attachment = volume.attach_to(ec2.instances[vm.uid_ems],
                  \"#{selected_device_name}\")\n  sleep 1 until attachment.status
                  != :attaching\n  log(:info, \"+++++++++++++++++++ Attached #{attachment}
                  to #{i} with device #{selected_device_name} ++++++++++++++++++++++\")\n\n
                  \ vars = Hash.new\n  vars[:type] = \"create_attach_ebs_volume\"\n
                  \ vars[:action] = \"Created\"\n  vars[:service_name] = \"AWS EBS\"\n
                  \ #vars[:vol_name] = vol_name\n  vars[:selected_device_name] = selected_device_name\n
                  \ vars[:vm_name] = vm['name']\n\n  require 'json'\n  require 'uri'\n
                  \ args = \"payload=#{vars.to_json}\"\n  args = URI.escape(args)\n
                  \ $evm.log(\"info\", \"============== vars: #{vars.inspect}\")\n
                  \ $evm.log(\"info\", \"============== args: #{args.inspect}\")\n
                  \ $evm.instantiate(\"/Yale/Methods/Emails/Email_Owner?#{args}\")\n\n
                  \ ############\n  # Exit method\n  #\n  log(:info, \"CloudForms
                  Automate Method Ended\")\n  exit MIQ_OK\nend\n\n\n\n"
                attach_ebs.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: attach_ebs
                      display_name: Attach EBS Volume to Instance
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                send_email.rb: ! '#

                  #            Automate Method

                  #

                  $evm.log("info", "Automate Method Started")

                  #

                  #            Method Code Goes here

                  #


                  #

                  #

                  #

                  $evm.log("info", "Automate Method Ended")

                  exit MIQ_OK

'
                send_email.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: send_email
                      display_name: Send Email
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
            AWS-EBS-Create.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: Creates a New EBS Volume
                    display_name: Amazon EBS Volume Create
                    name: AWS-EBS-Create
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: state
                      name: create_ebs
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: state
                      name: create_attach_ebs_button
                      display_name: 
                      datatype: string
                      priority: 2
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              AWS-EBS-Create.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Create EBS Volume
                    name: AWS-EBS-Create
                    inherits: 
                    description: Create New EBS Volume
                  fields:
                  - create_ebs:
                      on_entry: create_ebs
              AWS-EBS-Create-Attach-Button.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EBS Create Attach Button
                    name: AWS-EBS-Create-Attach-Button
                    inherits: 
                    description: Create and Attach EBS Volume via Button
                  fields:
                  - create_attach_ebs_button:
                      on_entry: create_attach_ebs_button
              __methods__:
                create_attach_ebs_button.rb: ! "###################################\r\n#\r\n#
                  CloudForms Automate Method: create_attach_ebs_volume_button\r\n#\r\n#
                  This method is used to create a AWS EC2 EBS Volume via button\r\n#\r\n###################################\r\n#
                  Method for logging\r\ndef log(level, message)\r\n  @method = 'create_attach_ebs_volume_button'\r\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\r\nend\r\n\r\nlog(:info,
                  \"CloudForms Automate Method Started\")\r\n\r\nrequire 'aws-sdk'\r\ndialog_field
                  = $evm.object\r\n\r\n# Get provisioning object\r\n\r\nbegin\r\n\r\n
                  \ vm = $evm.root['vm']\r\n  #log(:info, \" VM Info : #{vm.inspect}\")\r\n\r\n
                  \ ems = vm.ext_management_system\r\n\r\n  region = ems.provider_region\r\n\r\n
                  \ $evm.log(\"info\", \"--------------calculate_ebs_name started------------------\")\r\n
                  \ # this creates an ELB name that follows the rules below\r\n  #
                  max length is 32 chars, all lower case, no underscores or dashes
                  except those as part of composition\r\n  # pattern of userid-group
                  name limited-name passed in\r\n  # regex used: /[\\W+]|[_]/  Strips
                  all non word characters and underscores (underscore is part of /W)\r\n
                  \ # length of the group portion of the name is defined below\r\n
                  \ group_length_limit = 15\r\n  my_user = $evm.root['user']\r\n\r\n
                  \ $evm.log(\"info\", \"userid ===> #{my_user.userid}\")\r\n  $evm.log(\"info\",
                  \"group membership ===> #{my_user.miq_group.description}\")\r\n\r\n
                  \ cleaned_group = my_user.miq_group.description.downcase.gsub(/[\\W+]|[_]/,
                  '').first(group_length_limit)\r\n\r\n  $evm.log(\"info\", \"user
                  group normalized (15 chars) ===> #{cleaned_group}\")\r\n\r\n  #
                  Get the name of the ELB name from the request ... validate_ELB_name
                  adds it\r\n\r\n  vol_name = $evm.root.attributes['dialog_aws_ebs_volume_name']\r\n
                  \ clean_name = vol_name.downcase.gsub(/[\\W+]|[_]/, '')\r\n  $evm.log(\"info\",
                  \"cleaned passed name ===> #{clean_name}\")\r\n\r\n  cleaned_ebs
                  = \"#{my_user.userid}-#{cleaned_group}-#{clean_name}\".first(32)\r\n
                  \ ebs_name = cleaned_ebs\r\n\r\n  $evm.log(\"info\", \"Fully crafted
                  name (32 char max, AWS limit) ===> #{cleaned_ebs}\")\r\n  $evm.log(\"info\",
                  \"--------------calculate_elb_name ended------------------\")\r\n\r\n
                  \ # Addiong the user info and downcasing it\r\n  user = $evm.root['user'].userid.downcase\r\n\r\n
                  \ #AWS doesn't like underscores, dashes or spaces so strip for group\r\n
                  \ user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\r\n\r\n
                  \ # Get the Amazon authentication credentials...\r\n  access_key_id
                  ||= ems.authentication_userid\r\n  secret_access_key = ems.authentication_password\r\n\r\n
                  \ AWS.config(\r\n      :access_key_id => access_key_id,\r\n      :secret_access_key
                  => secret_access_key\r\n  )\r\n\r\n\r\n  # Get volume name from
                  the dialog\r\n  # vol_name = $evm.root.attributes['dialog_aws_ebs_volume_name']\r\n
                  \  log(:info, \"++++++++++++++++++ Volume Name : #{ebs_name} +++++++++++++++++++++++++\")\r\n\r\n\r\n
                  \ # Get the EBS size\r\n  ebs_size = $evm.root.attributes['dialog_ebs_size'].to_i\r\n\r\n
                  \ log(:info, \" +++++++++++++++++ EBS Size : #{ebs_size.to_i} ++++++++++++++\")\r\n\r\n\r\n
                  \ # Start Here\r\n\r\n  ec2 = AWS::EC2.new( :region => region  )\r\n\r\n
                  \ i = ec2.instances[\"#{vm.uid_ems}\"]\r\n  availability_zone =
                  i.availability_zone\r\n\r\n  # Retreive the device name from the
                  dialog (ex /dev/sdf)\r\n  selected_device_name = $evm.root.attributes['dialog_ebs_device_list']\r\n\r\n
                  \ #log(:info, \"+++++++++++++++ Selected Region: #{region} +++++++++++++++++++++++++\")\r\n\r\n
                  \ #Set Availability Zone\r\n\r\n  #log(:info, \"+++++++++++++++
                  Selected Availability Zone : #{availability_zone} ++++++++++++++++++\")\r\n\r\n
                  \ #log(:info, \"+++++++++++++++ User Name : #{user} ++++++++++++++++++++++\")\r\n
                  \ #log(:info, \"+++++++++++++++ Group Name : #{user_group} +++++++++++++++++++\")\r\n\r\n
                  \ volume = ec2.volumes.create(:size => ebs_size,\r\n                              :availability_zone
                  => availability_zone)\r\n  sleep 1 until volume.status != :creating\r\n\r\n
                  \ # Now Tag the newly created volume from the username/groupid and
                  volume name\r\n  ec2.volumes[\"#{volume.id}\"].tags[\"userid\"]
                  = \"#{user}\"\r\n  ec2.volumes[\"#{volume.id}\"].tags[\"usergroup\"]
                  = \"#{user_group}\"\r\n  ec2.volumes[\"#{volume.id}\"].tags[\"Name\"]
                  = \"#{vol_name}\"\r\n\r\n  # Now attach the newly created volume
                  to the current instance\r\n  attachment = volume.attach_to(ec2.instances[vm.uid_ems],
                  \"#{selected_device_name}\")\r\n  sleep 1 until attachment.status
                  != :attaching\r\n  log(:info, \"+++++++++++++++++++ Attached #{attachment}
                  to #{i} with device #{selected_device_name} ++++++++++++++++++++++\")\r\n\r\n
                  \ vars = Hash.new\r\n  vars[:type] = \"create_attach_ebs_volume\"\r\n
                  \ vars[:action] = \"Created\"\r\n  vars[:service_name] = \"AWS EBS\"\r\n
                  \ vars[:vol_name] = vol_name\r\n  vars[:selected_device_name] =
                  selected_device_name\r\n  vars[:vm_name] = vm['name']\r\n\r\n  require
                  'json'\r\n  require 'uri'\r\n  args = \"payload=#{vars.to_json}\"\r\n
                  \ args = URI.escape(args)\r\n  $evm.log(\"info\", \"==============
                  vars: #{vars.inspect}\")\r\n  $evm.log(\"info\", \"==============
                  args: #{args.inspect}\")\r\n  $evm.instantiate(\"/Yale/Methods/Emails/Email_Owner?#{args}\")\r\n\r\n
                  \ ############\r\n  # Exit method\r\n  #\r\n  log(:info, \"CloudForms
                  Automate Method Ended\")\r\n  exit MIQ_OK\r\nend\r\n"
                create_attach_ebs_button.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: create_attach_ebs_button
                      display_name: Create Attach EBS Volume Button
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                create_ebs.rb: ! "###################################\n#\n# CloudForms
                  Automate Method: create_ebs_volume\n#\n# This method is used to
                  create a AWS EC2 EBS Volume\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'create_ebs_volume'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\n\n#
                  Get provisioning object\n\nbegin\n\n  access_key_id = nil\n  secret_access_key
                  = nil\n\n  # Addiong the user info and downcasing it\n  user = $evm.root['user'].userid.downcase\n\n
                  \ #AWS doesn't like underscores, dashes or spaces so strip for group\n
                  \ user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n\n
                  \ # Get the Amazon authentication credentials...\n  access_key_id
                  = $evm.object['access_key_id']\n  secret_access_key = $evm.object.decrypt('secret_access_key')\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  region = $evm.object['dialog_aws_allowed_regions']\n\n
                  \ availability_zone = $evm.object['dialog_aws_availability_zones_allowed']\n\n
                  \ # Get volume name from the dialog\n  vol_name = $evm.object['dialog_aws_ebs_volume_name']\n\n
                  \ # Get the EBS size\n  ebs_size = $evm.object['dialog_ebs_size'].to_i\n\n
                  \ log(:info, \" +++++++++++++++++ EBS Size : #{ebs_size.to_i} ++++++++++++++\")\n\n\n
                  \ # Start Here\n\n\n  log(:info, \"+++++++++++++++ Selected Region:
                  #{region} +++++++++++++++++++++++++\")\n\n  #Set Availability Zone\n\n
                  \ log(:info, \"+++++++++++++++ Selected Availability Zone : #{availability_zone}
                  ++++++++++++++++++\")\n\n  log(:info, \"+++++++++++++++ User Name
                  : #{user} ++++++++++++++++++++++\")\n  log(:info, \"+++++++++++++++
                  Group Name : #{user_group} +++++++++++++++++++\")\n\n  ec2 = AWS::EC2.new(
                  :region => region  )\n\n\n  volume = ec2.volumes.create(:size =>
                  ebs_size,\n                              :availability_zone => availability_zone)\n\n
                  \ # Now Tag the newly created volume from the username/groupid and
                  volume name\n  ec2.volumes[\"#{volume.id}\"].tags[\"userid\"] =
                  \"#{user}\"\n  ec2.volumes[\"#{volume.id}\"].tags[\"usergroup\"]
                  = \"#{user_group}\"\n  ec2.volumes[\"#{volume.id}\"].tags[\"Name\"]
                  = \"#{vol_name}\"\n\n  ############\n  # Exit method\n  #\n  log(:info,
                  \"CloudForms Automate Method Ended\")\n  exit MIQ_OK\nend\n"
                create_ebs.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: create_ebs
                      display_name: Create New EBS Volume
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
            AWS-EBS-Delete.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: Amazon EBS Volume Delete
                    display_name: Amazon EBS Volume Delete
                    name: AWS-EBS-Delete
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: attribute
                      name: access_key_id
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: AKIAIOCVMVAOW327SEJQ
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: secret_access_key
                      display_name: 
                      datatype: password
                      priority: 2
                      owner: 
                      default_value: v2:{tJdSOsAqIckUycQyke3iHg6jhw8drpMAgsjpZXz5TGCtJfE1clFJFvpy+/sFMoay}
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: allowed_regions
                      display_name: 
                      datatype: string
                      priority: 3
                      owner: 
                      default_value: us-east-1, us-west-1, us-west-2
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: state
                      name: delete_ebs
                      display_name: 
                      datatype: string
                      priority: 4
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: state
                      name: delete_ebs_button
                      display_name: 
                      datatype: string
                      priority: 5
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              AWS-EBS-Delete.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Delete EBS Volume
                    name: AWS-EBS-Delete
                    inherits: 
                    description: Delete EBS Volume
                  fields:
                  - delete_ebs:
                      on_entry: delete_ebs
              AWS-EBS-Delete-Button.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EBS Delete Button
                    name: AWS-EBS-Delete-Button
                    inherits: 
                    description: AWS EBS Delete via Button
                  fields:
                  - delete_ebs_button:
                      on_entry: delete_ebs_button
              __methods__:
                delete_ebs.rb: ! "###################################\n#\n# CloudForms
                  Automate Method: delete_ebs_volume\n#\n# This method is used to
                  delete a AWS EC2 EBS Volume\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'delete_ebs_volume'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef dumpRoot\n
                  \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                  \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                  - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                  \"\")\nend\n\n# dump root object attributes\ndumpRoot\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\n\n#
                  Get provisioning object\ndialog_field = $evm.object\n\nbegin\n\n
                  \ access_key_id = nil\n  secret_access_key = nil\n\n  # Addiong
                  the user info and downcasing it\n  user = $evm.root['user'].userid.downcase\n\n
                  \ #AWS doesn't like underscores, dashes or spaces so strip for group\n
                  \ user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n\n
                  \ # Get the Amazon authentication credentials...\n  access_key_id
                  = $evm.object['access_key_id']\n  secret_access_key = $evm.object.decrypt('secret_access_key')\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  vol_list_region = $evm.object['dialog_aws_ebs_volume_list']\n
                  \ log(:info, \"++++++++++++++++ Vol List Region : #{vol_list_region}
                  +++++++++++++++++++\")\n  vol_list_region = vol_list_region.split(\"|\").each
                  {|t| t.strip!}\n\n  region = vol_list_region[1]\n\n\n  selected_ebs_volume
                  = vol_list_region[0]\n  log(:info, \"++++++++++++ Selected EBS Volume
                  : #{selected_ebs_volume} ++++++++++++++++++++\")\n\n  # Start Here\n\n
                  \ log(:info, \"++++++++++++++++++ Region : #{region} +++++++++++++++++++\")\n\n
                  \ ec2 = AWS::EC2.new( :region => region  )\n\n  volume = ec2.volumes[selected_ebs_volume]\n
                  \   volume.attachments.each do |attachment|\n        attachment.delete(:force
                  => true)\n      end\n    sleep 1 until volume.status == :available\n
                  \   volume.delete\n\n  ############\n  # Exit method\n  #\n  log(:info,
                  \"CloudForms Automate Method Ended\")\n  exit MIQ_OK\nend\n"
                delete_ebs.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: delete_ebs
                      display_name: Delete EBS Volume
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                delete_ebs_button.rb: ! "###################################\r\n#\r\n#
                  CloudForms Automate Method: delete_ebs_volume_button\r\n#\r\n# This
                  method is used to delete a AWS EC2 EBS Volume via Button\r\n#\r\n###################################\r\n#
                  Method for logging\r\ndef log(level, message)\r\n  @method = 'delete_ebs_volume_button'\r\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\r\nend\r\n\r\ndef
                  dumpRoot\r\n  $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  Begin Attributes\")\r\n  $evm.root.attributes.sort.each { |k, v|
                  $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Attributes -
                  #{k}: #{v}\")}\r\n  $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  End Attributes\")\r\n  $evm.log(\"info\", \"\")\r\nend\r\n\r\n#
                  dump root object attributes\r\ndumpRoot\r\n\r\nlog(:info, \"CloudForms
                  Automate Method Started\")\r\n\r\nrequire 'aws-sdk'\r\n\r\n# Get
                  provisioning object\r\ndialog_field = $evm.object\r\n\r\nbegin\r\n\r\n
                  \ vm = $evm.root['vm']\r\n  #log(:info, \" VM Info : #{vm.inspect}\")\r\n\r\n
                  \ ems = vm.ext_management_system\r\n\r\n  region = ems.provider_region\r\n\r\n
                  \ # Get the Amazon authentication credentials...\r\n  access_key_id
                  ||= ems.authentication_userid\r\n  secret_access_key = ems.authentication_password\r\n\r\n
                  \ # Addiong the user info and downcasing it\r\n  user = $evm.root['user'].userid.downcase\r\n\r\n
                  \ #AWS doesn't like underscores, dashes or spaces so strip for group\r\n
                  \ user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\r\n\r\n
                  \ AWS.config(\r\n      :access_key_id => access_key_id,\r\n      :secret_access_key
                  => secret_access_key\r\n  )\r\n\r\n  vol_list_region = $evm.root.attributes['dialog_aws_ebs_volume_list']\r\n
                  \ log(:info, \"++++++++++++++++ Vol List Region : #{vol_list_region}
                  +++++++++++++++++++\")\r\n  vol_list_region = vol_list_region.split(\"|\").each
                  {|t| t.strip!}\r\n\r\n  region = vol_list_region[1]\r\n\r\n\r\n
                  \ selected_ebs_volume = vol_list_region[0]\r\n  log(:info, \"++++++++++++
                  Selected EBS Volume : #{selected_ebs_volume} ++++++++++++++++++++\")\r\n\r\n
                  \ # Start Here\r\n\r\n  log(:info, \"++++++++++++++++++ Region :
                  #{region} +++++++++++++++++++\")\r\n\r\n  ec2 = AWS::EC2.new( :region
                  => region  )\r\n\r\n  volume = ec2.volumes[selected_ebs_volume]\r\n
                  \ volume.attachments.each do |attachment|\r\n    attachment.delete(:force
                  => true)\r\n  end\r\n  sleep 1 until volume.status == :available\r\n
                  \ volume.delete\r\n\r\n  # Email info\r\n  vars = Hash.new\r\n  vars[:type]
                  = \"delete_ebs_volume\"\r\n  vars[:action] = \"Deleted\"\r\n  vars[:service_name]
                  = \"AWS EBS\"\r\n  vars[:vm_name] = vm['name']\r\n  vars[:vol_name]
                  = selected_ebs_volume\r\n\r\n  require 'json'\r\n  require 'uri'\r\n
                  \ args = \"payload=#{vars.to_json}\"\r\n  args = URI.escape(args)\r\n
                  \ $evm.log(\"info\", \"============== vars: #{vars.inspect}\")\r\n
                  \ $evm.log(\"info\", \"============== args: #{args.inspect}\")\r\n
                  \ $evm.instantiate(\"/Yale/Methods/Emails/Email_Owner?#{args}\")\r\n\r\n
                  \ ############\r\n  # Exit method\r\n  #\r\n  log(:info, \"CloudForms
                  Automate Method Ended\")\r\n  exit MIQ_OK\r\nend\r\n"
                delete_ebs_button.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: delete_ebs_button
                      display_name: Delete EBS Volume Button
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
            AWS-EBS-Detach.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: AWS Detach EBS From Instance
                    display_name: AWS Detach EBS From Instance
                    name: AWS-EBS-Detach
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: attribute
                      name: access_key_id
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: AKIAIOCVMVAOW327SEJQ
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: secret_access_key
                      display_name: 
                      datatype: password
                      priority: 2
                      owner: 
                      default_value: v2:{tJdSOsAqIckUycQyke3iHg6jhw8drpMAgsjpZXz5TGCtJfE1clFJFvpy+/sFMoay}
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: allowed_regions
                      display_name: 
                      datatype: string
                      priority: 3
                      owner: 
                      default_value: us-east-1, us-west-1, us-west-2
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: state
                      name: detach_ebs
                      display_name: 
                      datatype: string
                      priority: 4
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              detach-ebs.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Detach EBS Volume
                    name: detach-ebs
                    inherits: 
                    description: Detach EBS Volume
                  fields:
                  - detach_ebs:
                      on_entry: detach_ebs
              __methods__:
                detach_ebs.rb: ! "###################################\r\n#\r\n# CloudForms
                  Automate Method: detach_ebs\r\n#\r\n# This method is used to detach
                  a AWS EC2 EBS Volume from an instance\r\n#\r\n###################################\r\n#
                  Method for logging\r\ndef log(level, message)\r\n  @method = 'detach_ebs'\r\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\r\nend\r\n\r\ndef
                  dumpRoot\r\n  $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  Begin Attributes\")\r\n  $evm.root.attributes.sort.each { |k, v|
                  $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Attributes -
                  #{k}: #{v}\")}\r\n  $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  End Attributes\")\r\n  $evm.log(\"info\", \"\")\r\nend\r\n\r\n#
                  dump root object attributes\r\ndumpRoot\r\n\r\nlog(:info, \"CloudForms
                  Automate Method Started\")\r\n\r\nrequire 'aws-sdk'\r\ndialog_field
                  = $evm.object\r\n\r\n# Get provisioning object\r\n\r\nbegin\r\n
                  \ vm = $evm.root['vm']\r\n  #log(:info, \" VM Info : #{vm.inspect}\")\r\n\r\n
                  \ ems = vm.ext_management_system\r\n\r\n  region = ems.provider_region\r\n\r\n
                  \ # Get the Amazon authentication credentials...\r\n  access_key_id
                  ||= ems.authentication_userid\r\n  secret_access_key = ems.authentication_password\r\n\r\n
                  \ AWS.config(\r\n      :access_key_id => access_key_id,\r\n      :secret_access_key
                  => secret_access_key\r\n  )\r\n\r\n  # Start Here\r\n  log(:info,
                  \" ++++++++++++++++++ Selected Region: #{region} ++++++++++++++++++++\")\r\n\r\n
                  \ #\r\n  ec2 = AWS::EC2.new( :region => region )\r\n\r\n  selected_ebs_volume
                  = $evm.root.attributes['dialog_aws_ec2_ebs_list_attachments']\r\n
                  \ log(:info, \"++++++++++++ Selected EBS Volume : #{selected_ebs_volume}
                  ++++++++++++++++++++\")\r\n\r\n  volume_id, device, name = selected_ebs_volume.split('|')\r\n\r\n
                  \ # Start Here\r\n  volume = ec2.volumes[volume_id]\r\n  log(:info,
                  \"+++++++++++++++++ Inspect Volume : #{volume.inspect} +++++++++++++++++++++++++\")\r\n
                  \ volume.attachments.each do |attachment|\r\n    attachment.delete(:force
                  => true)\r\n  end\r\n  sleep 1 until volume.status == :available\r\n\r\n
                  \ # Email info\r\n\r\n  vars = Hash.new\r\n  vars[:type] = \"detach_ebs_volume\"\r\n
                  \ vars[:action] = \"Detached\"\r\n  vars[:service_name] = \"AWS
                  EBS\"\r\n  vars[:vol_name] = selected_ebs_volume\r\n  vars[:vm_name]
                  = vm['name']\r\n\r\n  require 'json'\r\n  require 'uri'\r\n  args
                  = \"payload=#{vars.to_json}\"\r\n  args = URI.escape(args)\r\n  $evm.log(\"info\",
                  \"============== vars: #{vars.inspect}\")\r\n  $evm.log(\"info\",
                  \"============== args: #{args.inspect}\")\r\n  $evm.instantiate(\"/Yale/Methods/Emails/Email_Owner?#{args}\")\r\n\r\n
                  \ ############\r\n  # Exit method\r\n  #\r\n  log(:info, \"Detach
                  EBS Volume - CloudForms Automate Method Ended\")\r\n  exit MIQ_OK\r\nend\r\n"
                detach_ebs.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: detach_ebs
                      display_name: Detach EBS Volum
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
            AWS-S3-StateMachine.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: State Machine for AWS S3 provisioning
                    display_name: State Machine for AWS S3 provisioning
                    name: AWS-S3-StateMachine
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: attribute
                      name: bucket_name_prefix
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: redhat-
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: default_aws_region
                      display_name: 
                      datatype: string
                      priority: 2
                      owner: 
                      default_value: us-west-2
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: access_key_id
                      display_name: 
                      datatype: string
                      priority: 3
                      owner: 
                      default_value: AKIAIYDGQLSIGCPATHEA
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: secret_access_key
                      display_name: 
                      datatype: password
                      priority: 4
                      owner: 
                      default_value: ! 'v1:{fpDEuw8hm39Tmr95lhR5XF9iYdJ3vv/oGshvNU9gdi4Niu8OMFfsE12aw2yw

                        1XIL}'
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: state
                      name: validate_bucket_name
                      display_name: 
                      datatype: string
                      priority: 5
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: validate_bucket_name
                      on_exit: 
                      on_error: aws_s3_error
                      max_retries: '100'
                      max_time: 
                  - field:
                      aetype: state
                      name: create_s3_bucket
                      display_name: 
                      datatype: string
                      priority: 6
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: create_s3_bucket
                      on_exit: 
                      on_error: aws_s3_error
                      max_retries: '100'
                      max_time: 
                  - field:
                      aetype: state
                      name: verify_s3_bucket
                      display_name: 
                      datatype: string
                      priority: 7
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: verify_s3_bucket
                      on_exit: 
                      on_error: aws_s3_error
                      max_retries: '100'
                      max_time: 
                  - field:
                      aetype: state
                      name: send_email
                      display_name: 
                      datatype: string
                      priority: 8
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: send_email
                      on_exit: 
                      on_error: aws_s3_error
                      max_retries: 
                      max_time: 
              ProvisionS3Bucket.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Provision AWS S3 Bucket
                    name: ProvisionS3Bucket
                    inherits: 
                    description: Provision AWS S3 Bucket
                  fields:
                  - access_key_id:
                      value: AKIAIYDGQLSIGCPATHEA
                  - secret_access_key:
                      value: ! 'v1:{fpDEuw8hm39Tmr95lhR5XF9iYdJ3vv/oGshvNU9gdi4Niu8OMFfsE12aw2yw

                        1XIL}'
              __methods__:
                aws_s3_error.rb: ! '#            Automate Method

                  #

                  $evm.log("info", "AWS S3 Error - Automate Method Started")

                  #

                  #            Method Code Goes here

                  #


                  $evm.log("info", "Error creating AWS S3 bucket")


                  #

                  #

                  #

                  $evm.log("info", "AWS S3 Error - Automate Method Ended")

                  exit MIQ_ABORT

'
                aws_s3_error.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_s3_error
                      display_name: ! 'AWS S3 Error '
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                create_s3_bucket.rb: ! "#            Automate Method\n#\n$evm.log(\"info\",
                  \"======== CREATE S3 BUCKET ======== Automate Method Started\")\n#\n#
                  \           Method Code Goes here\n#\nrequire 'aws-sdk'\n\nbegin\n
                  \  access_key_id = nil\n   secret_access_key = nil\n \n# Get the
                  Amazon authentication credentials...\n   access_key_id ||= $evm.object['access_key_id']\n
                  \  secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \  AWS.config(\n      :access_key_id => access_key_id,\n  \t:secret_access_key
                  => secret_access_key\n   )\n\n   # Get the name of the bucket name
                  from the request ... validate_bucket_name adds it\n   bucket_name
                  = $evm.root['bucket_name']\n   # Retrieve the region from the dialog\n
                  \  region      = $evm.root['bucket_aws_region']\n\n   task = $evm.root[\"service_template_provision_task\"]\n
                  \  $evm.log(\"info\", \"#{task.inspect}\")\n\n   $evm.log(\"info\",
                  \"========== AWS PROV ATTRIBUTE LOG =================================\")\n
                  \  $evm.log(\"info\", \"Listing ROOT Attributes:\")\n   $evm.root.attributes.sort.each
                  { |k, v| $evm.log(\"info\", \"\\t#{k}: #{v}\")}\n   $evm.log(\"info\",
                  \"=========== AWS PROV ATTRIBUTE LOG ================================\")\n\n\n
                  \  $evm.log(\"info\", \"========== SERVICE TASK ATTRIBUTE LOG =================================\")\n
                  \  $evm.log(\"info\", \"Listing SERVICE TASK Attributes:\")\n   task.attributes.sort.each
                  { |k, v| $evm.log(\"info\", \"\\t#{k}: #{v}\")}\n   $evm.log(\"info\",
                  \"=========== SERVICE TASK ATTRIBUTE LOG ================================\")\n\n\n
                  \  vm = $evm.root['vm']\n   $evm.log(\"info\", vm.inspect)\n\n   #
                  Create the basic S3 object\n   s3_instance = AWS::S3.new(:region
                  => region)\n\n   # Load up the 'bucket' we want to store things
                  in\n   bucket = s3_instance.buckets[bucket_name]\n   # If the bucket
                  doesn't exist, create it\n   begin\n      unless bucket.exists?\n\t
                  \    $evm.log(\"info\", \"Creating AWS S3 bucket #{bucket_name}...\")\n\t\t
                  s3_instance.buckets.create(bucket_name)\n\t     # Return the newly
                  created bucket\n\t  else\n\t\t $evm.log(\"info\", \"Bucket #{bucket_name}
                  already exists! Aborting!\")\n\t     exit MIQ_ABORT\n\t  end\n   rescue
                  => ex\n        $evm.log(\"info\", \"======  AWS Exception =====\")\n
                  \       $evm.log(\"info\", ex.message)\n        exit MIQ_ABORT\n
                  \  end\nrescue => ex\n     $evm.log(\"info\", \"======  AWS Exception
                  =====\")\n     $evm.log(\"info\", ex.message)\n     exit MIQ_ABORT\nend\n#\n#\n#\n$evm.log(\"info\",
                  \"======== CREATE S3 BUCKET ======== Automate Method Ended\")\nexit
                  MIQ_OK\n"
                create_s3_bucket.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: create_s3_bucket
                      display_name: Create AWS S3 Bucket
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                send_email.rb: ! "###################################\n\nbegin\n  @method
                  = '======= AWS S3 Email Method =========='\n  $evm.log(\"info\",
                  \"#{@method} - EVM Automate Method Started\")\n\n  # Turn of verbose
                  logging\n  @debug = true\n\n # Get from_email_address from model
                  unless specified below\n  from = nil\n  from ||= $evm.object['from_email_address']\n\n
                  \ # Get signature from model unless specified below\n  signature
                  = nil\n  signature ||= $evm.object['signature']\n\n  appliance ||=
                  $evm.root['miq_server'].ipaddress\n\n  ###################################\n
                  \ #\n  # Method: boolean\n  #\n  ###################################\n
                  \ def boolean(string)\n    return true if string == true || string
                  =~ (/(true|t|yes|y|1)$/i)\n    return false if string == false ||
                  string.nil? || string =~ (/(false|f|no|n|0)$/i)\n\n    # Return
                  false if string does not match any of the above\n    $evm.log(\"info\",\"Invalid
                  boolean string:<#{string}> detected. Returning false\") if @debug\n
                  \   return false\n  end\n\n  def email_enduser(appliance, from,
                  signature) \n    \n    #\n    # Get VM Owner Name and Email\n    #\n
                  \   evm_owner_email = $evm.root['email_address'] \n    bucket_name
                  = $evm.root['bucket_name']\n    region = $evm.root['bucket_aws_region']\n
                  \   \n    to = nil\n    to = evm_owner_email unless evm_owner_email.nil?\n
                  \   \n    if to.nil?\n      $evm.log(\"info\", \"#{@method} Email
                  not sent because no recipient specified.\")\n      exit MIQ_OK\n
                  \   end\n\n    # Assign original to_email_Address to orig_to for
                  later use\n    orig_to = evm_owner_email\n\n    # Set email Subject\n
                  \   subject = \"Your AWS S3 bucket request has Completed - AWS S3:
                  [#{bucket_name}]\"\n\n\n    # Set the opening body to Hello\n    body
                  = \"Hello, \"\n    body += \"This email is being sent by EVM to
                  inform you of the provisioning of a new AWS S3 Bucket.<br>\"\n    body
                  += \"This new AWS S3 Bucket requires verification in the Amazon
                  EC2 console.<br>\"\n    body += \"Once that has been completed,
                  use this message to inform the \"\n    body += \"requester that
                  their new AWsS3 Bucket is ready.<br><br>\"\n    body += \"--------------------------------
                  <br>\"\n    body += \"Forward the message below to <br>\"\n    body
                  += \"#{orig_to}<br>\"\n    body += \"--------------------------------
                  <br><br>\"\n    body += \"<br>\"\n\n    body += \"--------------------------------
                  <br>\"\n    body += \" Amazon S3 Bucket Info<br>\"\n    body +=
                  \"-------------------------------- <br><br>\"\n    body += \"<br><br><b>S3
                  Bucket Name  :</b> #{bucket_name}\"\n    body += \"<br><br><b>S3
                  Amazon Region:</b> #{region}\"\n    body += \"<br><br> If you have
                  any issues with your new AWS S3 Bucket please contact Support.\"\n
                  \   body += \"<br><br> Thank you,\"\n    body += \"<br> #{signature}\"\n
                  \   \n    #\n    # Send email to user\n    #\n    $evm.log(\"info\",
                  \"#{@method} - Sending email to <#{to}> from <#{from}> subject:
                  <#{subject}>\") if @debug\n    $evm.execute('send_email', to, from,
                  subject, body)\n  end\n  \n  email_enduser(appliance, from, signature)\n
                  \ \n  \n  #\n  # Exit method\n  #\n  $evm.log(\"info\", \"#{@method}
                  - EVM Automate Method Ended\")\n  exit MIQ_OK\n\n  #\n  # Set Ruby
                  rescue behavior\n  #\nrescue => err\n  $evm.log(\"error\", \"#{@method}
                  - [#{err}]\\n#{err.backtrace.join(\"\\n\")}\")\n  exit MIQ_STOP\nend\n"
                send_email.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: send_email
                      display_name: Send S3 Provisioning Email
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                validate_bucket_name.rb: ! "#            Automate Method\n#\n$evm.log(\"info\",
                  \"======== VALIDATE S3 BUCKET ======== Automate Method Started\")\n#\n#
                  \           Method Code Goes here\n#\nrequire 'aws-sdk'\n\nbegin\n
                  \  access_key_id = nil\n   secret_access_key = nil\n   # Get the
                  Amazon authentication credentials...\n   access_key_id ||= $evm.object['access_key_id']\n
                  \  secret_access_key = $evm.object.decrypt('secret_access_key')\n\n\n
                  \ $evm.log(\"info\", \"ID: #{access_key_id} Secret: #{secret_access_key}\")\n\n
                  \  AWS.config(\n      :access_key_id => access_key_id,\n  \t:secret_access_key
                  => secret_access_key\n   )\n    \n   ems = $evm.vmdb('ems')\n\n
                  \  $evm.log(\"info\", \"EMS #{ems.inspect}\")\n\n   amazon = ems.first\n\n
                  \  $evm.log(\"info\", \"EMS Fist #{amazon.inspect}\")\n\n   # Get
                  Prefix ....\n   prefix = $evm.root['bucket_name_prefix']\n   # Get
                  the name of the bucket name from the dialog\\\n   bucket_name =
                  $evm.root['dialog_bucket_name']\n   # Retrieve the region from the
                  dialog\n   region      = $evm.root['dialog_aws_region']\n\n   #
                  Get Email ...\n   email = $evm.root['dialog_email_address']\n\n
                  \  if email != nil\n      $evm.object['email_address'] = \"#{email}\"\n
                  \  end\n\n   # Get current provisioning status\n   task = $evm.root['service_template_provision_task']\n\n
                  \  # Retrieve the GUID to make it really unique\n   guid = \"#{task.miq_request_id}\"\n\n
                  \  # Create the basic S3 object\n   s3_instance = AWS::S3.new(:region
                  => region)\n\n\n   # Concatenate the bucket name\n   new_bucket_name
                  = \"#{prefix}#{bucket_name}-#{guid}\"\n\n   # Check for Upper Case
                  letters in the name or underscore\n   if new_bucket_name.match(/[A-Z]/)
                  || new_bucket_name.match('_')\n      raise \"S3 bucket name: #{new_bucket_name}
                  contains capital letters.  S3 bucket name must not contain capital
                  letters or undersocres\"\n   end\n\n\n   # Load up the 'bucket'
                  we want to store things in\n   bucket = s3_instance.buckets[new_bucket_name]\n
                  \  # If the bucket doesn't exist, create it\n   begin\n      unless
                  bucket.exists?\n\t     $evm.log(\"info\", \"AWS S3 bucket #{new_bucket_name}
                  name is unique for region #{region} ...\")\n         $evm.object['bucket_name']
                  = \"#{new_bucket_name}\"\n         $evm.object['bucket_aws_region']
                  = \"#{region}\"\n\t  else\n\t\t $evm.log(\"info\", \"Bucket #{new_bucket_name}
                  already exists! Aborting!\")\n\t     exit MIQ_ABORT\n\t  end\n   rescue
                  => ex\n        $evm.log(\"info\", \"======  AWS Exception =====\")\n
                  \       $evm.log(\"info\", ex.message)\n        exit MIQ_ABORT\n
                  \  end\nrescue => ex\n     $evm.log(\"info\", \"======  AWS Exception
                  =====\")\n     $evm.log(\"info\", ex.message)\n     exit MIQ_ABORT\nend\n#\n$evm.log(\"info\",
                  \"======== VALIDATE S3 BUCKET ======== Automate Method Ended\")\nexit
                  MIQ_OK\n"
                validate_bucket_name.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: validate_bucket_name
                      display_name: Validate AWS S3 Bucket Name
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                verify_s3_bucket.rb: ! "#            Automate Method\n#\n$evm.log(\"info\",
                  \"======== VERIFY S3 BUCKET ======== Automate Method Started\")\n#\n#
                  \           Method Code Goes here\n#\nrequire 'aws-sdk'\n\nbegin\n
                  \  access_key_id = nil\n   secret_access_key = nil\n  # Get the
                  Amazon authentication credentials...\n   access_key_id ||= $evm.object['access_key_id']\n
                  \  secret_access_key = $evm.object.decrypt('secret_access_key')\n\n
                  \  AWS.config(\n      :access_key_id => access_key_id,\n  \t:secret_access_key
                  => secret_access_key\n   )\n\n   # Get the name of the bucket name
                  from the dialog\\\n   bucket_name = $evm.root['bucket_name']\n   #
                  Retrieve the region from the dialog\n   region      = $evm.root['bucket_aws_region']\n\n
                  \  # Create the basic S3 object\n   s3_instance = AWS::S3.new(:region
                  => region)\n\n\n   bucket = s3_instance.buckets[bucket_name]\n   #
                  If the bucket doesn't exist, create it\n   begin\n      unless bucket.exists?\n\t\t
                  raise \"Bucket [#{bucket_name}] was not created! Aborting!\"\n\t
                  \ else\n\t     $evm.log(\"info\", \"AWS S3 bucket #{bucket_name}
                  exists and created successfully in region #{region} ...\")\n\t  end\n
                  \  rescue => ex\n        $evm.log(\"info\", \"======  AWS Exception
                  =====\")\n        $evm.log(\"info\", ex.message)\n        $evm.log(\"info\",
                  \"======  AWS Exception =====\")\n        exit MIQ_ABORT\n   end\nrescue
                  => ex\n     $evm.log(\"info\", \"======  AWS Exception =====\")\n
                  \    $evm.log(\"info\", ex.message)\n     $evm.log(\"info\", \"======
                  \ AWS Exception =====\")\n     exit MIQ_ABORT\nend\n\n#\n#\n#\n$evm.log(\"info\",
                  \"======== VERIFY S3 BUCKET ======== Automate Method Ended\")\nexit
                  MIQ_OK\n"
                verify_s3_bucket.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: verify_s3_bucket
                      display_name: Verify the AWS S3 bucket created
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
            add_keypair.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: add_keypair
                    display_name: Amazon EC2 Keypair
                    name: add_keypair
                    type: 
                    inherits: Yale/StateMachines/AWS-Services/AWS-EBS-Create
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: attribute
                      name: access_key_id
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: AKIAIOCVMVAOW327SEJQ
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: secret_access_key
                      display_name: 
                      datatype: password
                      priority: 2
                      owner: 
                      default_value: v2:{tJdSOsAqIckUycQyke3iHg6jhw8drpMAgsjpZXz5TGCtJfE1clFJFvpy+/sFMoay}
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: default_region
                      display_name: 
                      datatype: string
                      priority: 3
                      owner: 
                      default_value: us-west-2
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: allowed_regions
                      display_name: 
                      datatype: string
                      priority: 4
                      owner: 
                      default_value: us-east-1, us-west-1, us-west-2
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: attribute
                      name: delete_only
                      display_name: 
                      datatype: boolean
                      priority: 5
                      owner: 
                      default_value: 'false'
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: state
                      name: add_keypair
                      display_name: 
                      datatype: string
                      priority: 6
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              add_keypair.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Add Keypair
                    name: add_keypair
                    inherits: 
                    description: Add Keypair
                  fields:
                  - add_keypair:
                      on_entry: maintain_keypair
                      on_error: error_keypair
              remove_keypair.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Remove Keypair
                    name: remove_keypair
                    inherits: 
                    description: Remove Keypair
                  fields:
                  - delete_only:
                      value: 'true'
                  - add_keypair:
                      on_entry: maintain_keypair
                      on_error: error_keypair
              __methods__:
                error_keypair.rb: ! "#\n#            Automate Method\n#\n# Method
                  for logging\ndef log(level, message)\n  @method = 'error_keypair'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\nlog(:info,
                  \"AWS Keypair ERROR - Automate Method Started\")\n#\n#            Method
                  Code Goes here\n#\n\n# Get the service provision object\nprov    =
                  $evm.root['service_template_provision_task']\n\n# Get the current
                  error ...\ncurrent_error = $evm.root['current_error']\n\n###################################\n#\n#
                  Update Status for on_error\n#\n###################################\n$evm.object['ae_result']
                  = 'error'\nprov.message = current_error\n$evm.object['ae_reason']
                  = current_error\n\nlog(:info, \"========== AWS ERROR ATTRIBUTE LOG
                  =================================\")\nlog(:info, \"Listing ROOT
                  Attributes:\")\n$evm.root.attributes.sort.each { |k, v| log(:info,
                  \"\\t#{k}: #{v}\")}\nlog(:info, \"=========== AWS ERROR ATTRIBUTE
                  LOG ================================\")\n\nunless prov.nil?\n  log(:info,
                  \"========== AWS ERROR ATTRIBUTE LOG =================================\")\n
                  \ log(:info, \"Listing PROV OBJECT Attributes:\")\n  prov.attributes.sort.each
                  { |k, v| log(:info, \"\\t#{k}: #{v}\")}\n  log(:info, \"===========
                  AWS ERROR ATTRIBUTE LOG ================================\")\nend\n#\n#\n#\nlog(:info,
                  \"AWS Keypair ERROR - Automate Method Ended\")\nexit MIQ_OK\n"
                error_keypair.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: error_keypair
                      display_name: Error Keypair
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                maintain_keypair.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: maintain_keypair\n#\n# This method is
                  used to maintain an AWS Keypair\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'maintain_keypair'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\nlog(:info,
                  \"@@@@@@@@@@@@@@ CloudForms Automate Method Started @@@@@@@@@@@@@@\")\n\nrequire
                  'aws-sdk'\n\n\n\nbegin\n  delete_only = false\n  delete_only = $evm.object['delete_only']
                  #from schema\n  ssh_key = $evm.object['dialog_ssh_key']\n  verbose_logging
                  = false\n\n\n  # Get the Amazon authentication credentials...\n
                  \ access_key_id = nil\n  secret_access_key = nil\n\n  access_key_id
                  = $evm.object['access_key_id']\n  secret_access_key = $evm.object.decrypt('secret_access_key')\n\n
                  \ #get username and group name cleaned up\n  this_user = $evm.root['user'].userid.downcase\n
                  \ log(:info, \"this_user : #{this_user.inspect}\")\n  this_user_group
                  = $evm.root['user'].miq_group.description.downcase.gsub(/[\\W+]|[_]/,'')
                  #AWS doesn't like underscores, dashes or spaces so strip\n  log(:info,
                  \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n
                  \ keypair_name = \"#{this_user_group}_#{this_user}\"\n  log(:info,
                  \"The calculated name of the keypair will be: #{keypair_name}\")\n\n
                  \ if this_user.nil? || this_user_group.nil?\n    exit MIQ_ABORT\n
                  \ end\n\n  log(:info, '==============Keypair process started=================')\n
                  \ allowed_regions = $evm.object['allowed_regions']\n  allowed_regions
                  = allowed_regions.split(',').map(&:strip) #get into array, cleanup
                  spaces\n\n  if allowed_regions.nil?\n    exit MIQ_ABORT\n  end\n\n
                  \ allowed_regions.each do |r|\n\n    log(:info, \"<<<<<<<<<================>>>>>>>>>
                  Processing region #{r}  <<<<<<<<<<<<<=================>>>>>>>>>>>>>\")\n\n
                  \   log(:info, '   ================ Creating EC2 object =================')\n
                  \   ec2 = AWS::EC2.new( :access_key_id => access_key_id,\n                        :secret_access_key
                  => secret_access_key,\n                        :region => r)\n\n
                  \   ec2.key_pairs.each do |kp|\n      log(:info,\"#{kp.inspect}\")
                  if verbose_logging\n\n      if kp.name == keypair_name\n        kp.delete\n
                  \       log(:info, \"     !!!!!!!!!found and deleted #{keypair_name}!!!!!!!!!!!!!!!\")\n
                  \     end\n    end\n\n    unless delete_only\n      log(:info, \"
                  \  =========Now uploading keypair_name: #{keypair_name} ===========\")\n\n
                  \     ec2.key_pairs.import(keypair_name, ssh_key)\n      log(:info,
                  \"   ********** keypair_name: #{keypair_name} uploaded **********\")\n
                  \     log(:info, '   ================ upload completed =================')\n\n
                  \     #refersh EMS so keys show up faster\n      $evm.vmdb('ext_management_system').all.each
                  \ {|e| e.refresh if e.type == 'EmsAmazon' }\n\n    end\n\n    if
                  verbose_logging\n      log(:info,'     ================ Now print
                  out the keypairs =================')\n      ec2.key_pairs.each do
                  |kp|\n        log(:info, kp.inspect)\n      end\n    end\n\n    log(:info,
                  \"<<<<<<<<<================>>>>>>>>> Finished processing region
                  #{r}  <<<<<<<<<<<<<=================>>>>>>>>>>>>>\")\n\n  end\n
                  \ log(:info, \"================ Complete!! =================\")\n\n\n
                  \ ############\n  # Exit method\n  #\n  log(:info, \"@@@@@@@@@@@@@@
                  CloudForms Automate Method Completed @@@@@@@@@@@@@@\")\n  exit MIQ_OK\nend\n"
                maintain_keypair.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: maintain_keypair
                      display_name: Maintain Keypair
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
            aws_provision_instance_state_machine.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: AWS Provision Instance State Machine
                    display_name: AWS Provision Instance State Machine
                    name: aws_provision_instance_state_machine
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: method
                      name: build_request
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              aws_provision_instance.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Provision AWS Instance
                    name: aws_provision_instance
                    inherits: 
                    description: 
                  fields:
                  - build_request:
                      on_entry: amazon_build_request
              __methods__:
                amazon_build_request.rb: ! "###################################\r\n#\r\n#
                  CloudForms Automate Method: build_request_amazon\r\n#\r\n# This
                  method is used to build provision request for Amazon\r\n#\r\n###################################\r\nbegin\r\n
                  \ # Load the aws-sdk\r\n  #gem 'aws-sdk','=1.50.0'\r\n  require
                  \"aws-sdk\"\r\n\r\n  # Method for logging\r\n  def log(level, message)\r\n
                  \   @method = 'build_request_amazon'\r\n    $evm.log(level, \"#{@method}
                  - #{message}\")\r\n  end\r\n  log(:info, \"<CloudForms Automate
                  Method Started\")\r\n  \r\n  \r\n  # Start Here\r\n  def build_request(template_options,
                  vm_options, tag_options, ws_options)\r\n    user = $evm.root['user']\r\n
                  \   user_id = user ? user.userid : \"admin\"\r\n    #user_email
                  = user ? user.email : \"lester@redhat.com\" #\"admin@example.com\"\r\n
                  \   user_email = \"lester@redhat.com\" #\"admin@example.com\"\r\n
                  \   # Setup the parameter needed for request\r\n    args = []\r\n
                  \   # arg1 = version\r\n    args << '1.1'\r\n    # arg2 = templateFields\r\n
                  \   args << template_options.collect { |k, v| \"#{k}=#{v}\" }.join('|')\r\n
                  \   # arg3 = vmFields\r\n    args << vm_options.collect { |k, v|
                  \"#{k}=#{v}\" }.join('|')\r\n    # arg4 = requester\r\n    args
                  << \"user_name=#{user_id}|owner_email=#{user_email}\"\r\n    # arg5
                  = tags\r\n    args << tag_options.collect { |k, v| \"#{k}=#{v}\"
                  }.join('|')\r\n    # arg6 = WS Values\r\n    args << ws_options.collect
                  { |k, v| \"#{k}=#{v}\" }.join('|')\r\n    # arg7 = emsCustomAttributes\r\n
                  \   args << nil\r\n    # arg8 = miqCustomAttributes\r\n    args
                  << nil\r\n\r\n    log(:info, \"#{@method} - Building provisioning
                  request with the following arguments: <#{args.inspect}>\")\r\n    $evm.execute('create_provision_request',
                  *args)\r\n  end\r\n  \r\n# Look in tags_hash for tags and tag the
                  service\r\ndef tag_service(service, tags_hash)\r\n  # Look for tags
                  with a sequence_id of 0 to tag the destination Service\r\n  unless
                  tags_hash.nil?\r\n    tags_hash.each do |k, v|\r\n      $evm.log(\"info\",
                  \"Adding Tag:<#{k.inspect}/#{v.inspect}> to Service:<#{service.name}>\")\r\n
                  \     service.tag_assign(\"#{k}/#{v}\")\r\n    end\r\n  end\r\nend\r\n\r\n#
                  name_service - name the service to avoid duplicate names\r\ndef
                  name_service(service, new_service_name=nil)\r\n  unless new_service_name.blank?\r\n
                  \   log(:info, \"Changing Service name:<#{service.name}> to <#{new_service_name}>\")\r\n
                  \ else\r\n    new_service_name = \"#{service.name}-#{Time.now.strftime('%Y%m%d-%H%M%S')}\"\r\n
                  \   log(:info, \"Changing Service name:<#{service.name}> to <#{new_service_name}>\")\r\n
                  \ end\r\n  service.name = new_service_name\r\nend\r\n\r\n  \r\n#
                  Start\r\n# Set up the Service Task\r\nlog(:info, \"===========================================\")\r\nlog(:info,
                  \"#{@method} - Listing ROOT Attributes:\")\r\n$evm.root.attributes.sort.each
                  { |k, v| log(:info, \" \\t#{k}: #{v}\") }\r\n log(:info, \"===========================================\")\r\n\r\n
                  \ \r\nlog(:info, \"#{@method} - CloudForms Service Task starting\")\r\nstp_task
                  = $evm.root[\"service_template_provision_task\"]\r\n  \r\n# Get
                  destination service object\r\nservice = stp_task.destination\r\n$evm.log(\"info\",
                  \"Detected Service:<#{service.name}> Id:<#{service.id}>\")\r\n  \r\n
                  \ # Pull dialog data\r\n  vm_name = $evm.root['dialog_instance_name'].to_s\r\n
                  \ default_region = $evm.root['dialog_aws_region'].to_s\r\n  ##route
                  = $evm.root['dialog_route'].to_s\r\n  ##log(:info, \"Route setting:
                  #{route}\")\r\n \r\n  access_key_id  = $evm.object.decrypt('access_key_id')\r\n
                  \ secret_access_key  = $evm.object.decrypt('secret_access_key')\r\n
                  \ if $evm.root['dialog_aws_region'] == \"us-east-1\"\r\n    awszone=
                  \"east\"\r\n  else\r\n    awszone = \"west\"\r\n  end\r\n\r\n  vpc
                  = $evm.root['dialog_aws_vpc'].to_s\r\n  subnet_id, subnet_icdr_block
                  = $evm.root['dialog_aws_subnet_list'].split(\"|\")\r\n  availability_zone_dialog
                  = $evm.root.attributes['dialog_aws_availability_zone'].to_s\r\n
                  \ log(:info, \"Availability Setting: #{availability_zone_dialog}\")\r\n\r\n
                  \ # Process tag dialogs\r\n  tag_project_class = $evm.root['dialog_project_name'].first\r\nlog(:info,
                  \"Project Name: #{tag_project_class.name} Description: #{tag_project_class.description}\")\r\n\r\n
                  \ #tag_environment = $evm.root['dialog_environment'].first\r\n  log(:info,
                  \"Got Keys\")\r\n\r\n  # Set amazon config\r\n  AWS.config(\r\n
                  \     :access_key_id => access_key_id,\r\n      :secret_access_key
                  => secret_access_key\r\n  )\r\n  # Create the basic EC2 object\r\n
                  \ ec2 = AWS::EC2.new(:region => default_region)\r\n  \r\n  # Section
                  to set provision options\r\n  # Template options\r\n  template_options
                  = {}\r\n  \r\n  aws_ami_id, aws_region, aws_ami_name = $evm.root['dialog_aws_image'].split(\"|\")\r\n
                  \ \r\n  \r\n  aws_template_info = $evm.vmdb(\"miq_template\").find_by_ems_ref(aws_ami_id)\r\n
                  \ \r\n  guid = aws_template_info['GUID']\r\n  \r\n  template_options[:guid]
                  = guid\r\n  template_options[:request_type] = 'template'\r\n  #template_options[:cluster]
                  \     = \"ClusterName\"\r\n\r\n  # VM Fields\r\n  vm_options = {}\r\n
                  \ \r\n  vm_options[:name] = vm_name.downcase\r\n  vm_options[:vm_name]
                  = vm_name.downcase\r\n  vm_options[:hostname] = vm_name.downcase\r\n
                  \ vm_options[:number_of_vms] = $evm.root['dialog_num_instances']
                  \r\n\r\n  \r\n  new_service_name = vm_name.downcase \r\n  name_service(service,
                  new_service_name)\r\n  tags_hash = {}\r\n  tags_hash[:yale_projects]
                  = \"#{tag_project_class.name}\"\r\n  tag_service(service, tags_hash)\r\n\r\n
                  \ stp_task.add_tag(\"yale_project\", \"#{tag_project_class.name}\")\r\n\r\n
                  \ # Tags\r\n  tag_options = {}\r\n  tag_options[:data_class] = tag_project_class.name\r\n
                  \ tag_options[:vm_tags] = tag_project_class.name\r\n\r\n  #tag_options[:environment]
                  = tag_environment.name\r\n\r\n\r\n  ###service.add_tag(\":yale_projects\",
                  \"#{tag_project_class.name}\")\r\n\r\n  retirement_date = $evm.root['dialog_retirement_date'];\r\n
                  \ log(:info, \"Retirement date: #{retirement_date}\")\r\n  \r\n
                  \ net_tags=nil\r\n  \r\n  # WS_Values\r\n  ws_options = {}\r\n  ws_options[:availability_zone]
                  = availability_zone_dialog\r\n  ws_options[:subnet] = subnet_id
                  unless subnet_id.blank?\r\n  ws_options[:subnet_name] = net_tags['Name']
                  unless net_tags.nil?\r\n  ws_options[:region] = default_region\r\n
                  \ ws_options[:image_id] = aws_ami_id\r\n  ws_options[:vpc] = vpc
                  unless vpc.nil?\r\n  ws_options[:flavor] = $evm.root['dialog_aws_instance_type']\r\n
                  \ ###ws_options[:instance_type] = $evm.root['dialog_aws_instance_type']\r\n
                  \ ws_options[:aws_zone] = awszone\r\n  ws_options[:keypair_chosen]
                  = $evm.root['dialog_aws_ssh_pair']\r\n  ws_options[:key_name] =
                  $evm.root['dialog_aws_ssh_pair']\r\n  ws_options[:vm_tags] = \"#{tag_project_class.name}\"\r\nws_options[:service_id]
                  = \"#{service.id}\"\r\n  \r\n  # Build the request with all information\r\n
                  \ build_request(template_options, vm_options, tag_options, ws_options)\r\n
                  \ \r\n  \r\n  ############\r\n  # Exit method\r\n  #\r\n  stp_task.finished(\"Service
                  Task Finished\")\r\n  log(:info, \"CloudForms Automate Method Ended\")\r\n
                  \ exit MIQ_OK\r\n\r\n    #\r\n    # Set Ruby rescue behavior\r\n
                  \   #\r\nrescue => err\r\n  log(:error, \"[#{err}]\\n#{err.backtrace.join(\"\\n\")}\")\r\n
                  \ exit MIQ_ABORT\r\nend\r\n\r\n\r\n"
                amazon_build_request.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: amazon_build_request
                      display_name: AWS Build Request
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
        Methods:
          __namespace__.yaml:
            object_type: namespace
            version: 1.0
            object:
              attributes:
                name: Methods
                description: 
                display_name: 
                system: 
                priority: 
                enabled: 
          Emails.class:
            __class__.yaml:
              object_type: class
              version: 1.0
              object:
                attributes:
                  description: 
                  display_name: 
                  name: Emails
                  type: 
                  inherits: 
                  visibility: 
                  owner: 
                schema:
                - field:
                    aetype: attribute
                    name: payload
                    display_name: 
                    datatype: array
                    priority: 1
                    owner: 
                    default_value: 
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
                - field:
                    aetype: method
                    name: execute
                    display_name: 
                    datatype: string
                    priority: 2
                    owner: 
                    default_value: Email_Owner
                    substitute: true
                    message: create
                    visibility: 
                    collect: 
                    scope: 
                    description: 
                    condition: 
                    on_entry: 
                    on_exit: 
                    on_error: 
                    max_retries: 
                    max_time: 
            Email_Owner.yaml:
              object_type: instance
              version: 1.0
              object:
                attributes:
                  display_name: 
                  name: Email_Owner
                  inherits: 
                  description: 
                fields: []
            __methods__:
              Email_Owner.rb: ! "###################################\n#\n# CloudForms
                Automate Method: Email_Owner\n#\n# This method is used to Email_Owner
                AWS Services\n#\n###################################\n#\n# Method
                for logging\nbegin\n  @method = 'Email_Owner'\n  $evm.log(\"info\",
                \"#{@method} - EVM Automate Method Started\")\n\n  # Turn of verbose
                logging\n  @debug = true\n\n  require \"json\"\n\n  ###################################\n
                \ # Method: dumpRoot\n  #\n  ###################################\n
                \ def dumpRoot\n    $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                Begin Attributes\")\n    $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\",
                \"#{@method} - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n    $evm.log(\"info\",
                \"#{@method} - Root:<$evm.root> End Attributes\")\n    $evm.log(\"info\",
                \"\")\n  end\n\n  dumpRoot\n\n  vm = $evm.root['vm']\n\n  payload
                = nil\n  payload ||= $evm.object['payload']\n  $evm.log(\"info\",
                \"#{@method} - ==================== payload: #{payload.inspect}\")
                if @debug\n\n  @data = JSON.load(payload)\n  $evm.log(\"info\", \"#{@method}
                - ==================== data: #{@data.inspect}\") if @debug\n\n  type
                = nil\n  type ||= @data['type']\n  $evm.log(\"info\", \"#{@method}
                - ==================== type: #{type.inspect}\") if @debug\n\n  ####################\n
                \ from = nil\n  from ||= $evm.root['from_email'] || 'admin@cloudforms.iad.salab.redhat.com'\n
                \ evm_owner_id = vm.attributes['evm_owner_id']\n  owner = nil\n  owner
                = $evm.vmdb('user', evm_owner_id) unless evm_owner_id.nil?\n  $evm.log(\"info\",
                \"#{@method} - VM Owner: #{owner.inspect}\") if @debug\n  @to = nil\n
                \ @to = owner.email unless owner.nil?\n  @signature = nil\n  @signature
                ||= $evm.object['signature'] || \"Your Virtualization Team\"\n\n  def
                email_info()\n    @body += \"-------------------------------- <br>\"\n
                \   @body += \"Forward the message below to <br>\"\n    @body += \"#{@to}\"\n
                \   @body += \"<br>-------------------------------- <br>\"\n    @body
                += \"<br>\"\n    @body += \"-------------------------------- <br>\"\n
                \   @body += \" #{@data['service_name']} Info<br>\"\n    @body +=
                \"-------------------------------- \"\n  end\n\n  def email_footer()\n
                \   @body += \"<br><br> If you have any issues with your new #{@data['service_name']}
                please contact Support.\"\n    @body += \"<br><br> Thank you,<br>\"\n
                \   @body += \"#{@signature}\"\n  end\n\n  case type\n\n    ##################################################################################################################\n
                \   when \"test\"\n      $evm.log(\"info\", \"#{@method} - ====================
                vm: #{vm.inspect}\") if @debug\n    ##################################################################################################################\n\n
                \   ##################################################################################################################\n
                \   when \"create_ebs_volume\"\n      $evm.log(\"info\", \"#{@method}
                - ==================== Running: #{type.inspect}\") if @debug\n      subject
                = \"Your #{@data['service_name']} request has been #{@data['action']}:
                #{@data['vol_name']}\"\n      $evm.log(\"info\", \"#{@method} - ====================
                subject: #{subject.inspect}\") if @debug\n      @body = \"Hello, \"\n
                \     @body += \"This email is being sent by EVM to inform you of
                the provisioning of a new #{@data['service_name']}.<br>\"\n      @body
                += \"This new #{@data['service_name']} requires verification in the
                Amazon EC2 console.<br>\"\n      @body += \"Once that has been completed,
                use this message to inform the \"\n      @body += \"requester that
                their new #{@data['service_name']} is ready.<br><br>\"\n      email_info()\n
                \     # Send custom info\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\n
                \     @body += \"<br><b>Volume Info</b> #{@data['vol_name']}\"\n      email_footer()\n
                \     $evm.log(\"info\", \"#{@method} - ==================== body:
                #{@body.inspect}\") if @debug\n    ##################################################################################################################\n\n
                \   ##################################################################################################################\n
                \   when \"create_attach_ebs_volume\"\n      $evm.log(\"info\", \"#{@method}
                - ==================== Running: #{type.inspect}\") if @debug\n      subject
                = \"Your #{@data['service_name']} request has been #{@data['action']}
                - #{@data['vm_name']}: #{@data['vol_name']}\"\n      $evm.log(\"info\",
                \"#{@method} - ==================== subject: #{subject.inspect}\")
                if @debug\n      @body = \"Hello, \"\n      @body += \"This email
                is being sent by EVM to inform you of the provisioning of a new #{@data['service_name']}.<br>\"\n
                \     @body += \"This new #{@data['service_name']} requires verification
                in the Amazon EC2 console.<br>\"\n      @body += \"Once that has been
                completed, use this message to inform the \"\n      @body += \"requester
                that their new #{@data['service_name']} is ready.<br><br>\"\n      email_info()\n
                \     # Send custom info\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\n
                \     @body += \"<br><b>VM Name:</b> #{@data['vm_name']}\"\n      @body
                += \"<br><b>Volume Info</b> #{@data['vol_name']}\"\n      @body +=
                \"<br><b>Attached to:</b> #{@data['selected_device_name']}\"\n      email_footer()\n
                \     $evm.log(\"info\", \"#{@method} - ==================== body:
                #{@body.inspect}\") if @debug\n    ##################################################################################################################\n\n
                \   ##################################################################################################################\n
                \   when \"attach_ebs_volume\"\n      $evm.log(\"info\", \"#{@method}
                - ==================== Running: #{type.inspect}\") if @debug\n      subject
                = \"Your #{@data['service_name']} request has been #{@data['action']}
                - #{@data['vm_name']}: #{@data['instance_id']}\"\n      $evm.log(\"info\",
                \"#{@method} - ==================== subject: #{subject.inspect}\")
                if @debug\n      @body = \"Hello, \"\n      @body += \"This email
                is being sent by EVM to inform you of the #{@data['service_name']}
                has been attached to #{@data['vm_name']}.<br>\"\n      @body += \"This
                new #{@data['service_name']} requires verification in the Amazon EC2
                console.<br>\"\n      @body += \"Once that has been completed, use
                this message to inform the \"\n      @body += \"requester that their
                new #{@data['service_name']} is ready.<br><br>\"\n      email_info()\n
                \     # Send custom info\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\n
                \     @body += \"<br><b>VM Name:</b> #{@data['vm_name']}\"\n      @body
                += \"<br><b>Instance ID:</b> #{@data['instance_id']}\"\n      @body
                += \"<br><b>Attached to:</b> #{@data['selected_device_name']}\"\n
                \     email_footer()\n      $evm.log(\"info\", \"#{@method} - ====================
                body: #{@body.inspect}\") if @debug\n    ##################################################################################################################\n\n
                \   ##################################################################################################################\n
                \   when \"delete_ebs_volume\"\n      $evm.log(\"info\", \"#{@method}
                - ==================== Running: #{type.inspect}\") if @debug\n      subject
                = \"Your #{@data['service_name']} request has been #{@data['action']}
                - #{@data['vm_name']}: #{@data['vol_name']}\"\n      $evm.log(\"info\",
                \"#{@method} - ==================== subject: #{subject.inspect}\")
                if @debug\n      @body = \"Hello, \"\n      @body += \"<br>This email
                is being sent by EVM to inform you of the #{@data['vol_name']} has
                been #{@data['action']}.<br>\"\n      email_info()\n      # Send custom
                info\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\n      @body
                += \"<br><b>Volume Info</b> #{@data['vol_name']}\"\n      email_footer()\n
                \     $evm.log(\"info\", \"#{@method} - ==================== body:
                #{@body.inspect}\") if @debug\n    ##################################################################################################################\n\n
                \   ##################################################################################################################\n
                \   when \"detach_ebs_volume\"\n      $evm.log(\"info\", \"#{@method}
                - ==================== Running: #{type.inspect}\") if @debug\n      subject
                = \"Your #{@data['service_name']} request has been #{@data['action']}
                - #{@data['vm_name']}: #{@data['vol_name']}\"\n      $evm.log(\"info\",
                \"#{@method} - ==================== subject: #{subject.inspect}\")
                if @debug\n      # Call the header\n      @body = \"Hello, \"\n      @body
                += \"<br>This email is being sent by EVM to inform you of the #{@data['vol_name']}
                has been #{@data['action']} from #{@data['vm_name']}<br>\"\n      email_info()\n
                \     # Send custom info\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\n
                \     @body += \"<br><b>VM Name:</b> #{@data['vm_name']}\"\n      @body
                += \"<br><b>Volume Info</b> #{@data['vol_name']}\"\n      email_footer()\n
                \     $evm.log(\"info\", \"#{@method} - ==================== body:
                #{@body.inspect}\") if @debug\n    ##################################################################################################################\n\n
                \   ##################################################################################################################\n
                \   when \"create_attach_elb\"\n      $evm.log(\"info\", \"#{@method}
                - ==================== Running: #{type.inspect}\") if @debug\n      subject
                = \"Your #{@data['service_name']} request has #{@data['action']} -
                #{@data['vm_name']}: #{@data['elb_name']}\"\n      $evm.log(\"info\",
                \"#{@method} - ==================== subject: #{subject.inspect}\")
                if @debug\n      @body = \"Hello, \"\n      @body += \"<br>This email
                is being sent by EVM to inform you of the provisioning of a new #{@data['service_name']}.<br>\"\n
                \     @body += \"This new #{@data['service_name']} requires verification
                in the Amazon EC2 console.<br>\"\n      @body += \"Once that has been
                completed, use this message to inform the \"\n      @body += \"requester
                that their new #{@data['service_name']} is ready.<br><br>\"\n      email_info()\n
                \     # Send custom info\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\n
                \     @body += \"<br><b>Amazon ELB Name  :</b> #{@data['elb_name']}\"\n
                \     @body += \"<br><b>ELB Amazon Region:</b> #{@data['region']}\"\n
                \     @body += \"<br><b>ELB Amazon Availability Zone:</b> #{@data['availability_zone']}\"\n
                \     email_footer()\n      $evm.log(\"info\", \"#{@method} - ====================
                body: #{@body.inspect}\") if @debug\n    ##################################################################################################################\n\n
                \   ##################################################################################################################\n
                \   when \"delete_elb\"\n      $evm.log(\"info\", \"#{@method} - ====================
                Running: #{type.inspect}\") if @debug\n      subject = \"Your #{@data['service_name']}
                request has #{@data['action']} - #{@data['vm_name']}: #{@data['elb_name']}\"\n
                \     $evm.log(\"info\", \"#{@method} - ==================== subject:
                #{subject.inspect}\") if @debug\n      @body = \"Hello, \"\n      @body
                += \"<br>This email is being sent by EVM to inform you of the #{@data['elb_name']}
                has been #{@data['action']}.<br>\"\n      email_info()\n      # Send
                custom info\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\n
                \     @body += \"<br><b>Amazon ELB Name  :</b> #{@data['elb_name']}\"\n
                \     @body += \"<br><b>ELB Amazon Region:</b> #{@data['region']}\"\n
                \     @body += \"<br><b>ELB Amazon Availability Zone:</b> #{@data['availability_zone']}\"\n
                \     email_footer()\n      $evm.log(\"info\", \"#{@method} - ====================
                body: #{@body.inspect}\") if @debug\n    ##################################################################################################################\n\n
                \   ##################################################################################################################\n
                \   when \"create_rds_instance\"\n      $evm.log(\"info\", \"#{@method}
                - ==================== Running: #{type.inspect}\") if @debug\n      subject
                = \"Your #{@data['service_name']} request has #{@data['action']} -
                #{@data['instance_name']}: #{@data['db_name']}\"\n      $evm.log(\"info\",
                \"#{@method} - ==================== subject: #{subject.inspect}\")
                if @debug\n      @body = \"Hello, \"\n      @body += \"<br>This email
                is being sent by EVM to inform you of the provisioning of a new #{@data['service_name']}.<br>\"\n
                \     @body += \"This new #{@data['service_name']} requires verification
                in the Amazon EC2 console.<br>\"\n      @body += \"Once that has been
                completed, use this message to inform the \"\n      @body += \"requester
                that their new #{@data['service_name']} is ready.<br><br>\"\n      email_info()\n
                \     # Send custom info\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\n
                \     @body += \"<br><b>Amazon RDS Instance Name  :</b> #{@data['instance_name']}\"\n
                \     @body += \"<br><b>ELB Amazon Region:</b> #{@data['region']}\"\n
                \     #@body += \"<br><b>ELB Amazon Availability Zone:</b> #{@data['availability_zone']}\"\n
                \     email_footer()\n      $evm.log(\"info\", \"#{@method} - ====================
                body: #{@body.inspect}\") if @debug\n    #############################################################################################################\n\n
                \   ##################################################################################################################\n
                \   when \"delete_rds_instance\"\n      $evm.log(\"info\", \"#{@method}
                - ==================== Running: #{type.inspect}\") if @debug\n      subject
                = \"Your #{@data['service_name']} request has #{@data['action']} -
                #{@data['instance_name']}: #{@data['db_name']}\"\n      $evm.log(\"info\",
                \"#{@method} - ==================== subject: #{subject.inspect}\")
                if @debug\n      @body = \"Hello, \"\n      @body += \"<br>This email
                is being sent by EVM to inform you of the #{@data['instance_name']}
                has been #{@data['action']}.<br>\"\n      email_info()\n      # Send
                custom info\n      @body += \"<br><b>Action:</b> #{@data['action']}\"\n
                \     @body += \"<br><b>Amazon RDS Instance Name  :</b> #{@data['instance_name']}\"\n
                \     @body += \"<br><b>ELB Amazon Region:</b> #{@data['region']}\"\n
                \     #@body += \"<br><b>ELB Amazon Availability Zone:</b> #{@data['availability_zone']}\"\n
                \     email_footer()\n      $evm.log(\"info\", \"#{@method} - ====================
                body: #{@body.inspect}\") if @debug\n    #############################################################################################################\n\n
                \ end\n\n  $evm.execute('send_email', @to, from, subject, @body)\n\n
                \ $evm.log(\"info\", \"#{@method} - =================================
                EVM Automate Method Ended\")\n\n  #\n  # Exit method\n  #\n  $evm.log(\"info\",
                \"#{@method} - EVM Automate Method Ended\")\n  exit MIQ_OK\n\n    #\n
                \   # Set Ruby rescue behavior\n    #\nrescue => err\n  $evm.log(\"error\",
                \"#{@method} - [#{err}]\\n#{err.backtrace.join(\"\\n\")}\")\n  exit
                MIQ_STOP\nend\n"
              Email_Owner.yaml:
                object_type: method
                version: 1.0
                object:
                  attributes:
                    name: Email_Owner
                    display_name: 
                    description: 
                    scope: instance
                    language: ruby
                    location: inline
                  inputs: []
          AWS-Methods:
            __namespace__.yaml:
              object_type: namespace
              version: 1.0
              object:
                attributes:
                  name: AWS-Methods
                  description: 
                  display_name: 
                  system: 
                  priority: 
                  enabled: 
            AWS-EC2-Services-Archive.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: AWS EC2 Support Methods
                    display_name: AWS EC2 Support Methods
                    name: AWS-EC2-Services-Archive
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: method
                      name: aws_ec2_regions
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_availability_zones
                      display_name: 
                      datatype: string
                      priority: 2
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_vpcs
                      display_name: 
                      datatype: string
                      priority: 3
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_list_instances
                      display_name: 
                      datatype: string
                      priority: 4
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_subnets
                      display_name: 
                      datatype: string
                      priority: 5
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_elbs
                      display_name: 
                      datatype: string
                      priority: 6
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_elbs_list
                      display_name: 
                      datatype: string
                      priority: 7
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_elbs_all_list
                      display_name: 
                      datatype: string
                      priority: 8
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_elbs_button
                      display_name: 
                      datatype: string
                      priority: 9
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: list_instances_in_selected_elb
                      display_name: 
                      datatype: string
                      priority: 10
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_elb_regions
                      display_name: 
                      datatype: string
                      priority: 11
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_list_all_images
                      display_name: 
                      datatype: string
                      priority: 12
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_list_ebs_button
                      display_name: 
                      datatype: string
                      priority: 13
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_allowed_regions
                      display_name: 
                      datatype: string
                      priority: 14
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_availability_zones_allowed
                      display_name: 
                      datatype: string
                      priority: 15
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_keypair_all_list
                      display_name: 
                      datatype: string
                      priority: 16
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_ebs_list_attachments
                      display_name: 
                      datatype: string
                      priority: 17
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_ebs_all_list
                      display_name: 
                      datatype: string
                      priority: 18
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_ebs_list_all_available
                      display_name: 
                      datatype: string
                      priority: 19
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_ebs_device_list
                      display_name: 
                      datatype: string
                      priority: 20
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: execute
                      display_name: 
                      datatype: string
                      priority: 21
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              AWS-All-ELB-Regions.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 All ELB Regions
                    name: AWS-All-ELB-Regions
                    inherits: 
                    description: AWS EC2 All ELB Regions
                  fields:
                  - aws_ec2_elbs_all_list:
                      value: aws_ec2_elbs_all_list
              AWS-All-Instances-ELB.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 All Instances In ELB
                    name: AWS-All-Instances-ELB
                    inherits: 
                    description: AWS EC2 All Instances In ELB
                  fields:
                  - list_instances_in_selected_elb:
                      value: list_instances_in_selected_elb
              AWS-EC2-EBS-All-Instance.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 EBS List All By Instance Button
                    name: AWS-EC2-EBS-All-Instance
                    inherits: 
                    description: AWS EC2 EBS List All By Instance Button
                  fields:
                  - execute:
                      value: aws_ec2_ebs_list_by_instance_button
              AWS-EC2-List-My-ELBS.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 List My ELBS
                    name: AWS-EC2-List-My-ELBS
                    inherits: 
                    description: AWS EC2 List My ELBS
                  fields:
                  - execute:
                      value: aws_ec2_list_my_elbs
              AWS-ELB-Regions.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 ELB Regions
                    name: AWS-ELB-Regions
                    inherits: 
                    description: AWS EC2 ELB Regions
                  fields:
                  - aws_elb_regions:
                      value: aws_elb_regions
              AWS-List-All-ELB-Button.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 List All ELB Button
                    name: AWS-List-All-ELB-Button
                    inherits: 
                    description: AWS EC2 List All ELB Button
                  fields:
                  - execute:
                      value: aws_ec2_elbs_list_all_button
              AWS-Regions.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 Region Instance
                    name: AWS-Regions
                    inherits: 
                    description: AWS EC2 Region Instance
                  fields:
                  - aws_ec2_regions:
                      value: aws_ec2_regions
              Dialog_Instance_Delete_Security_Group.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Dialog Instance Delete Security Group
                    name: Dialog_Instance_Delete_Security_Group
                    inherits: 
                    description: Dialog Instance Delete Security Group
                  fields:
                  - execute:
                      value: Dialog_Instance_Delete_Security_Group
              Dialog_Populate_Security_Groups.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Dialog Populate Security Groups
                    name: Dialog_Populate_Security_Groups
                    inherits: 
                    description: Dialog Populate Security Groups
                  fields:
                  - execute:
                      value: Dialog_Populate_Security_Groups
              aws-ec2-list-all-regions.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 Regions
                    name: aws-ec2-list-all-regions
                    inherits: 
                    description: List all AWS Regions
                  fields:
                  - aws_ec2_regions:
                      value: aws_ec2_all_regions
              aws_ec2_add_security_group.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 Add Security Group
                    name: aws_ec2_add_security_group
                    inherits: 
                    description: AWS EC2 Add Security Group
                  fields:
                  - execute:
                      value: aws_ec2_add_security_group
              aws_ec2_allowed_regions.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 Allowed Regions
                    name: aws_ec2_allowed_regions
                    inherits: 
                    description: AWS EC2 Allowed Regions
                  fields:
                  - aws_ec2_allowed_regions:
                      value: aws_ec2_allowed_regions
              aws_ec2_availability_zones.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: List of Availability Zones for a region
                    name: aws_ec2_availability_zones
                    inherits: 
                    description: List of Availability Zones for a region
                  fields:
                  - aws_availability_zones:
                      value: aws_availability_zones
              aws_ec2_availability_zones_allowed.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Method to Retrieve Availibility Zones from Allowed
                      Regions
                    name: aws_ec2_availability_zones_allowed
                    inherits: 
                    description: Method to Retrieve Availibility Zones from Allowed
                      Regions
                  fields:
                  - aws_ec2_availability_zones_allowed:
                      value: aws_ec2_availability_zones_allowed
              aws_ec2_delete_security_group.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 Delete Security Group
                    name: aws_ec2_delete_security_group
                    inherits: 
                    description: AWS EC2 Delete Security Group
                  fields:
                  - execute:
                      value: aws_ec2_delete_security_group
              aws_ec2_ebs_all_list.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 List of All EBS
                    name: aws_ec2_ebs_all_list
                    inherits: 
                    description: AWS EC2 List of All EBS
                  fields:
                  - aws_ec2_ebs_all_list:
                      value: aws_ec2_ebs_all_list
              aws_ec2_ebs_device_list.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 EBS Device List
                    name: aws_ec2_ebs_device_list
                    inherits: 
                    description: AWS EC2 EBS Device List
                  fields:
                  - aws_ec2_ebs_device_list:
                      value: aws_ec2_ebs_device_list
              aws_ec2_ebs_list_all_available.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 EBS List All Available
                    name: aws_ec2_ebs_list_all_available
                    inherits: 
                    description: AWS EC2 EBS List All Available
                  fields:
                  - aws_ec2_ebs_list_all_available:
                      value: aws_ec2_ebs_list_all_available
              aws_ec2_ebs_list_attachments.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 EBS List Attachments
                    name: aws_ec2_ebs_list_attachments
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_ebs_list_attachments:
                      value: aws_ec2_ebs_list_attachments
              aws_ec2_ebs_list_available_region.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 EBS List Available By Region Button
                    name: aws_ec2_ebs_list_available_region
                    inherits: 
                    description: AWS EC2 EBS List Available By Region Button
                  fields:
                  - execute:
                      value: aws_ec2_ebs_list_available_button
              aws_ec2_elbs.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Amazon Elastic Load Balancers
                    name: aws_ec2_elbs
                    inherits: 
                    description: List Existing Amazon Elastic Load Balancers
                  fields:
                  - aws_ec2_elbs:
                      value: aws_ec2_elbs
              aws_ec2_elbs_button.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Amazon ELB for Button
                    name: aws_ec2_elbs_button
                    inherits: 
                    description: Amazon ELB for Button
                  fields:
                  - aws_ec2_elbs_button:
                      value: aws_ec2_elbs_button
              aws_ec2_elbs_list.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS ELB List
                    name: aws_ec2_elbs_list
                    inherits: 
                    description: Listing the existing ELBs
                  fields:
                  - aws_ec2_elbs_list:
                      value: aws_ec2_elbs_list
              aws_ec2_keypair_all_list.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 List of all Keypairs
                    name: aws_ec2_keypair_all_list
                    inherits: 
                    description: aws_ec2_keypair_all_list
                  fields:
                  - aws_ec2_keypair_all_list:
                      value: aws_ec2_keypair_all_list
              aws_ec2_list_all_images.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 List all images
                    name: aws_ec2_list_all_images
                    inherits: 
                    description: List all images for owner
                  fields:
                  - aws_ec2_list_all_images:
                      value: aws_ec2_list_all_images
              aws_ec2_list_ebs_button.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EBS List for Button
                    name: aws_ec2_list_ebs_button
                    inherits: 
                    description: AWS EBS List for Button
                  fields:
                  - aws_ec2_list_ebs_button:
                      value: aws_ec2_list_ebs_button
              aws_ec2_regions.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 Regions
                    name: aws_ec2_regions
                    inherits: 
                    description: List all AWS Regions
                  fields:
                  - aws_ec2_regions:
                      value: aws_ec2_all_regions
              aws_ec2_retrieve_instances.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Retrieve Available instances from Amazon
                    name: aws_ec2_retrieve_instances
                    inherits: 
                    description: Retrieve Available instances from Amazon
                  fields:
                  - aws_ec2_list_instances:
                      value: aws_ec2_list_instances
              aws_ec2_subnets.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: AWS EC2 Subnet List
                    name: aws_ec2_subnets
                    inherits: 
                    description: Retrieve AWS EC2 subnet list
                  fields:
                  - aws_ec2_subnets:
                      value: aws_ec2_subnets
              aws_ec2_vpcs.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: Retrieve Amazon VPCs
                    name: aws_ec2_vpcs
                    inherits: 
                    description: Retrieve Amazon VPCs that are available
                  fields:
                  - aws_ec2_vpcs:
                      value: aws_ec2_vpcs
              __methods__:
                Dialog_Instance_Delete_Security_Group.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: Dialog_Instance_Delete_Security_Group\n#\n#
                  This method is used to populate all existing security groups for
                  the dynamic drop down list\n#\n###################################\n#\n#
                  Method for logging\nbegin\n  @method = 'Dialog_Instance_Delete_Security_Group'\n
                  \ $evm.log(\"info\", \"#{@method} - EVM Automate Method Started\")\n\n
                  \ # Turn of verbose logging\n  @debug = true\n\n  ###################################\n
                  \ # Method: dumpRoot\n  #\n  ###################################\n
                  \ def dumpRoot\n    $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  Begin Attributes\")\n    $evm.root.attributes.sort.each { |k, v|
                  $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Attributes -
                  #{k}: #{v}\")}\n    $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  End Attributes\")\n    $evm.log(\"info\", \"\")\n  end\n\n  dumpRoot\n\n
                  \ ###################################\n  # Method: dumpRoot\n  #\n
                  \ ###################################\n  require 'aws-sdk'\n\n  access_key_id
                  = nil\n  secret_access_key = nil\n\n  # Get the Amazon authentication
                  credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n
                  \   # Get the values from the schema ...\n    access_key_id ||=
                  $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  allowed_regions = $evm.object['allowed_regions']\n
                  \ allowed_regions = allowed_regions.split(\",\").each {|t| t.strip!}\n
                  \ vm = $evm.root['vm']\n  instance_id = nil\n  instance_id = vm['uid_ems']\n
                  \ current_region = vm.ext_management_system['hostname']\n\n  $evm.log(\"info\",
                  \"#{@method} - ================================= EVM Automate Method
                  Started\")\n\n  AWS.config(\n      :access_key_id => access_key_id,\n
                  \     :secret_access_key => secret_access_key\n  )\n\n  ec2 = AWS::EC2.new(
                  :access_key_id => access_key_id,\n                      :secret_access_key
                  => secret_access_key,\n                      :region => current_region)\n\n
                  \ i = ec2.instances[\"#{instance_id}\"]\n  $evm.log(\"info\", \"#{@method}
                  - ===================== task: #{i.inspect}\")\n\n  security_groups
                  = i.security_groups\n  $evm.log(\"info\", \"#{@method} - =====================
                  sg before: #{security_groups.inspect}\")\n\n  @list_array = Array.new\n\n
                  \ $evm.log(\"info\", \"#{@method} - ===================== security_groups.count:
                  #{security_groups.count.inspect}\")\n\n  if security_groups.count
                  == 1\n    $evm.log(\"info\", \"#{@method} - =====================
                  security_groups.count: #{security_groups.count.inspect}\")\n    default_val
                  = [\"You cannot delete any Security groups unless there are more
                  than 1 security groups attached\",nil]\n    @list_array << default_val\n
                  \ else\n    default_val = [nil,nil]\n    @list_array << default_val\n\n
                  \   security_groups.each do |sg|\n      $evm.log(\"info\", \"#{@method}
                  - ================ security_groups: #{sg.inspect}\")\n      val
                  = Array.new\n      val << \"#{sg.name} - #{sg.description}\"\n      val
                  << sg.security_group_id\n      @list_array << val\n    end\n  end\n\n
                  \ list_values = {\n      'sort_by' => :none,\n      'data_type'
                  => :integer,\n      'required' => :true,\n      'values' => @list_array\n
                  \ }\n  $evm.log(\"info\", \"===== EVM Automate Method: <#{@method}>
                  display drop-down: #{list_values}\")\n  list_values.each {|k,v|
                  $evm.object[k] = v }\n\n\n\n  $evm.log(\"info\", \"#{@method} -
                  ================================= EVM Automate Method Ended\")\n\n
                  \ #\n  # Exit method\n  #\n  $evm.log(\"info\", \"#{@method} - EVM
                  Automate Method Ended\")\n  exit MIQ_OK\n\n    #\n    # Set Ruby
                  rescue behavior\n    #\nrescue => err\n  $evm.log(\"error\", \"#{@method}
                  - [#{err}]\\n#{err.backtrace.join(\"\\n\")}\")\n  exit MIQ_STOP\nend\n"
                Dialog_Instance_Delete_Security_Group.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: Dialog_Instance_Delete_Security_Group
                      display_name: Dialog Instance Delete Security Group
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                Dialog_Populate_Security_Groups.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: Dialog_Populate_Security_Groups\n#\n#
                  This method is used to populate all existing security groups for
                  the dynamic drop down list\n#\n###################################\n#\n#
                  Method for logging\nbegin\n  @method = 'Dialog_Populate_Security_Groups'\n
                  \ $evm.log(\"info\", \"#{@method} - EVM Automate Method Started\")\n\n
                  \ # Turn of verbose logging\n  @debug = true\n\n  ###################################\n
                  \ # Method: dumpRoot\n  #\n  ###################################\n
                  \ def dumpRoot\n    $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  Begin Attributes\")\n    $evm.root.attributes.sort.each { |k, v|
                  $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Attributes -
                  #{k}: #{v}\")}\n    $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  End Attributes\")\n    $evm.log(\"info\", \"\")\n  end\n\n  dumpRoot\n\n
                  \ ###################################\n  # Method: dumpRoot\n  #\n
                  \ ###################################\n  require 'aws-sdk'\n\n  access_key_id
                  = nil\n  secret_access_key = nil\n\n  # Get the Amazon authentication
                  credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n
                  \   # Get the values from the schema ...\n    access_key_id ||=
                  $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  allowed_regions = $evm.object['allowed_regions']\n
                  \ allowed_regions = allowed_regions.split(\",\").each {|t| t.strip!}\n
                  \ vm = $evm.root['vm']\n  current_region = vm.ext_management_system['hostname']\n\n
                  \ instance_id = nil\n  instance_id = vm['uid_ems']\n\n  $evm.log(\"info\",
                  \"#{@method} - ================================= EVM Automate Method
                  Started\")\n\n  AWS.config(\n      :access_key_id => access_key_id,\n
                  \     :secret_access_key => secret_access_key\n  )\n\n  ec2 = AWS::EC2.new(
                  :access_key_id => access_key_id,\n                      :secret_access_key
                  => secret_access_key,\n                      :region => current_region)\n\n
                  \ $evm.log(\"info\", \"#{@method} - ================ ec2.security_groups:
                  #{ec2.security_groups.inspect}\")\n\n  i = ec2.instances[\"#{instance_id}\"]\n
                  \ $evm.log(\"info\", \"#{@method} - ===================== task:
                  #{i.inspect}\")\n\n  security_groups = i.security_groups\n  vpc_id
                  = i.vpc_id\n  $evm.log(\"info\", \"#{@method} - =====================
                  sg before: #{security_groups.inspect}\")\n\n  @dialog_hash = Hash.new\n
                  \ @dialog_hash[nil] = nil\n  ec2.security_groups.each do |sg|\n
                  \   $evm.log(\"info\", \"#{@method} - ================ security_groups:
                  #{sg.inspect}\")\n    @dialog_hash[\"#{sg.security_group_id}\"]
                  = \"#{sg.name} - #{sg.description}\" unless sg.vpc_id != vpc_id\n
                  \ end\n\n  security_groups.each do |s|\n    $evm.log(\"info\", \"#{@method}
                  - ================ delete from list: #{s.inspect}\")\n    @dialog_hash.delete(s.id)\n
                  \ end\n  $evm.log(\"info\", \"#{@method} - ================ Check:
                  #{@dialog_hash.inspect}\")\n\n  @dialog_field = $evm.object\n  @dialog_field[\"sort_by\"]
                  = \"none\"\n  @dialog_field[\"data_type\"] = \"string\"\n  @dialog_field[\"required\"]
                  = \"true\"\n  @dialog_field[\"values\"] = @dialog_hash.invert\n
                  \ $evm.log(\"info\", \"===== EVM Automate Method: <#{@method}> display
                  drop-down: #{@dialog_hash.invert.inspect}\")\n\n  $evm.log(\"info\",
                  \"#{@method} - ================================= EVM Automate Method
                  Ended\")\n\n  #\n  # Exit method\n  #\n  $evm.log(\"info\", \"#{@method}
                  - EVM Automate Method Ended\")\n  exit MIQ_OK\n\n    #\n    # Set
                  Ruby rescue behavior\n    #\nrescue => err\n  $evm.log(\"error\",
                  \"#{@method} - [#{err}]\\n#{err.backtrace.join(\"\\n\")}\")\n  exit
                  MIQ_STOP\nend\n"
                Dialog_Populate_Security_Groups.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: Dialog_Populate_Security_Groups
                      display_name: Dialog Populate Security Groups
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_availability_zones.rb: ! "#\n#            Automate Method\n#\n$evm.log(\"info\",
                  \"Automate Method Started\")\n#\n#            Method Code Goes here\n#\n#
                  Load the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n  dialog_field
                  = $evm.object\n  access_key_id = nil\n  secret_access_key = nil\n\n
                  \ # Get the Amazon authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  \n  selected_region
                  = $evm.root['dialog_aws_region']\n  selected_zone = $evm.root['dialog_availability_zone']\n
                  \ $evm.log(\"info\", \"Selected Region: #{selected_region}\")\n\n
                  \ if  selected_region == nil\n    default_region = $evm.object['default_aws_region']\n
                  \ else\n    default_region = selected_region\n  end\n\n\n  if  selected_zone
                  == nil\n    selected_zone = $evm.object['default_availability_zone']\n
                  \ end\n\n\n  AWS.config(\n      :access_key_id => access_key_id,\n
                  \     :secret_access_key => secret_access_key\n  )\n\n  # Create
                  the basic EC2 object\n  ec2_instance = AWS::EC2.new( :region =>
                  default_region)\n\n  # Retrieve the available EC2 Regions\n  zones
                  = ec2_instance.availability_zones\n\n  # Create some local variables
                  ...\n\n  # Dynamic list to add values to the dialog dynamic list
                  ...\n  list = {}\n\n  # Count of regions ...\n  count = 0\n\n  #
                  Save first entry and make it the default region\n  first = nil\n\n
                  \ # Go through all regions returned from EC2 and add them to list\n
                  \ zones.each do |k|\n    count += 1\n    if count == 1\n      first
                  = k.name\n    end\n    $evm.log(\"info\", \"ZONES: #{k.name} \")\n
                  \   list[k.name]  = \"#{k.name}\"\n  end\n\n  $evm.log(\"info\",
                  \"LIST: #{list.inspect} \")\n\n  # Add list to dialog dynamic list
                  ...\n  $evm.object[\"values\"] = list\n  \n  # Make the first entry
                  the default value\n  #dialog_field[\"default_value\"] = first\n
                  \ $evm.object[\"default_value\"] = first\n  $evm.object['selected_availability_zone']
                  = selected_zone\n\n  $evm.log(\"info\", \"Dialog Region: #{$evm.root['dialog_aws_region']}\")\n
                  \ $evm.log(\"info\", \"Selected Region: #{$evm.object['selected_aws_region']}\")\n
                  \ $evm.log(\"info\", \"Dialog Zone: #{$evm.root['dialog_availability_zone']}\")\n
                  \ $evm.log(\"info\", \"Selected Zone: #{$evm.object['selected_availability_zone']}\")\n\n
                  \ $evm.log(\"info\", \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ $evm.log(\"info\", \"====== RETRIEVE AMAZON AVAILABILITY ZONES
                  =====  Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ $evm.log(\"info\", \"====== EXCEPTION IN RETRIEVE AMAZON AVAILABILITY
                  ZONES =====\")\n  $evm.log(\"info\", exception.message)\nend\n"
                aws_availability_zones.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_availability_zones
                      display_name: Method to Retrieve Availability Zones from a Region
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_add_security_group.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_add_security_group\n#\n# This
                  method is used to populate all existing security groups for the
                  dynamic drop down list\n#\n###################################\n#\n#
                  Method for logging\nbegin\n  @method = 'aws_ec2_add_security_group'\n
                  \ $evm.log(\"info\", \"#{@method} - EVM Automate Method Started\")\n\n
                  \ # Turn of verbose logging\n  @debug = true\n\n  ###################################\n
                  \ # Method: dumpRoot\n  #\n  ###################################\n
                  \ def dumpRoot\n    $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  Begin Attributes\")\n    $evm.root.attributes.sort.each { |k, v|
                  $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Attributes -
                  #{k}: #{v}\")}\n    $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  End Attributes\")\n    $evm.log(\"info\", \"\")\n  end\n\n  dumpRoot\n\n
                  \ ###################################\n  # Method: dumpRoot\n  #\n
                  \ ###################################\n  require 'aws-sdk'\n\n  access_key_id
                  = nil\n  secret_access_key = nil\n\n  # Get the Amazon authentication
                  credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n
                  \   # Get the values from the schema ...\n    access_key_id ||=
                  $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  allowed_regions = $evm.object['allowed_regions']\n
                  \ allowed_regions = allowed_regions.split(\",\").each {|t| t.strip!}\n
                  \ vm = $evm.root['vm']\n  current_region = vm.ext_management_system['hostname']\n\n
                  \ dialog_security_group = nil\n  dialog_security_group ||= $evm.root.attributes['dialog_security_group']\n\n\n\n
                  \ instance_id = nil\n  instance_id = vm['uid_ems']\n\n  $evm.log(\"info\",
                  \"#{@method} - ================================= EVM Automate Method
                  Started\")\n\n  AWS.config(\n      :access_key_id => access_key_id,\n
                  \     :secret_access_key => secret_access_key\n  )\n\n  ec2 = AWS::EC2.new(
                  :access_key_id => access_key_id,\n                      :secret_access_key
                  => secret_access_key,\n                      :region => current_region)\n\n
                  \ i = ec2.instances[\"#{instance_id}\"]\n  $evm.log(\"info\", \"#{@method}
                  - ===================== task: #{i.inspect}\")\n\n  sg = i.security_groups\n
                  \ $evm.log(\"info\", \"#{@method} - ===================== sg before:
                  #{sg.inspect}\")\n\n  i.network_interfaces.each do |nic|\n    nic.set_security_groups(dialog_security_group,sg)\n
                  \ end\n\n  sg = i.security_groups\n  $evm.log(\"info\", \"#{@method}
                  - ===================== sg after: #{sg.inspect}\")\n\n\n#    vpc
                  = ec2.instance.security_groups[\"#{instance_id}\"]\n#    $evm.log(\"info\",
                  \"#{@method} - ===================== vpc: #{vpc.inspect}\")\n\n#
                  \   security_groups = i['security_group_id']\n#    $evm.log(\"info\",
                  \"#{@method} - ===================== security_groups: #{security_groups.inspect}\")\n\n#
                  end\n\n  $evm.log(\"info\", \"#{@method} - =================================
                  EVM Automate Method Ended\")\n\n  #\n  # Exit method\n  #\n  $evm.log(\"info\",
                  \"#{@method} - EVM Automate Method Ended\")\n  exit MIQ_OK\n\n    #\n
                  \   # Set Ruby rescue behavior\n    #\nrescue => err\n  $evm.log(\"error\",
                  \"#{@method} - [#{err}]\\n#{err.backtrace.join(\"\\n\")}\")\n  exit
                  MIQ_STOP\nend\n"
                aws_ec2_add_security_group.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_add_security_group
                      display_name: AWS EC2 Add Security Group
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_all_regions.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_allowed_regions\n#\n# This method
                  is used to search for all allowed AWS EC2 Regions\n#\n###################################\n#\n#\n#
                  Method for logging\ndef log(level, message)\n  @method = 'aws_ec2_all_regions'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\n#\nlog(:info,
                  \"====== RETRIEVE AMAZON ALL REGIONS ===== Automate Method Started\")\n#\n#
                  \           Method Code Goes here\n#\n\n# Load the aws-sdk\nrequire
                  \"aws-sdk\"\n\naccess_key_id = nil\nsecret_access_key = nil\n\n\n#
                  @!method available_regions\n# List of available regions in EC2\n#\n#
                  @return [AWS::RegionCollection] .\n#\n# def available_regions\n#
                  \  return ec2_instance.regions\n# end\n\n\nbegin\n  # Get the Amazon
                  authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n  \n\n  # CFME Version 3.2 the above API changes!!!\n  default_region
                  = ems.provider_region\n  \n  \n  # Create the basic EC2 object\n
                  \ ec2_instance = AWS::EC2.new(:region=>default_region)\n  \n\t#
                  Retrieve the available EC2 Regions\n  regions = ec2_instance.regions\n\n#
                  Create some local variables ...\n\n# Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n# Count of regions
                  ...\n  count = 0\n\n# Save first entry and make it the default region\n
                  \ first = nil\n\n  log(:info, \"Regions: #{regions.inspect}\")\n
                  \ \n# Go through all regions returned from EC2 and add them to list\n
                  \ regions.each do |r|\n    count += 1\n    if count == 1\n      first
                  = r.name\n    end\n    log(:info, \"REGIONS: #{r.name} \")\n    list[r.name]
                  \ = \"#{r.name}\"\n  end\n\n  list[\"\"] = \"\"\n\n  log(:info,
                  \"LIST: #{list.inspect} \")\n\n# Add list to dialog dynamic list
                  ...\n  $evm.object[\"values\"] = list\n\n  # Create the basic EC2
                  object\n  #ec2_instance = AWS::EC2.new(:region => region)\n\n# Make
                  the first entry the default value\n#$evm.object[\"default_value\"]
                  = first\n\n#$evm.object['selected_aws_region'] = $evm.root['dialog_aws_region']\n\n#log(:info,
                  \"====== REGION: #{$evm.object['dialog_aws_region']}\")\n#log(:info,
                  \"====== SELECTED REGION: #{$evm.object['selected_aws_region']}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ALL REGIONS =====  Automate
                  Method \")\n\n#task = $evm.root['service_template_provision_task\"']\n#log(:info,
                  \"===========================================\")\n#log(:info, \"Listing
                  ROOT Attributes:\")\n#$evm.root.attributes.sort.each { |k, v| log(:info,
                  \"\\t#{k}: #{v}\")}\n#log(:info, \"===========================================\")\n\n#stp_task
                  = $evm.root[\"service_template\"]\n#log(:info, \"===========================================\")\n#log(:info,
                  \"Listing task Attributes:\")\n#stp_task.attributes.sort.each {
                  |k, v| log(:info, \"\\t#{k}: #{v}\")}\n#log(:info, \"===========================================\")\n\n
                  \ exit MIQ_OK\n\nrescue => exception\n  log(:info, \"====== EXCEPTION
                  IN RETRIEVE AMAZON REGIONS =====\")\n  log(:info, exception.message)\nend\n\n\n\n"
                aws_ec2_all_regions.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_all_regions
                      display_name: AWS EC2 Regions
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_allowed_regions.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_allowed_regions\n#\n# This method
                  is used to search for all allowed AWS EC2 Regions\n#\n###################################\n#\n#\n#
                  Method for logging\ndef log(level, message)\n  @method = 'aws_ec2_allowed_regions'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\n#\nlog(:info,
                  \"====== RETRIEVE AMAZON ALLOWED REGIONS ===== Automate Method Started\")\n#\n#
                  \           Method Code Goes here\n#\n\n# Load the aws-sdk\nrequire
                  \"aws-sdk\"\n\naccess_key_id = nil\nsecret_access_key = nil\n\n\n#
                  @!method available_regions\n# List of available regions in EC2\n#\n#
                  @return [AWS::RegionCollection] .\n#\n# def available_regions\n#
                  \  return ec2_instance.regions\n# end\n\n\nbegin\n\n  # Get the
                  Amazon authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n  allowed_regions = $evm.object['allowed_regions']\n  allowed_regions
                  = allowed_regions.split(\",\").each {|t| t.strip!}\n\n  log(:info,
                  \"Allowed Regions: #{allowed_regions}\")\n  \n\n# Retrieve the available
                  EC2 Regions\n#regions = ec2_instance.regions\n\n# Create some local
                  variables ...\n\n# Dynamic list to add values to the dialog dynamic
                  list ...\n  list = {}\n\n# Count of regions ...\n  count = 0\n\n#
                  Save first entry and make it the default region\n  first = nil\n\n#
                  Go through all regions returned from EC2 and add them to list\n
                  \ allowed_regions.each do |r|\n    count += 1\n    if count == 1\n
                  \     first = r\n    end\n    log(:info, \"REGIONS: #{r} \")\n    list[r]
                  \ = \"#{r}\"\n  end\n\n  list[\"\"] = \"\"\n\n  log(:info, \"LIST:
                  #{list.inspect} \")\n\n# Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n  # Create the basic EC2 object\n  #ec2_instance = AWS::EC2.new(:region
                  => region)\n\n# Make the first entry the default value\n#$evm.object[\"default_value\"]
                  = first\n\n#$evm.object['selected_aws_region'] = $evm.root['dialog_aws_region']\n\n#log(:info,
                  \"====== REGION: #{$evm.object['dialog_aws_region']}\")\n#log(:info,
                  \"====== SELECTED REGION: #{$evm.object['selected_aws_region']}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON REGIONS =====  Automate Method
                  \")\n\n#task = $evm.root['service_template_provision_task\"']\n#log(:info,
                  \"===========================================\")\n#log(:info, \"Listing
                  ROOT Attributes:\")\n#$evm.root.attributes.sort.each { |k, v| log(:info,
                  \"\\t#{k}: #{v}\")}\n#log(:info, \"===========================================\")\n\n#stp_task
                  = $evm.root[\"service_template\"]\n#log(:info, \"===========================================\")\n#log(:info,
                  \"Listing task Attributes:\")\n#stp_task.attributes.sort.each {
                  |k, v| log(:info, \"\\t#{k}: #{v}\")}\n#log(:info, \"===========================================\")\n\n
                  \ exit MIQ_OK\n\nrescue => exception\n  log(:info, \"====== EXCEPTION
                  IN RETRIEVE AMAZON REGIONS =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_allowed_regions.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_allowed_regions
                      display_name: AWS EC2 Allowed Regions
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_availability_zones_allowed.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_availability_zones_allowed\n#\n#
                  This method is used to list all availability zones in an allowed
                  region\n#\n###################################\n# Method for logging\ndef
                  log(level, message)\n  @method = 'aws_ec2_availability_zones_allowed'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\n#\nlog(:info,
                  \"Automate Method Started\")\n#\n#            Method Code Goes here\n#\n#
                  Load the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n  dialog_field
                  = $evm.object\n  access_key_id = nil\n  secret_access_key = nil\n\n
                  \ # Get the Amazon authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  selected_region = $evm.object['dialog_aws_allowed_regions']\n
                  \ selected_zone = $evm.object['dialog_aws_availability_zones_allowed']\n
                  \ log(:info, \"+++++++++++ Selected Region: #{selected_region} ++++++++++++++\")\n
                  \ log(:info, \"+++++++++++ Selected AZ : #{selected_zone} +++++++++++++++++++\")\n\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Create the basic EC2 object\n  ec2_instance
                  = AWS::EC2.new( :region => selected_region)\n\n  # Retrieve the
                  available EC2 Regions\n  zones = ec2_instance.availability_zones\n\n
                  \ # Create some local variables ...\n\n  # Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all regions returned from
                  EC2 and add them to list\n  zones.each do |k|\n    count += 1\n
                  \   if count == 1\n      first = k.name\n    end\n    log(:info,
                  \"ZONES: #{k.name} \")\n    list[k.name]  = \"#{k.name}\"\n  end\n\n
                  \ log(:info, \"LIST: #{list.inspect} \")\n\n  # Add list to dialog
                  dynamic list ...\n  $evm.object[\"values\"] = list\n\n  # Make the
                  first entry the default value\n  #dialog_field[\"default_value\"]
                  = first\n  $evm.object[\"default_value\"] = first\n  $evm.object['selected_availability_zone']
                  = selected_zone\n\n  log(:info, \"+++++++++++++ Selected Region:
                  #{selected_region} ++++++++++++++++\")\n  log(:info, \"+++++++++++++
                  Selected Zone: #{selected_zone} ++++++++++++++++++++\")\n\n\n  log(:info,
                  \"====== RETRIEVE AMAZON AVAILABILITY ZONES =====  Automate Method
                  Ended\")\n  exit MIQ_OK\n\nrescue => exception\n  log(:info, \"======
                  EXCEPTION IN RETRIEVE AMAZON AVAILABILITY ZONES =====\")\n  log(:info,
                  exception.message)\nend\n"
                aws_ec2_availability_zones_allowed.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_availability_zones_allowed
                      display_name: Method to Retrieve Availability Zones from Allowed
                        Regions
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_delete_security_group.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_delete_security_group\n#\n#
                  This method is used to populate all existing security groups for
                  the dynamic drop down list\n#\n###################################\n#\n#
                  Method for logging\nbegin\n  @method = 'aws_ec2_delete_security_group'\n
                  \ $evm.log(\"info\", \"#{@method} - EVM Automate Method Started\")\n\n
                  \ # Turn of verbose logging\n  @debug = true\n\n  ###################################\n
                  \ # Method: dumpRoot\n  #\n  ###################################\n
                  \ def dumpRoot\n    $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  Begin Attributes\")\n    $evm.root.attributes.sort.each { |k, v|
                  $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Attributes -
                  #{k}: #{v}\")}\n    $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  End Attributes\")\n    $evm.log(\"info\", \"\")\n  end\n\n  dumpRoot\n\n
                  \ ###################################\n  # Method: dumpRoot\n  #\n
                  \ ###################################\n  require 'aws-sdk'\n\n  access_key_id
                  = nil\n  secret_access_key = nil\n\n  # Get the Amazon authentication
                  credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n
                  \   # Get the values from the schema ...\n    access_key_id ||=
                  $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  allowed_regions = $evm.object['allowed_regions']\n
                  \ allowed_regions = allowed_regions.split(\",\").each {|t| t.strip!}\n
                  \ vm = $evm.root['vm']\n  current_region = vm.ext_management_system['hostname']\n\n
                  \ dialog_security_group = nil\n  dialog_security_group ||= $evm.root.attributes['dialog_security_group']\n\n
                  \ instance_id = nil\n  instance_id = vm['uid_ems']\n\n  $evm.log(\"info\",
                  \"#{@method} - ================================= EVM Automate Method
                  Started\")\n\n  AWS.config(\n      :access_key_id => access_key_id,\n
                  \     :secret_access_key => secret_access_key\n  )\n\n  ec2 = AWS::EC2.new(
                  :access_key_id => access_key_id,\n                      :secret_access_key
                  => secret_access_key,\n                      :region => current_region)\n\n
                  \ i = ec2.instances[\"#{instance_id}\"]\n  $evm.log(\"info\", \"#{@method}
                  - ===================== task: #{i.inspect}\")\n\n  new_sg = Array.new\n\n
                  \ sg = i.security_groups.each do |s|\n    $evm.log(\"info\", \"#{@method}
                  - ===================== sg id: #{s.id.inspect}\")\n    new_sg <<
                  s.id unless s.id == dialog_security_group\n  end\n  $evm.log(\"info\",
                  \"#{@method} - ===================== new: #{new_sg.inspect}\")\n\n
                  \ i.network_interfaces.each do |nic|\n    nic.set_security_groups(new_sg)\n
                  \ end\n\n  sg = i.security_groups\n  $evm.log(\"info\", \"#{@method}
                  - ===================== sg after: #{sg.inspect}\")\n\n\n  $evm.log(\"info\",
                  \"#{@method} - ================================= EVM Automate Method
                  Ended\")\n\n  #\n  # Exit method\n  #\n  $evm.log(\"info\", \"#{@method}
                  - EVM Automate Method Ended\")\n  exit MIQ_OK\n\n    #\n    # Set
                  Ruby rescue behavior\n    #\nrescue => err\n  $evm.log(\"error\",
                  \"#{@method} - [#{err}]\\n#{err.backtrace.join(\"\\n\")}\")\n  exit
                  MIQ_STOP\nend\n"
                aws_ec2_delete_security_group.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_delete_security_group
                      display_name: AWS EC2 Delete Security Group
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_ebs_all_list.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_ebs_all_list\n#\n# This method
                  is used to search for all EBSs that are owned by a user in all allowed
                  regions\n#\n###################################\n#\n# Method for
                  logging\ndef log(level, message)\n  @method = 'aws_ec2_ebs_all_list'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\nlog(:info,
                  \"===== AWS List All EBSs in All Available Regions ==== Automate
                  Method Started\")\n#            Method Code Goes here\n#\n# Load
                  the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n\n  #####RBAC sample,
                  setting the filter mode\n\n  this_user = $evm.root['user'].userid.downcase\n
                  \ log(:info, \"this_user : #{this_user.inspect}\")\n  #AWS doesn't
                  like underscores, dashes or spaces so strip\n  this_user_group =
                  $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n  log(:info,
                  \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  access_key_id = nil\n  secret_access_key =
                  nil\n\n  dialog_field = $evm.object\n\n  # Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all regions returned from
                  EC2 and add them to list\n\n  # Get the Amazon authentication credentials...\n
                  \ ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n    # Get
                  the values from the schema ...\n    access_key_id ||= $evm.object['access_key_id']\n
                  \   secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  allowed_regions = $evm.object['allowed_regions']\n
                  \ allowed_regions = allowed_regions.split(\",\").each {|t| t.strip!}\n\n
                  \ #log(:info, \"Selected Region: #{selected_region}\")\n\n  AWS.config(\n
                  \     :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Create the basic EC2 object\n  #ec2_instance
                  = AWS::EC2.new( :region => default_region )\n\n  log(:info, \"+++++++++++++++++++
                  Dump of Allowed Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n
                  \ allowed_regions.each do |r|\n    ebs_instance = AWS::EC2.new(
                  :region => r )\n\n    log(:info, \"++++++++++++ Now Processing Region
                  : #{r}++++++++++++++++++++\")\n    log(:info, \"++++++++++++ User
                  ID : #{this_user}+++++++++++++++++++++++\")\n    log(:info, \"++++++++++++
                  Group ID : #{this_user_group}+++++++++++++++++\")\n\n\n    if filter_user
                  =='user'\n      ebs = ebs_instance.volumes.with_tag(\"userid\",
                  \"#{this_user}\")\n    elsif filter_user =='group'\n      ebs =
                  ebs_instance.volumes.with_tag(\"usergroup\", \"#{this_user_group}\")\n
                  \   else #should only fall through for Admin - group EvmGroup-super_administrator\n
                  \     ebs = ebs_instance.volumes\n    end\n\n    log(:info, \"EBS
                  : #{ebs.inspect}\")\n\n\n    # Create some local variables ...\n\n\n
                  \   unless ebs.nil?\n      ebs.each do |e|\n        log(:info, \"++++++++++
                  EBS : #{e.inspect} ++++++++++++++++++++++\")\n        name = e.tags.values_at(\"Name\")\n
                  \       log(:info, \"+++++++++++++ Name : #{name} +++++++++++++++++++\")\n
                  \       count += 1\n        if count == 1\n          first = e.id\n
                  \       end\n        log(:info, \"EBS: #{e.id} \")\n        list[\"#{e.id}|#{r}|#{name}\"]
                  \ = \"#{e.id}|#{r}\"\n      end\n    end\n  end\n  list[\"\"] =
                  \"\"\n\n  log(:info, \"LIST: #{list.inspect} \")\n\n  # sort_by:
                  value / description / none\n  $evm.object[\"sort_by\"] = \"description\"\n
                  \ # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ELASTIC BLOCK STORAGE =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC BLOCK
                  STORAGE =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_ebs_all_list.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_ebs_all_list
                      display_name: AWS EC2 List All EBS
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_ebs_device_list.rb: ! "###################################\r\n#\r\n#
                  CloudForms Automate Method: ebs_device_list\r\n#\r\n# This method
                  is used to attach an EBS using the allowed device list\r\n#\r\n###################################\r\n#
                  Method for logging\r\ndef log(level, message)\r\n  @method = 'ebs_device_list'\r\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\r\nend\r\n\r\ndef
                  dumpRoot\r\n  $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  Begin Attributes\")\r\n  $evm.root.attributes.sort.each { |k, v|
                  $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Attributes -
                  #{k}: #{v}\")}\r\n  $evm.log(\"info\", \"#{@method} - Root:<$evm.root>
                  End Attributes\")\r\n  $evm.log(\"info\", \"\")\r\nend\r\n\r\n#
                  dump root object attributes\r\ndumpRoot\r\n\r\nlog(:info, \"CloudForms
                  Automate Method Started\")\r\n\r\nrequire 'aws-sdk'\r\ndialog_field
                  = $evm.object\r\n\r\n# Get provisioning object\r\n\r\nbegin\r\n\r\n
                  \ vm = $evm.root['vm']\r\n\r\n  ems = vm.ext_management_system\r\n\r\n
                  \ region = ems.provider_region\r\n  \r\n  # log(:info, \"EMS Object
                  : #{ems.inspect}\")\r\n    \r\n  # Get the Amazon authentication
                  credentials...\r\n  access_key_id ||= ems.authentication_userid\r\n
                  \ secret_access_key = ems.authentication_password\r\n\r\n  AWS.config(\r\n
                  \     :access_key_id => access_key_id,\r\n      :secret_access_key
                  => secret_access_key\r\n  )\r\n\r\n  # Dynamic list to add values
                  to the dialog dynamic list ...\r\n  list = {}\r\n  in_use_devices
                  = []\r\n  allowed_ebs_devices = []\r\n\r\n  # Count of regions ...\r\n
                  \ count = 0\r\n\r\n  # Save first entry and make it the default
                  region\r\n  first = nil\r\n\r\n  # Start Here\r\n\r\n  allowed_ebs_devices
                  = $evm.object['allowed_device_list']\r\n  allowed_ebs_devices =
                  allowed_ebs_devices.split(\",\").each {|t| t.strip!}\r\n\r\n\r\n
                  \ # Create the basic EC2 object\r\n\r\n  ec2 = AWS::EC2.new( :region
                  => region )\r\n\r\n  # Set the instance from current instance\r\n
                  \ i = ec2.instances[\"#{vm.uid_ems}\"]\r\n  \r\n  log(:info,\"INSTANCE:
                  #{i.inspect} UID: #{vm.uid_ems}\")\r\n\r\n  # Find all instance
                  block devices and push them to an array taking out any numbers\r\n
                  \ i.block_devices.each do |b|\r\n    in_use_devices.push(b[:device_name].gsub(/[0-9]/,''))\r\n
                  \ end\r\n\r\n  # Remove any in use devices from the list of allowed
                  devices and set to a new array\r\n  allowed_ebs_devices = allowed_ebs_devices
                  - in_use_devices\r\n\r\n  # For each available device from allowed
                  devices put into the list\r\n  allowed_ebs_devices.each do |d|\r\n
                  \   count += 1\r\n    if count == 1\r\n      first = \"#{d}\"\r\n
                  \   end\r\n    list[\"#{d}\"]  = d\r\n  end\r\n\r\n  log(:info,
                  \"LIST: #{list.inspect} \")\r\n\r\n  # sort_by: value / description
                  / none\r\n  $evm.object[\"sort_by\"] = \"description\"\r\n  # sort_order:
                  ascending / descending\r\n  $evm.object[\"sort_order\"] = \"ascending\"\r\n
                  \ # data_type: string / integer\r\n  $evm.object[\"data_type\"]
                  = \"string\"\r\n  # required: true / false\r\n  $evm.object[\"required\"]
                  = \"true\"\r\n  # Add list to dialog dynamic list ...\r\n  $evm.object[\"values\"]
                  = list\r\n\r\n\r\n  # Make the first entry the default value\r\n
                  \ $evm.object[\"default_value\"] = first\r\n\r\n\r\n  ############\r\n
                  \ # Exit method\r\n  #\r\n  log(:info, \"CloudForms Automate Method
                  Ended\")\r\n  exit MIQ_OK\r\nend\r\n"
                aws_ec2_ebs_device_list.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_ebs_device_list
                      display_name: AWS EC2 EBS Device List
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_ebs_list_all_available.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_ebs_all_list\n#\n# This method
                  is used to search for all EBSs that are owned by a user in all allowed
                  regions\n#\n###################################\n#\n# Method for
                  logging\ndef log(level, message)\n  @method = 'aws_ec2_ebs_all_list'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\ndef dumpRoot\n
                  \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                  \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                  - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                  \"\")\nend\n\n# dump root object attributes\ndumpRoot\n#\nlog(:info,
                  \"===== AWS List All EBSs in All Available Regions ==== Automate
                  Method Started\")\n#            Method Code Goes here\n#\n# Load
                  the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n\n  #####RBAC sample,
                  setting the filter mode\n\n  this_user = $evm.root['user'].userid.downcase\n
                  \ log(:info, \"this_user : #{this_user.inspect}\")\n  #AWS doesn't
                  like underscores, dashes or spaces so strip\n  this_user_group =
                  $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n  log(:info,
                  \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  access_key_id = nil\n  secret_access_key =
                  nil\n\n  dialog_field = $evm.object\n\n  # Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all regions returned from
                  EC2 and add them to list\n\n  # Get the Amazon authentication credentials...\n
                  \ ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n    # Get
                  the values from the schema ...\n    access_key_id ||= $evm.object['access_key_id']\n
                  \   secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n\n  allowed_regions = $evm.object['allowed_regions']\n
                  \ allowed_regions = allowed_regions.split(\",\").each {|t| t.strip!}\n\n
                  \ #log(:info, \"Selected Region: #{selected_region}\")\n\n  AWS.config(\n
                  \     :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Create the basic EC2 object\n  #ec2_instance
                  = AWS::EC2.new( :region => default_region )\n\n  # log(:info, \"+++++++++++++++++++
                  Dump of Allowed Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n
                  \ allowed_regions.each do |r|\n    ebs_instance = AWS::EC2.new(
                  :region => r )\n\n    # log(:info, \"++++++++++++ Now Processing
                  Region : #{r}++++++++++++++++++++\")\n    # log(:info, \"++++++++++++
                  User ID : #{this_user}+++++++++++++++++++++++\")\n    # log(:info,
                  \"++++++++++++ Group ID : #{this_user_group}+++++++++++++++++\")\n\n\n
                  \   if filter_user =='user'\n      ebs = ebs_instance.volumes.with_tag(\"userid\",
                  \"#{this_user}\")\n    elsif filter_user =='group'\n      ebs =
                  ebs_instance.volumes.with_tag(\"usergroup\", \"#{this_user_group}\")\n
                  \   else #should only fall through for Admin - group EvmGroup-super_administrator\n
                  \     ebs = ebs_instance.volumes\n    end\n\n    log(:info, \"EBS
                  : #{ebs.inspect}\")\n\n\n    # Create some local variables ...\n\n\n
                  \   unless ebs.nil?\n      ebs.each do |e|\n        if e.status
                  == :available\n          log(:info, \"++++++++++ EBS : #{e.inspect}
                  ++++++++++++++++++++++\")\n          name = e.tags.values_at(\"Name\")\n
                  \         log(:info, \"+++++++++++++ Name : #{name} +++++++++++++++++++\")\n
                  \         count += 1\n          if count == 1\n            first
                  = e.id\n          end\n          log(:info, \"EBS: #{e.id} \")\n
                  \         list[\"#{e.id}|#{r}|#{name}\"]  = \"#{e.id}|#{r}\"\n        else\n
                  \         log(:info, \"+++++++++++ EBS #{e} is in use +++++++++++++++++++++++++++++++++\")\n
                  \       end\n      end\n    end\n  end\n  list[\"\"] = \"\"\n\n
                  \ log(:info, \"LIST: #{list.inspect} \")\n\n  # sort_by: value /
                  description / none\n  $evm.object[\"sort_by\"] = \"description\"\n
                  \ # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ELASTIC BLOCK STORAGE =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC BLOCK
                  STORAGE =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_ebs_list_all_available.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_ebs_list_all_available
                      display_name: AWS EC2 EBS List All Available
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_ebs_list_attachments.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_ebs_list_attachments\n#\n# This
                  method is used to list all EBS Volume attachments for an instance\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'aws_ec2_ebs_list_attachments'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\n\n#
                  Get provisioning object\n\nbegin\n\n  vm = $evm.root['vm']\n\n  ems
                  = vm.ext_management_system\n\n  region = ems.provider_region\n\n
                  \ # Get the Amazon authentication credentials...\n  access_key_id
                  ||= ems.authentication_userid\n  secret_access_key = ems.authentication_password\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Start Here\n  #\n  ec2 = AWS::EC2.new(
                  :region => region )\n\n\n  # Create some local variables ...\n\n
                  \ # Dynamic list to add values to the dialog dynamic list ...\n
                  \ list = {}\n  #\n  # Save first entry and make it the default region\n
                  \ first = nil\n\n  i = ec2.instances[vm.uid_ems]\n  i.block_devices.each
                  do |b|\n    #ap b.inspect\n    #ap b[:ebs][:volume_id]\n    #ap
                  b[:device_name].gsub(/[0-9]/,'')\n    device_list = [\"/dev/sda\",
                  \"/dev/sdb\", \"/dev/sdc\", \"/dev/sdd\", \"/dev/sde\"]\n    #ap
                  device_list.any? { |s| s.include?(b[:device_name].gsub(/[0-9]/,''))
                  }\n    unless device_list.any? { |s| s.include?(b[:device_name].gsub(/[0-9]/,''))
                  }\n      # Left is the display string and the right is what is passed
                  back to cfme\n      volume = ec2.volumes.each do |v|\n        if
                  v.id != b[:ebs][:volume_id]\n          # list[\"#{b[:ebs][:volume_id]}|#{b[:device_name]}\"]
                  \ = b[:ebs][:volume_id]\n        else\n          name = v.tags.values_at(\"Name\")\n
                  \         list[\"#{b[:ebs][:volume_id]}|#{b[:device_name]}|#{name}\"]
                  \ = b[:ebs][:volume_id]\n        end\n      end\n    end\n  end\n\n
                  \ # i.block_devices.each do |b|\n  #   #ap b[:ebs][:volume_id]\n
                  \ #   #ap b[:device_name].gsub(/[0-9]/,'')\n  #   device_list =
                  [\"/dev/sda\", \"/dev/sdb\", \"/dev/sdc\", \"/dev/sdd\", \"/dev/sde\"]\n
                  \ #   #ap device_list.any? { |s| s.include?(b[:device_name].gsub(/[0-9]/,''))
                  }\n  #   unless device_list.any? { |s| s.include?(b[:device_name].gsub(/[0-9]/,''))
                  }\n  #     # Left is the display string and the right is what is
                  passed back to cfme\n  #     list[\"#{b[:ebs][:volume_id]}|#{b[:device_name]}\"]
                  \ = b[:ebs][:volume_id]\n  #   end\n  # end\n\n  list[\"\"] = \"\"\n\n
                  \ log(:info, \"LIST: #{list.inspect} \")\n\n  # sort_by: value /
                  description / none\n  $evm.object[\"sort_by\"] = \"description\"\n
                  \ # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n  # # Count of regions ...\n  # count = 0\n  #\n  # # Save
                  first entry and make it the default region\n  # first = nil\n\n
                  \ # Go through all regions returned from EC2 and add them to list\n\n
                  \ # ec2.volumes.each do |v|\n  #   v.attachments.each do |a|\n  #
                  \    instance_id = a.instance.id\n  #     if instance_id == vm_id\n
                  \ #       log(:info, \"++++++ VM Name Matches : #{name} +++++++++\")\n
                  \ #     end\n  #   end\n  #   count += 1\n  #   if count == 1\n
                  \ #     first = v.id\n  #   end\n  #   log(:info, \"EBS: #{v.id}
                  \")\n  #   list[v.id]  = \"#{v.id}\"\n  # end\n  #\n  # list[\"\"]
                  = \"\"\n  #\n  # log(:info, \"LIST: #{list.inspect} \")\n  #\n  #
                  # sort_by: value / description / none\n  # $evm.object[\"sort_by\"]
                  = \"description\"\n  # # sort_order: ascending / descending\n  #
                  $evm.object[\"sort_order\"] = \"ascending\"\n  # # data_type: string
                  / integer\n  # $evm.object[\"data_type\"] = \"string\"\n  # # required:
                  true / false\n  # $evm.object[\"required\"] = \"true\"\n  # # Add
                  list to dialog dynamic list ...\n  # $evm.object[\"values\"] = list\n
                  \ #\n  #\n  # # Make the first entry the default value\n  # $evm.object[\"default_value\"]
                  = first\n\n  # ec2.volumes.each do |v|\n  #   v.id\n\n\n\n  ############\n
                  \ # Exit method\n  #\n  log(:info, \"CloudForms Automate Method
                  Ended\")\n  exit MIQ_OK\nend\n"
                aws_ec2_ebs_list_attachments.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_ebs_list_attachments
                      display_name: AWS EC2 EBS List Attachments
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_ebs_list_available_button.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_ebs_all_list\n#\n# This method
                  is used to search for all EBSs that are owned by a user in all allowed
                  regions\n#\n###################################\n#\n# Method for
                  logging\ndef log(level, message)\n  @method = 'aws_ec2_ebs_all_list'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\ndef dumpRoot\n
                  \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                  \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                  - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                  \"\")\nend\n\n# dump root object attributes\ndumpRoot\n#\nlog(:info,
                  \"===== AWS List All EBSs in All Available Regions ==== Automate
                  Method Started\")\n#            Method Code Goes here\n#\n\n# Load
                  the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n\n  dialog_field =
                  $evm.object\n  vm = $evm.root['vm']\n  ems = vm.ext_management_system\n\n
                  \ region = ems.hostname\n\n  #####RBAC sample, setting the filter
                  mode\n\n  this_user = $evm.root['user'].userid.downcase\n  log(:info,
                  \"this_user : #{this_user.inspect}\")\n  #AWS doesn't like underscores,
                  dashes or spaces so strip\n  this_user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n
                  \ log(:info, \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  # Dynamic list to add values to the dialog
                  dynamic list ...\n  list = {}\n\n  # Count of regions ...\n  count
                  = 0\n\n  # Save first entry and make it the default region\n  first
                  = nil\n\n  # Go through all regions returned from EC2 and add them
                  to list\n\n  # Get the Amazon authentication credentials...\n  access_key_id
                  ||= ems.authentication_userid\n  secret_access_key = ems.authentication_password\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Create the basic EC2 object\n  #ec2_instance
                  = AWS::EC2.new( :region => default_region )\n\n  # log(:info, \"+++++++++++++++++++
                  Dump of Allowed Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n\n
                  \   ebs_instance = AWS::EC2.new( :region => region )\n\n    # log(:info,
                  \"++++++++++++ Now Processing Region : #{r}++++++++++++++++++++\")\n
                  \   # log(:info, \"++++++++++++ User ID : #{this_user}+++++++++++++++++++++++\")\n
                  \   # log(:info, \"++++++++++++ Group ID : #{this_user_group}+++++++++++++++++\")\n\n\n
                  \   if filter_user =='user'\n      ebs = ebs_instance.volumes.with_tag(\"userid\",
                  \"#{this_user}\")\n    elsif filter_user =='group'\n      ebs =
                  ebs_instance.volumes.with_tag(\"usergroup\", \"#{this_user_group}\")\n
                  \   else #should only fall through for Admin - group EvmGroup-super_administrator\n
                  \     ebs = ebs_instance.volumes\n    end\n\n    log(:info, \"EBS
                  : #{ebs.inspect}\")\n\n\n    # Create some local variables ...\n\n\n
                  \   unless ebs.nil?\n      ebs.each do |e|\n        if e.status
                  == :available\n          log(:info, \"++++++++++ EBS : #{e.inspect}
                  ++++++++++++++++++++++\")\n          name = e.tags.values_at(\"Name\")\n
                  \         log(:info, \"+++++++++++++ Name : #{name} +++++++++++++++++++\")\n
                  \         count += 1\n          if count == 1\n            first
                  = e.id\n          end\n          log(:info, \"EBS: #{e.id} \")\n
                  \         list[\"#{e.id}|#{region}|#{name}\"]  = \"#{e.id}|#{region}\"\n
                  \       else\n          log(:info, \"+++++++++++ EBS #{e} is in
                  use +++++++++++++++++++++++++++++++++\")\n        end\n      end\n
                  \   end\n\n  list[\"\"] = \"\"\n\n  log(:info, \"LIST: #{list.inspect}
                  \")\n\n  # sort_by: value / description / none\n  $evm.object[\"sort_by\"]
                  = \"description\"\n  # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ELASTIC BLOCK STORAGE =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC BLOCK
                  STORAGE =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_ebs_list_available_button.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_ebs_list_available_button
                      display_name: AWS EC2 EBS List Available By Region Button
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_elbs.rb: ! "#\n#            Automate Method\n#\n# Method for
                  logging\ndef log(level, message)\n  @method = 'AWSELB'\n  $evm.log(level,
                  \"#{@method} - #{message}\")\nend\n#\nlog(:info, \"===== AWS List
                  ELBs ==== Automate Method Started\")\n#            Method Code Goes
                  here\n#\n# Load the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n  access_key_id
                  = nil\n  secret_access_key = nil\n\n  dialog_field = $evm.object\n\n
                  \ # Get the Amazon authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  selected_region = $evm.root['dialog_aws_region']\n
                  \ selected_elb = $evm.root['dialog_aws_elb']\n  log(:info, \"Selected
                  Region: #{selected_region}\")\n\n  if  selected_region == nil\n
                  \   default_region = $evm.object['default_aws_region']\n  else\n
                  \   default_region = selected_region\n  end\n\n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  # Create the basic EC2 object\n  #ec2_instance = AWS::EC2.new(
                  :region => default_region )\n  elb_instance = AWS::ELB.new( :region
                  => default_region )\n\n  elbs = elb_instance.load_balancers\n  log(:info,
                  \"ELB : #{elbs.inspect}\")\n\n\n  # Create some local variables
                  ...\n\n  # Dynamic list to add values to the dialog dynamic list
                  ...\n  list = {}\n\n  # Count of regions ...\n  count = 0\n\n  #
                  Save first entry and make it the default region\n  first = nil\n\n
                  \ # Go through all regions returned from EC2 and add them to list\n
                  \ elbs.each do |k|\n    count += 1\n    if count == 1\n      first
                  = k.name\n    end\n    log(:info, \"ELBS: #{k.name} \")\n    list[k.name]
                  \ = \"#{k.name}\"\n  end\n\n  list[\"\"] = \"\"\n\n  log(:info,
                  \"LIST: #{list.inspect} \")\n\n  # sort_by: value / description
                  / none\n  $evm.object[\"sort_by\"] = \"description\"\n  # sort_order:
                  ascending / descending\n  $evm.object[\"sort_order\"] = \"ascending\"\n
                  \ # data_type: string / integer\n  $evm.object[\"data_type\"] =
                  \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ELASTIC LOAD BALANCERS =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC LOAD
                  BALANCERS =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_elbs.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_elbs
                      display_name: List Existing Amazon Elastic Load Balancers for
                        a Region
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_elbs_all_list.rb: ! "#\n#            Automate Method\n#\n$evm.log(\"info\",
                  \"===== AWS List ELBs ==== Automate Method Started\")\n#\n# Method
                  for logging\ndef log(level, message)\n  @method = 'AWSELB'\n  $evm.log(level,
                  \"#{@method} - #{message}\")\nend\n#            Method Code Goes
                  here\n#\n# Load the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n\n
                  \ #####RBAC sample, setting the filter mode\n\n  this_user = $evm.root['user'].userid.downcase\n
                  \ log(:info, \"this_user : #{this_user.inspect}\")\n  #AWS doesn't
                  like underscores, dashes or spaces so strip\n  this_user_group =
                  $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n  log(:info,
                  \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  # dialog_field = $evm.object\n  access_key_id
                  = nil\n  secret_access_key = nil\n\n  # Get the Amazon authentication
                  credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n
                  \   # Get the values from the schema ...\n    access_key_id ||=
                  $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  allowed_regions = $evm.object['allowed_regions']\n
                  \ allowed_regions = allowed_regions.split(\",\").each {|t| t.strip!}\n\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  log(:info, \"+++++++++++++++++++
                  Dump of Allowed Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n#
                  Create some local variables ...\n\n# Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n\n  allowed_regions.each do |r|\n    elb_instance
                  = AWS::ELB.new( :region => r )\n\n    elbs = elb_instance.load_balancers\n
                  \   log(:info, \"ELB : #{elbs.inspect}\")\n\n    # Go through all
                  regions returned from EC2 and add them to list\n    elbs.each do
                  |k|\n      count += 1\n      if count == 1\n        first = k.name\n
                  \     end\n\n      if filter_user =='user'\n        if k.name.downcase.include?
                  this_user\n          $evm.log(\"info\", \"ELBS (added) : #{k.name}
                  \")\n          list[k.name]  = \"#{k.name}\"\n        else\n          $evm.log(\"info\",
                  \"ELBS (skipped, not user): #{k.name} \")\n        end\n      elsif
                  filter_user =='group'\n        if k.name.downcase.include? this_user_group\n
                  \         $evm.log(\"info\", \"ELBS (added) : #{k.name} \")\n          list[k.name]
                  \ = \"#{k.name}\"\n        else\n          $evm.log(\"info\", \"ELBS
                  (skipped, not group): #{k.name} \")\n        end\n      else #should
                  only fall through for Admin - group EvmGroup-super_administrator\n
                  \       $evm.log(\"info\", \"ELBS (added) : #{k.name} \")\n        list[k.name]
                  \ = \"#{k.name}\"\n      end\n    end\n  end\n\n  list[\"\"] = \"\"\n\n
                  \ $evm.log(\"info\", \"LIST: #{list.inspect} \")\n\n  # sort_by:
                  value / description / none\n  $evm.object[\"sort_by\"] = \"description\"\n
                  \ # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  $evm.log(\"info\", \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ $evm.log(\"info\", \"====== RETRIEVE AMAZON ELASTIC LOAD BALANCERS
                  =====  Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n$evm.log(\"info\",
                  \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC LOAD BALANCERS =====\")\n$evm.log(\"info\",
                  exception.message)\nend\n"
                aws_ec2_elbs_all_list.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_elbs_all_list
                      display_name: List All AWS ELBs for a Region
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_elbs_button.rb: ! "#\n#            Automate Method\n#\n# Method
                  for logging\ndef log(level, message)\n  @method = 'AWSELB'\n  $evm.log(level,
                  \"#{@method} - #{message}\")\nend\n#\nlog(:info, \"===== AWS List
                  ELBs ==== Automate Method Started\")\n#            Method Code Goes
                  here\n#\n# Load the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n\n
                  \ dialog_field = $evm.object\n  vm = $evm.root['vm']\n  ems = vm.ext_management_system\n\n\n
                  \ # Get the Amazon authentication credentials...\n  access_key_id
                  ||= ems.authentication_userid\n  secret_access_key = ems.authentication_password\n\n
                  \ region = ems.hostname\n  log(:info, \"Selected Region: #{region}\")\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Create the basic EC2 object\n  #ec2_instance
                  = AWS::EC2.new( :region => default_region )\n  elb_instance = AWS::ELB.new(
                  :region => region )\n\n  elbs = elb_instance.load_balancers\n  log(:info,
                  \"ELB : #{elbs.inspect}\")\n\n\n  # Create some local variables
                  ...\n\n  # Dynamic list to add values to the dialog dynamic list
                  ...\n  list = {}\n\n  # Count of regions ...\n  count = 0\n\n  #
                  Save first entry and make it the default region\n  first = nil\n\n
                  \ # Go through all regions returned from EC2 and add them to list\n
                  \ elbs.each do |k|\n    count += 1\n    if count == 1\n      first
                  = k.name\n    end\n    log(:info, \"ELBS: #{k.name} \")\n    list[k.name]
                  \ = \"#{k.name}\"\n  end\n\n  list[\"\"] = \"\"\n\n  log(:info,
                  \"LIST: #{list.inspect} \")\n\n  # sort_by: value / description
                  / none\n  $evm.object[\"sort_by\"] = \"description\"\n  # sort_order:
                  ascending / descending\n  $evm.object[\"sort_order\"] = \"ascending\"\n
                  \ # data_type: string / integer\n  $evm.object[\"data_type\"] =
                  \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ELASTIC LOAD BALANCERS =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC LOAD
                  BALANCERS =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_elbs_button.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_elbs_button
                      display_name: List Existing ELBs for a Button
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_elbs_list.rb: ! "#\n#            Automate Method\n#\n# Method
                  for logging\ndef log(level, message)\n  @method = 'AWSELB'\n  $evm.log(level,
                  \"#{@method} - #{message}\")\nend\n#\nlog(:info, \"===== AWS List
                  ELBs ==== Automate Method Started\")\n#            Method Code Goes
                  here\n#\n# Load the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n  access_key_id
                  = nil\n  secret_access_key = nil\n\n  dialog_field = $evm.object\n
                  \ vm = $evm.root['vm']\n  ems = vm.ext_management_system\n\n\n  #
                  Get the Amazon authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  selected_region = $evm.root['dialog_aws_region']\n
                  \ selected_elb = $evm.root['dialog_aws_elb']\n  log(:info, \"Selected
                  Region: #{selected_region}\")\n\n  if  selected_region == nil\n
                  \   default_region = $evm.object['default_aws_region']\n  else\n
                  \   default_region = selected_region\n  end\n\n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  # Create the basic EC2 object\n  ec2_instance = AWS::EC2.new(
                  :region => default_region )\n  elb_instance = AWS::ELB.new( :region
                  => default_region )\n\n  elbs = elb_instance.load_balancers\n  log(:info,
                  \"ELB : #{elbs.inspect}\")\n\n\n  # Create some local variables
                  ...\n\n  # Dynamic list to add values to the dialog dynamic list
                  ...\n  list = {}\n\n  # Count of regions ...\n  count = 0\n\n  #
                  Save first entry and make it the default region\n  first = nil\n\n
                  \ # Go through all regions returned from EC2 and add them to list\n
                  \ elbs.each do |k|\n    count += 1\n    if count == 1\n      first
                  = k.name\n    end\n    log(:info, \"ELBS: #{k.name} \")\n    list[k.name]
                  \ = \"#{k.name}\"\n  end\n\n  list[\"\"] = \"\"\n\n  log(:info,
                  \"LIST: #{list.inspect} \")\n\n  # sort_by: value / description
                  / none\n  $evm.object[\"sort_by\"] = \"description\"\n  # sort_order:
                  ascending / descending\n  $evm.object[\"sort_order\"] = \"ascending\"\n
                  \ # data_type: string / integer\n  $evm.object[\"data_type\"] =
                  \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ELASTIC LOAD BALANCERS =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC LOAD
                  BALANCERS =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_elbs_list.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_elbs_list
                      display_name: List AWS ELBs for a Region
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_elbs_list_all_button.rb: ! "#\n#            Automate Method\n#\n$evm.log(\"info\",
                  \"===== AWS List ELBs ==== Automate Method Started\")\n#\n# Method
                  for logging\ndef log(level, message)\n  @method = 'AWSELB'\n  $evm.log(level,
                  \"#{@method} - #{message}\")\nend\n#            Method Code Goes
                  here\n#\n# Load the aws-sdk\nrequire \"aws-sdk\"\n\nvm = $evm.root['vm']\nems
                  = vm.ext_management_system\n\nregion = ems.hostname\n\nbegin\n\n
                  \ #####RBAC sample, setting the filter mode\n\n  this_user = $evm.root['user'].userid.downcase\n
                  \ log(:info, \"this_user : #{this_user.inspect}\")\n  #AWS doesn't
                  like underscores, dashes or spaces so strip\n  this_user_group =
                  $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n  log(:info,
                  \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  dialog_field = $evm.object\n\n# Get the Amazon
                  authentication credentials...\n  access_key_id ||= ems.authentication_userid\n
                  \ secret_access_key = ems.authentication_password\n\n  # allowed_regions
                  = $evm.object['allowed_regions']\n  # allowed_regions = allowed_regions.split(\",\").each
                  {|t| t.strip!}\n\n\n  AWS.config(\n      :access_key_id => access_key_id,\n
                  \     :secret_access_key => secret_access_key\n  )\n\n  #log(:info,
                  \"+++++++++++++++++++ Dump of Allowed Regions : #{allowed_regions}
                  +++++++++++++++++++++++\")\n\n# Create some local variables ...\n\n#
                  Dynamic list to add values to the dialog dynamic list ...\n  list
                  = {}\n\n  # Count of regions ...\n  count = 0\n\n  # Save first
                  entry and make it the default region\n  first = nil\n\n\n  # allowed_regions.each
                  do |r|\n    elb_instance = AWS::ELB.new( :region => region )\n\n
                  \   elbs = elb_instance.load_balancers\n    #log(:info, \"ELB :
                  #{elbs.inspect}\")\n\n    # Go through all regions returned from
                  EC2 and add them to list\n    elbs.each do |k|\n      count += 1\n
                  \     if count == 1\n        first = k.name\n      end\n\n      if
                  filter_user =='user'\n        if k.name.downcase.include? this_user\n
                  \         $evm.log(\"info\", \"ELBS (added) : #{k.name} \")\n          k.instances.each
                  do |instance|\n            if instance == k.instances[\"#{vm.uid_ems}\"]\n
                  \             list[k.name]  = \"#{k.name}\"\n              # ap
                  \"There is an instance attached here #{name}\"\n            end\n
                  \         end\n          #list[k.name]  = \"#{k.name}\"\n        else\n
                  \         $evm.log(\"info\", \"ELBS (skipped, not user): #{k.name}
                  \")\n        end\n      elsif filter_user =='group'\n        if
                  k.name.downcase.include? this_user_group\n          $evm.log(\"info\",
                  \"ELBS (added) : #{k.name} \")\n          k.instances.each do |instance|\n
                  \           if instance == k.instances[\"#{vm.uid_ems}\"]\n              list[k.name]
                  \ = \"#{k.name}\"\n              # ap \"There is an instance attached
                  here #{name}\"\n            end\n          end\n          #list[k.name]
                  \ = \"#{k.name}\"\n        else\n          $evm.log(\"info\", \"ELBS
                  (skipped, not group): #{k.name} \")\n        end\n      else #should
                  only fall through for Admin - group EvmGroup-super_administrator\n
                  \       $evm.log(\"info\", \"ELBS (added) : #{k.name} \")\n        k.instances.each
                  do |instance|\n          if instance == k.instances[\"#{vm.uid_ems}\"]\n
                  \           list[k.name]  = \"#{k.name}\"\n            # ap \"There
                  is an instance attached here #{name}\"\n          end\n        end\n
                  \       #list[k.name]  = \"#{k.name}\"\n      end\n    end\n  #
                  end\n\n  list[\"\"] = \"\"\n\n  $evm.log(\"info\", \"LIST: #{list.inspect}
                  \")\n\n  # sort_by: value / description / none\n  $evm.object[\"sort_by\"]
                  = \"description\"\n  # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  $evm.log(\"info\", \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ $evm.log(\"info\", \"====== RETRIEVE AMAZON ELASTIC LOAD BALANCERS
                  =====  Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ $evm.log(\"info\", \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC
                  LOAD BALANCERS =====\")\n  $evm.log(\"info\", exception.message)\nend\n"
                aws_ec2_elbs_list_all_button.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_elbs_list_all_button
                      display_name: AWS ELB List All Button
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_keypair_all_list.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_keypair_all_list\n#\n# This
                  method is used to search for all Keypairs that are owned by a user
                  in all allowed regions\n#\n###################################\n#\n#
                  Method for logging\ndef log(level, message)\n  @method = 'aws_ec2_keypair_all_list'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\nlog(:info,
                  \"===== AWS List All Keypairs in All Available Regions ==== Automate
                  Method Started\")\n#            Method Code Goes here\n#\n# Load
                  the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n  access_key_id = nil\n
                  \ secret_access_key = nil\n\n  dialog_field = $evm.object\n\n  #
                  Dynamic list to add values to the dialog dynamic list ...\n  list
                  = {}\n\n  # Count of regions ...\n  count = 0\n\n  # Save first
                  entry and make it the default region\n  first = nil\n\n  #####RBAC
                  sample, setting the filter mode\n\n  this_user = $evm.root['user'].userid.downcase\n
                  \ log(:info, \"this_user : #{this_user.inspect}\")\n  #AWS doesn't
                  like underscores, dashes or spaces so strip\n  this_user_group =
                  $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n  log(:info,
                  \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  # Get the Amazon authentication credentials...\n
                  \ ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n    # Get
                  the values from the schema ...\n    access_key_id ||= $evm.object['access_key_id']\n
                  \   secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  \n  r = allowed_regions
                  = ems.provider_region\n  \n  #allowed_regions = $evm.object['allowed_regions']\n
                  \ #allowed_regions = allowed_regions.split(\",\").each {|t| t.strip!}\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  log(:info, \"+++++++++++++++++++
                  Dump of Allowed Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n
                  \ # Go through all regions\n  #allowed_regions.each do |r|\n    log(:info,
                  \"<<<<<<<<<================>>>>>>>>> Processing region #{r}  <<<<<<<<<<<<<=================>>>>>>>>>>>>>\")\n\n
                  \   log(:info, '   ================ Creating EC2 object =================')\n
                  \   ec2 = AWS::EC2.new(:region => r)\n\n    ec2.key_pairs.each do
                  |k|\n      log(:info,\"#{k.inspect}\")\n\n      if filter_user =='user'\n
                  \       if k.name.downcase.include? this_user\n          $evm.log(\"info\",
                  \"Keypair (added) : #{k.name} \")\n          list[k.name]  = \"#{k.name}\"\n
                  \       else\n          $evm.log(\"info\", \"Keypair (skipped, not
                  user): #{k.name} \")\n        end\n      elsif filter_user =='group'\n
                  \       if k.name.downcase.include? this_user_group\n          $evm.log(\"info\",
                  \"Keypair (added) : #{k.name} \")\n          list[k.name]  = \"#{k.name}\"\n
                  \       else\n          $evm.log(\"info\", \"Keypair (skipped, not
                  group): #{k.name} \")\n        end\n      else #should only fall
                  through for Admin - group EvmGroup-super_administrator\n        $evm.log(\"info\",
                  \"Keypair (added) : #{k.name} \")\n        list[k.name]  = \"#{k.name}\"\n
                  \     end\n\n    end\n  #end\n\n  list[\"\"] = \"\"\n\n  log(:info,
                  \"LIST: #{list.inspect} \")\n\n  # sort_by: value / description
                  / none\n  $evm.object[\"sort_by\"] = \"description\"\n  # sort_order:
                  ascending / descending\n  $evm.object[\"sort_order\"] = \"ascending\"\n
                  \ # data_type: string / integer\n  $evm.object[\"data_type\"] =
                  \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  #log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== AWS List All Keypairs in All Available Regions
                  =====  Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== AWS List All Keypairs in All Available Regions
                  =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_keypair_all_list.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_keypair_all_list
                      display_name: AWS EC2 List of all Keypairs
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_list_all_images.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_list_all_images\n#\n# This method
                  is used to search for all AMIs that are owned by a user \n#\n###################################\n#\n#
                  Method for logging\ndef log(level, message)\n  @method = 'aws_ec2_list_all_images'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\ndef dumpRoot\n
                  \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                  \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                  - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                  \"\")\nend\n\n# dump root object attributes\ndumpRoot\n#\nlog(:info,
                  \"===== AWS List All AMIs in AWS Region ==== Automate Method Started\")\n#
                  \           Method Code Goes here\n#\n# Load the aws-sdk\nrequire
                  \"aws-sdk\"\n\n\nbegin\n\n  #####RBAC sample, setting the filter
                  mode\n\n  this_user = $evm.root['user'].userid.downcase\n  log(:info,
                  \"this_user : #{this_user.inspect}\")\n  #AWS doesn't like underscores,
                  dashes or spaces so strip\n  this_user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n
                  \ log(:info, \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  access_key_id = nil\n  secret_access_key =
                  nil\n\n  dialog_field = $evm.object\n\n  # Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all regions returned from
                  EC2 and add them to list\n\n  # Get the Amazon authentication credentials...\n
                  \ ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n    # Get
                  the values from the schema ...\n    access_key_id ||= $evm.object['access_key_id']\n
                  \   secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  #allowed_regions = $evm.object['allowed_regions']\n
                  \ #allowed_regions = allowed_regions.split(\",\").each {|t| t.strip!}\n\n
                  \ default_region = $evm.object['dialog_aws_region']\n  availability_zone
                  = $evm.root['dialog_aws_availability_zone']\n  \n  #log(:info, \"Selected
                  Region: #{selected_region}\")\n\n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  # Create the basic EC2 object\n  ec2_instance = AWS::EC2.new(
                  :region => default_region, :availability_zone => availability_zone
                  )\n\n  #regions = ec2_instance.regions\n  \n  # log(:info, \"+++++++++++++++++++
                  Dump of Allowed Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n
                  \ #allowed_regions.each do |r|\n  #regions.each do |r|\n    #ebs_instance
                  = AWS::EC2.new( :region => r.name )\n\n    # log(:info, \"++++++++++++
                  Now Processing Region : #{r}++++++++++++++++++++\")\n    # log(:info,
                  \"++++++++++++ User ID : #{this_user}+++++++++++++++++++++++\")\n
                  \   # log(:info, \"++++++++++++ Group ID : #{this_user_group}+++++++++++++++++\")\n\n
                  \   # Get ALL AMIs for the region\n  all_images = ec2_instance.images\n\n
                  \ filter_user = 'self'\n  \n  if filter_user =='user'\n    images
                  = all_images.with_owner(\"#{this_user}\")\n  elsif filter_user =='group'\n
                  \   images = all_images.tagged(\"#{this_user_group}\")\n  else #should
                  only fall through for Admin - group EvmGroup-super_administrator\n
                  \   images = all_images.with_owner('self')\n  end\n\n  #log(:info,
                  \"images : #{images.inspect}\")\n\n\n  # Create some local variables
                  ...\n\n\n  unless images.nil?\n    images.each do |image|\n      name
                  = image.name\n      log(:info, \"+++++++++++++ Name : #{name} +++++++++++++++++++\")\n
                  \     count += 1\n      if count == 1\n        first = image.image_id\n
                  \     end\n      log(:info, \"AMI: #{image.image_id} \")\n      list[\"#{image.image_id}|#{default_region}|#{name}\"]
                  \ = \"#{image.image_id}|#{default_region}|#{name}\"\n    end\n  end\n
                  \ list[\"\"] = \"\"\n\n  log(:info, \"LIST: #{list.inspect} \")\n\n
                  \ # sort_by: value / description / none\n  $evm.object[\"sort_by\"]
                  = \"description\"\n  # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n  log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON AMI Images =====  Automate
                  Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n  log(:info,
                  \"====== EXCEPTION IN RETRIEVE AMAZON AMI Images =====\")\n  log(:info,
                  exception.message)\nend\n\n"
                aws_ec2_list_all_images.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_list_all_images
                      display_name: AWS EC2 List all images
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_list_ebs_button.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: list_all_ebs\n#\n# This method is used
                  to list all EBS Volumes\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'list_all_ebs'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\n\n#
                  Get provisioning object\n\nbegin\n\n  vm = $evm.root['vm']\n  #log(:info,
                  \" VM Info : #{vm.inspect}\")\n\n  ems = vm.ext_management_system\n\n
                  \ region = ems.hostname\n\n  # Get the Amazon authentication credentials...\n
                  \ access_key_id ||= ems.authentication_userid\n  secret_access_key
                  = ems.authentication_password\n\n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  # Start Here\n  log(:info, \"Selected Region: #{region}\")\n\n
                  \ #\n  ec2 = AWS::EC2.new( :region => region )\n\n\n  # Create some
                  local variables ...\n\n  # Dynamic list to add values to the dialog
                  dynamic list ...\n  list = {}\n\n  # Count of regions ...\n  count
                  = 0\n\n  # Save first entry and make it the default region\n  first
                  = nil\n\n  # Go through all regions returned from EC2 and add them
                  to list\n\n  ec2.volumes.each do |v|\n    count += 1\n    if count
                  == 1\n      first = v.id\n    end\n    log(:info, \"EBS: #{v.id}
                  \")\n    list[v.id]  = \"#{v.id}\"\n  end\n\n  list[\"\"] = \"\"\n\n
                  \ log(:info, \"LIST: #{list.inspect} \")\n\n  # sort_by: value /
                  description / none\n  $evm.object[\"sort_by\"] = \"description\"\n
                  \ # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n  # ec2.volumes.each do |v|\n  #   v.id\n\n\n\n  ############\n
                  \ # Exit method\n  #\n  log(:info, \"CloudForms Automate Method
                  Ended\")\n  exit MIQ_OK\nend\n"
                aws_ec2_list_ebs_button.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_list_ebs_button
                      display_name: List Existing AWS EBS for a Region
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_list_instances.rb: ! "#\n#            Automate Method\n#\n$evm.log(\"info\",
                  \"Automate Method Started\")\n#\n#            Method Code Goes here\n#\n\ninstances_box
                  = $evm.root['dialog_aws_instances']\n\n$evm.log(\"info\", \"===========================================\")\n
                  \ $evm.log(\"info\", \"Listing ROOT Attributes:\")\n  $evm.root.attributes.sort.each
                  { |k, v| $evm.log(\"info\", \"\\t#{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"===========================================\")\n\n$evm.log(\"info\",
                  \"===========================================\")\n  $evm.log(\"info\",
                  \"Listing OBJECT Attributes:\")\n  $evm.object.attributes.sort.each
                  { |k, v| $evm.log(\"info\", \"\\t#{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"===========================================\")\nexit MIQ_OK\n"
                aws_ec2_list_instances.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_list_instances
                      display_name: List Instances from AWS
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_list_my_elbs.rb: ! "#\n#            Automate Method\n#\n$evm.log(\"info\",
                  \"===== AWS List My ELBs ==== Automate Method Started\")\n#\n# Method
                  for logging\ndef log(level, message)\n  @method = 'aws_ec2_list_my_elbs'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#            Method
                  Code Goes here\n#\n# Load the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n
                  \ dialog_field = $evm.object\n  vm = $evm.root['vm']\n  ems = vm.ext_management_system\n\n
                  \ region = ems.hostname\n\n  # Get the Amazon authentication credentials...\n
                  \ access_key_id ||= ems.authentication_userid\n  secret_access_key
                  = ems.authentication_password\n\n  #vm = $evm.root['vm']\n  #ems
                  = vm.ext_management_system\n  #encrypted_password = ems.authentication_password\n
                  \ #log(:info, \"Encrypted Password : #{encrypted_password}\")\n\n\n\n
                  \ #if  selected_region == nil\n  # else\n  #   default_region =
                  selected_region\n  # end\n\n\n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  # Create the basic EC2 object\n  ec2_instance = AWS::EC2.new(
                  :region => region )\n  elb_instance = AWS::ELB.new( :region => region
                  )\n\n  elbs = elb_instance.load_balancers\n  log(:info, \"ELB :
                  #{elbs.inspect}\")\n\n  #####RBAC sample, setting the filter mode\n\n
                  \ this_user = $evm.root['user'].userid.downcase\n  log(:info, \"this_user
                  : #{this_user.inspect}\")\n  #AWS doesn't like underscores, dashes
                  or spaces so strip\n  this_user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n
                  \ log(:info, \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  # Create some local variables ...\n\n  # Dynamic
                  list to add values to the dialog dynamic list ...\n  list = {}\n\n
                  \ # Count of regions ...\n  count = 0\n\n  # Save first entry and
                  make it the default region\n  first = nil\n\n  # Go through all
                  regions returned from EC2 and add them to list\n  elbs.each do |k|\n
                  \   count += 1\n    if count == 1\n      first = k.name\n    end\n\n
                  \   if filter_user =='user'\n      if k.name.downcase.include? this_user\n
                  \       $evm.log(\"info\", \"ELBS (added) : #{k.name} \")\n        list[k.name]
                  \ = \"#{k.name}\"\n      else\n        $evm.log(\"info\", \"ELBS
                  (skipped, not user): #{k.name} \")\n      end\n    elsif filter_user
                  =='group'\n      if k.name.downcase.include? this_user_group\n        $evm.log(\"info\",
                  \"ELBS (added) : #{k.name} \")\n        list[k.name]  = \"#{k.name}\"\n
                  \     else\n        $evm.log(\"info\", \"ELBS (skipped, not group):
                  #{k.name} \")\n      end\n    else #should only fall through for
                  Admin - group EvmGroup-super_administrator\n      $evm.log(\"info\",
                  \"ELBS (added) : #{k.name} \")\n      list[k.name]  = \"#{k.name}\"\n
                  \   end\n\n    # else\n    #\n    #   list[k.name]  = \"#{k.name}\"\n
                  \   # end\n  end\n\n  list[\"\"] = \"\"\n\n  $evm.log(\"info\",
                  \"LIST: #{list.inspect} \")\n\n  # sort_by: value / description
                  / none\n  $evm.object[\"sort_by\"] = \"description\"\n  # sort_order:
                  ascending / descending\n  $evm.object[\"sort_order\"] = \"ascending\"\n
                  \ # data_type: string / integer\n  $evm.object[\"data_type\"] =
                  \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  $evm.log(\"info\", \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ $evm.log(\"info\", \"====== RETRIEVE AMAZON ELASTIC LOAD BALANCERS=====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ $evm.log(\"info\", \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC
                  LOAD BALANCERS =====\")\n  $evm.log(\"info\", exception.message)\nend\n"
                aws_ec2_list_my_elbs.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_list_my_elbs
                      display_name: AWS EC2 List My ELBS
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_regions.rb: ! "###################################\n#\n# CloudForms
                  Automate Method: aws_ec2_regions\n#\n# This method is used to search
                  for all available AWS EC2 Regions\n#\n###################################\n#\n#\n#
                  Method for logging\ndef log(level, message)\n  @method = 'aws_ec2_regions'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\n#\nlog(:info,
                  \"====== RETRIEVE AMAZON REGIONS ===== Automate Method Started\")\n#\n#
                  \           Method Code Goes here\n#\n\n# Load the aws-sdk\nrequire
                  \"aws-sdk\"\n\nvm = $evm.root['vm']\nems = vm.ext_management_system\n#log(:info,
                  \"VM EXT Management System : #{ems.inspect}\")\n\n\n\n# @!method
                  available_regions\n# List of available regions in EC2\n#\n# @return
                  [AWS::RegionCollection] .\n#\n# def available_regions\n#   return
                  ec2_instance.regions\n# end\n\n\nbegin\n\n# Get the Amazon authentication
                  credentials...\n  access_key_id ||= ems.authentication_userid\n
                  \ secret_access_key = ems.authentication_password\n\n  region =
                  ems.hostname\n  #log(:info, \"EMS Hostname : #{region}\")\n\n\nAWS.config(\n
                  \   :access_key_id => access_key_id,\n    :secret_access_key =>
                  secret_access_key\n)\n\n# Create the basic EC2 object\nec2_instance
                  = AWS::EC2.new(:region => region)\n\n# Retrieve the available EC2
                  Regions\n#regions = ec2_instance.regions\n\n# Create some local
                  variables ...\n\n# Dynamic list to add values to the dialog dynamic
                  list ...\nlist = {}\n\n# Count of regions ...\ncount = 0\n\n# Save
                  first entry and make it the default region\nfirst = nil\n\n# Go
                  through all regions returned from EC2 and add them to list\nregion.each
                  do |r|\n  count += 1\n  if count == 1\n    first = r.name\n  end\n
                  \ log(:info, \"REGIONS: #{r.name} \")\n  list[r.name]  = \"#{r.name}\"\nend\n\nlist[\"\"]
                  = \"\"\n\nlog(:info, \"LIST: #{list.inspect} \")\n\n# Add list to
                  dialog dynamic list ...\n$evm.object[\"values\"] = list\n\n# Make
                  the first entry the default value\n#$evm.object[\"default_value\"]
                  = first\n\n#$evm.object['selected_aws_region'] = $evm.root['dialog_aws_region']\n\n#log(:info,
                  \"====== REGION: #{$evm.object['dialog_aws_region']}\")\n#log(:info,
                  \"====== SELECTED REGION: #{$evm.object['selected_aws_region']}\")\n\nlog(:info,
                  \"====== RETRIEVE AMAZON REGIONS =====  Automate Method \")\n\n#task
                  = $evm.root['service_template_provision_task\"']\n#log(:info, \"===========================================\")\n#log(:info,
                  \"Listing ROOT Attributes:\")\n#$evm.root.attributes.sort.each {
                  |k, v| log(:info, \"\\t#{k}: #{v}\")}\n#log(:info, \"===========================================\")\n\n#stp_task
                  = $evm.root[\"service_template\"]\n#log(:info, \"===========================================\")\n#log(:info,
                  \"Listing task Attributes:\")\n#stp_task.attributes.sort.each {
                  |k, v| log(:info, \"\\t#{k}: #{v}\")}\n#log(:info, \"===========================================\")\n\n
                  \ exit MIQ_OK\n\nrescue => exception\n  log(:info, \"====== EXCEPTION
                  IN RETRIEVE AMAZON REGIONS =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_regions.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_regions
                      display_name: Method to retrieve AWS EC2 Regions
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_subnets.rb: ! "#\n#            Automate Method\n#\n$evm.log(\"info\",
                  \"Automate Method Started\")\n#\n#            Method Code Goes here\n#\n\n#
                  Load the aws-sdk\nrequire \"aws-sdk\"\n\n# If it comes from a button
                  you can do this.\nif $evm.object['vmdb_object_type'] != \"service_template\"\n
                  \  myvm = $evm.root[\"vm\"]\n   ems = vm.ext_management_system\nend\n\n#
                  @!method available_regions\n# List of available regions in EC2\n#\n#
                  @return [AWS::RegionCollection] .\n#\n\nbegin\n  dialog_field =
                  $evm.object\n  \n# Get the Amazon authentication credentials...\n
                  \ if $evm.object['vmdb_object_type'] != \"service_template\"\n  \taccess_key_id
                  ||= ems.authentication_userid\n  \tsecret_access_key = ems.authentication_password.decrypt\n
                  \ else\n    \n    ems = $evm.vmdb(:ems_amazon).first\n    \n    if
                  ems.nil?\n       access_key_id ||= $evm.object['access_key_id']\n
                  \ \t   secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \   else \n      access_key_id ||= ems.authentication_userid\n      secret_access_key
                  ||= ems.authentication_password\n    end\n  end\n  \n  selected_region
                  = $evm.object['dialog_aws_region']\n  if selected_region == nil\n
                  \   default_region = $evm.object['default_aws_region']\n  else\n
                  \   default_region = selected_region\n  end\n\n  selected_vpc =
                  $evm.root['dialog_aws_vpc']\n  \n  if selected_vpc.nil?\n    raise
                  \"VPC Selection cannot be nil\"\n  end\n  \n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  # Create the basic EC2 object\n  ec2_instance = AWS::EC2.new(:region
                  => default_region)\n\n  # Retrieve the available EC2 Regions\n  subnets
                  = ec2_instance.vpcs[selected_vpc].subnets\n\n  # Create some local
                  variables ...\n\n  # Dynamic list to add values to the dialog dynamic
                  list ...\n  list = {}\n\n  list[\"\"]=\"\"\n  \n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all regions returned from
                  EC2 and add them to list\n  subnets.each do |k|\n    count += 1\n
                  \   if count == 1\n      first = k.id\n    end\n    $evm.log(\"info\",
                  \"SUBNETS: #{k.id} \")\n    list[k.id]  = \"#{k.id}|#{k.cidr_block}|#{k.state}\"\n
                  \ end\n\n  $evm.log(\"info\", \"LIST: #{list.inspect} \")\n\n  #
                  Add list to dialog dynamic list ...\n  $evm.object[\"values\"] =
                  list\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n  exit MIQ_OK\n\nrescue => exception\n  $evm.log(\"info\",
                  \"====== EXCEPTION IN RETRIEVE AMAZON REGIONS =====\")\n  $evm.log(\"info\",
                  exception.message)\nend\n"
                aws_ec2_subnets.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_subnets
                      display_name: Retrieve available EC2 subnets
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_vpcs.rb: ! "#            Automate Method\n#\n$evm.log(\"info\",
                  \"====== RETRIEVE AMAZON VPCs ===== Automate Method Started\")\n#\n#
                  \           Method Code Goes here\n#\n# Method for logging\ndef
                  log(level, message)\n  @method = 'create_attach_ebs_volume_button'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\n\n# Load
                  the aws-sdk\nrequire \"aws-sdk\"\n\nbegin\n  dialog_field = $evm.object\n
                  \ access_key_id = nil\n  secret_access_key = nil\n\n  # Get the
                  Amazon authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  selected_region = $evm.object['dialog_aws_region']\n  log(:info,
                  \"++++++++++++++++++++++++ Region : #{selected_region} +++++++++++++++++++++++++++++++\")\n\n\n
                  \ if selected_region == nil\n    default_region = $evm.object['dialog_aws_region']\n
                  \ else\n    default_region = selected_region\n  end\n\n  # Create
                  the basic EC2 object\n  ec2_instance = AWS::EC2.new(:region => default_region)\n\n
                  \ # Retrieve the available EC2 Regions\n  vpcs = ec2_instance.vpcs\n\n
                  \ # Create some local variables ...\n\n  # Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all vpcs returned from EC2
                  and add them to list\n  vpcs.each do |k|\n    count += 1\n    if
                  count == 1\n      first = k.id\n    end\n    $evm.log(\"info\",
                  \"VPC Name: #{k.id} \")\n    list[k.id]  = \"#{k.id}|#{k.cidr_block}\"\n
                  \ end\n\n  list[\"\"] = \"\"\n\n  $evm.log(\"info\", \"LIST: #{list.inspect}
                  \")\n\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n  # Make the first entry the default value\n  dialog_field[\"default_value\"]
                  = first\n  $evm.log(\"info\", \"====== RETRIEVE AMAZON VPCs =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ $evm.log(\"info\", \"====== EXCEPTION IN RETRIEVE AMAZON VPCs
                  =====\")\n  $evm.log(\"info\", exception.message)\nend\n"
                aws_ec2_vpcs.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_vpcs
                      display_name: Method to retrieve existing VPCs
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_elb_regions.rb: ! "###################################\n#\n# CloudForms
                  Automate Method: aws_elb_regions\n#\n# This method is used to search
                  for all ELB regions\n#\n###################################\n#\n#
                  Method for logging\n#\ndef log(level, message)\n  @method = 'aws_elb_regions'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n$evm.log(\"info\",
                  \"====== RETRIEVE AMAZON REGIONS ===== Automate Method Started\")\n#\n#
                  \           Method Code Goes here\n#\n\n# Load the aws-sdk\nrequire
                  \"aws-sdk\"\n\n\n# @!method available_regions\n# List of available
                  regions in EC2\n#\n# @return [AWS::RegionCollection] .\n#\ndef available_regions\n
                  \ return ec2_instance.regions\nend\n\n\nbegin\n  dialog_field =
                  $evm.object\n  access_key_id = nil\n  secret_access_key = nil\n\n
                  \ # Get the Amazon authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n\n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  # Create the basic EC2 object\n  ec2_instance = AWS::EC2.new(:region
                  => default_region)\n\n  # Retrieve the available EC2 Regions\n  regions
                  = ec2_instance.regions\n\n  # Create some local variables ...\n\n
                  \ # Dynamic list to add values to the dialog dynamic list ...\n
                  \ list = {}\n\n  # Count of regions ...\n  count = 0\n\n  # Save
                  first entry and make it the default region\n  first = nil\n\n  #
                  Go through all regions returned from EC2 and add them to list\n
                  \ regions.each do |k|\n    count += 1\n    if count == 1\n      first
                  = k.name\n    end\n    $evm.log(\"info\", \"REGIONS: #{k.name} \")\n
                  \   list[k.name]  = \"#{k.name}\"\n  end\n\n  list[\"\"] = \"\"\n\n
                  \ $evm.log(\"info\", \"LIST: #{list.inspect} \")\n\n  # Add list
                  to dialog dynamic list ...\n  $evm.object[\"values\"] = list\n\n
                  \ # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n  $evm.object['selected_aws_region'] = $evm.root['dialog_aws_region']\n\n
                  \ $evm.log(\"info\", \"====== REGION: #{$evm.object['dialog_aws_region']}\")\n
                  \ $evm.log(\"info\", \"====== SELECTED REGION: #{$evm.object['selected_aws_region']}\")\n\n
                  \ $evm.log(\"info\", \"====== RETRIEVE AMAZON REGIONS =====  Automate
                  Method \")\n\n  #task = $evm.root['service_template_provision_task\"']\n
                  \ #$evm.log(\"info\", \"===========================================\")\n
                  \ #$evm.log(\"info\", \"Listing ROOT Attributes:\")\n  #$evm.root.attributes.sort.each
                  { |k, v| $evm.log(\"info\", \"\\t#{k}: #{v}\")}\n  #$evm.log(\"info\",
                  \"===========================================\")\n\n  #stp_task
                  = $evm.root[\"service_template\"]\n  #$evm.log(\"info\", \"===========================================\")\n
                  \ #$evm.log(\"info\", \"Listing task Attributes:\")\n  #stp_task.attributes.sort.each
                  { |k, v| $evm.log(\"info\", \"\\t#{k}: #{v}\")}\n  #$evm.log(\"info\",
                  \"===========================================\")\n\n  exit MIQ_OK\n\nrescue
                  => exception\n  $evm.log(\"info\", \"====== EXCEPTION IN RETRIEVE
                  AMAZON REGIONS =====\")\n  $evm.log(\"info\", exception.message)\nend\n"
                aws_elb_regions.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_elb_regions
                      display_name: Method to retrieve AWS EC2 ELB Regions
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_rds_databases.rb: ! "#\n#            Automate Method\n#\n$evm.log(\"info\",
                  \"AWS DB List - Automate Method Started\")\n#\n#            Method
                  Code Goes here\n#\n#\n# This is a static list but at least any dialog
                  that needs it can get it from here\n# AND there's only one place
                  to change it in the future.\n#\n\naws_db_list = [ \"MySQL\",\n         \"postgres\",\n
                  \        \"oracle-se1\",\n         \"oracle-se\",\n         \"oracle-ee\",\n
                  \        \"sqlserver-ee\",\n         \"sqlserver-se\",\n         \"sqlserver-ex\",\n
                  \        \"sqlserver-web\"\n       ]\n\nbegin\n   $evm.log(\"info\",
                  \"LIST: #{list.inspect} \")\n\n   # Add list to dialog dynamic list
                  ...\n   $evm.object[\"values\"] = aws_db_list\n\n   # Make the first
                  entry the default value\n   dialog_field[\"default_value\"] = first\n
                  \  exit MIQ_OK\n\nrescue => exception\n   $evm.log(\"info\", \"======
                  EXCEPTION IN RETRIEVE AMAZON VPCs =====\")\n   $evm.log(\"info\",
                  exception.message)\nend\n"
                aws_rds_databases.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_rds_databases
                      display_name: Retrieve List of Available AWS Supported Databases
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                list_instances_in_selected_elb.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: list_instances_in_selected_elb\n#\n#
                  This method is used to list all instances in a selected ELB\n#\n###################################\n#\n#
                  Method for logging\ndef log(level, message)\n  @method = 'list_instances_in_selected_elb'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\nlog(:info,
                  \"===== AWS List All Instances in the Selected ELB ==== Automate
                  Method Started\")\n#            Method Code Goes here\n#\n# Load
                  the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n  access_key_id = nil\n
                  \ secret_access_key = nil\n\n  dialog_field = $evm.object\n\n  #
                  Dynamic list to add values to the dialog dynamic list ...\n  list
                  = {}\n\n  # Count of regions ...\n  count = 0\n\n  # Save first
                  entry and make it the default region\n  first = nil\n\n  # Go through
                  all regions returned from EC2 and add them to list\n\n  # Get the
                  Amazon authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  # allowed_regions =
                  $evm.object['allowed_regions']\n  # allowed_regions = allowed_regions.split(\",\").each
                  {|t| t.strip!}\n  #selected_elb = $evm.root['dialog_aws_elb']\n
                  \ #log(:info, \"Selected Region: #{selected_region}\")\n\n  AWS.config(\n
                  \     :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Create the basic EC2 object\n  #ec2_instance
                  = AWS::EC2.new( :region => default_region )\n\n  #log(:info, \"+++++++++++++++++++
                  Dump of Allowed Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n
                  \ #allowed_regions.each do |r|\n\n  # Retrieve the ELB name and
                  the ELB region\n  elb_raw = $evm.root['dialog_all_aws_elb_regions']\n
                  \ log(:info, \"++++++++++++++++++++ ELB RAW : #{elb_raw} +++++++++++++++++++++\")\n\n
                  \ elb_array = elb_raw.split(\"|\")\n  log(:info, \"+++++++++++++++++++++
                  ELB ARRAY : #{elb_array} ++++++++++++++++++++++++\")\n\n  elb_name
                  = elb_array[0]\n  region = elb_array[1]\n\n\n  elb_instance = AWS::ELB::Client.new(:region
                  => region)\n\n  describe_elb = elb_instance.describe_load_balancers(:load_balancer_names,
                  :instances)\n  log(:info, \"+++++++++++++++++++ Describe Selected
                  Load Balancer : #{describe_elb.inspect} ++++++++++++++++++++++\")\n
                  \ #$evm.object['ae_result'] = 'ok'\n\n  # elbs = elb_instance.load_balancers\n
                  \ # log(:info, \"ELB : #{elbs.inspect}\")\n\n\n  # Create some local
                  variables ...\n\n\n  # unless elbs.nil?\n  #   elbs.each do |e|\n
                  \ #     count += 1\n  #     if count == 1\n  #       first = e.name\n
                  \ #     end\n  #     log(:info, \"ELBS: #{e.name} \")\n  #     list[\"#{e.name}|#{r}\"]
                  \ = \"#{e.name}|#{r}\"\n  #   end\n  # end\n  # #end\n  # list[\"\"]
                  = \"\"\n  #\n  # log(:info, \"LIST: #{list.inspect} \")\n  #\n  #
                  # sort_by: value / description / none\n  # $evm.object[\"sort_by\"]
                  = \"description\"\n  # # sort_order: ascending / descending\n  #
                  $evm.object[\"sort_order\"] = \"ascending\"\n  # # data_type: string
                  / integer\n  # $evm.object[\"data_type\"] = \"string\"\n  # # required:
                  true / false\n  # $evm.object[\"required\"] = \"true\"\n  # # Add
                  list to dialog dynamic list ...\n  # $evm.object[\"values\"] = list\n
                  \ #\n  #\n  # # Make the first entry the default value\n  # $evm.object[\"default_value\"]
                  = first\n  #\n  #\n  # log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ELASTIC LOAD BALANCERS =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC LOAD
                  BALANCERS =====\")\n  log(:info, exception.message)\nend\n"
                list_instances_in_selected_elb.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: list_instances_in_selected_elb
                      display_name: List Instances In Selected ELB
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
            YaleNUS-AWS-EC2-Services.class:
              __class__.yaml:
                object_type: class
                version: 1.0
                object:
                  attributes:
                    description: 
                    display_name: 
                    name: YaleNUS-AWS-EC2-Services
                    type: 
                    inherits: 
                    visibility: 
                    owner: 
                  schema:
                  - field:
                      aetype: attribute
                      name: allowed_device_list
                      display_name: 
                      datatype: string
                      priority: 1
                      owner: 
                      default_value: ! '/dev/sdf, /dev/sdg, /dev/sdh, /dev/sdi, /dev/sdj,
                        /dev/sdk, /dev/sdl, /dev/sdm, /dev/sdn, /dev/sdo, /dev/sdp '
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_ebs_list_attachments
                      display_name: 
                      datatype: string
                      priority: 2
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_list_instance_flavors
                      display_name: 
                      datatype: string
                      priority: 3
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_vpcs
                      display_name: 
                      datatype: string
                      priority: 4
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_list_all_images
                      display_name: 
                      datatype: string
                      priority: 5
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_availability_zones_allowed
                      display_name: 
                      datatype: string
                      priority: 6
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_ebs_device_list
                      display_name: 
                      datatype: string
                      priority: 7
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_ebs_list_all_available
                      display_name: 
                      datatype: string
                      priority: 8
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_ebs_list_available_button
                      display_name: 
                      datatype: string
                      priority: 9
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_ebs_all_list
                      display_name: 
                      datatype: string
                      priority: 10
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_availability_zones
                      display_name: 
                      datatype: string
                      priority: 11
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_all_regions
                      display_name: 
                      datatype: string
                      priority: 12
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_subnets
                      display_name: 
                      datatype: string
                      priority: 13
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_keypair_all_list
                      display_name: 
                      datatype: string
                      priority: 14
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_list_ebs_button
                      display_name: 
                      datatype: string
                      priority: 15
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
                  - field:
                      aetype: method
                      name: aws_ec2_regions
                      display_name: 
                      datatype: string
                      priority: 16
                      owner: 
                      default_value: 
                      substitute: true
                      message: create
                      visibility: 
                      collect: 
                      scope: 
                      description: 
                      condition: 
                      on_entry: 
                      on_exit: 
                      on_error: 
                      max_retries: 
                      max_time: 
              aws_availability_zones.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_availability_zones
                    inherits: 
                    description: 
                  fields:
                  - aws_availability_zones:
                      value: aws_availability_zones
              aws_ec2_all_regions.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_all_regions
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_all_regions:
                      value: aws_ec2_all_regions
              aws_ec2_availability_zones_allowed.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_availability_zones_allowed
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_availability_zones_allowed:
                      value: aws_ec2_availability_zones_allowed
              aws_ec2_ebs_all_list.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_ebs_all_list
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_ebs_all_list:
                      value: aws_ec2_ebs_all_list
              aws_ec2_ebs_device_list.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_ebs_device_list
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_ebs_device_list:
                      value: aws_ec2_ebs_device_list
              aws_ec2_ebs_list_all_available.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_ebs_list_all_available
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_ebs_list_all_available:
                      value: aws_ec2_ebs_list_all_available
              aws_ec2_ebs_list_attachments.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_ebs_list_attachments
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_ebs_list_attachments:
                      value: aws_ec2_ebs_list_attachments
              aws_ec2_ebs_list_available_button.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_ebs_list_available_button
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_ebs_list_available_button:
                      value: aws_ec2_ebs_list_available_button
              aws_ec2_keypair_all_list.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_keypair_all_list
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_keypair_all_list:
                      value: aws_ec2_keypair_all_list
              aws_ec2_list_all_images.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_list_all_images
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_list_all_images:
                      value: aws_ec2_list_all_images
              aws_ec2_list_all_regions.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_list_all_regions
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_regions:
                      value: aws_ec2_list_all_regions
              aws_ec2_subnets.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_subnets
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_subnets:
                      value: aws_ec2_subnets
              aws_ec2_vpcs.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_ec2_vpcs
                    inherits: 
                    description: 
                  fields:
                  - aws_ec2_vpcs:
                      value: aws_ec2_vpcs
              aws_list_instance_flavors.yaml:
                object_type: instance
                version: 1.0
                object:
                  attributes:
                    display_name: 
                    name: aws_list_instance_flavors
                    inherits: 
                    description: 
                  fields:
                  - aws_list_instance_flavors:
                      value: aws_list_instance_flavors
              __methods__:
                aws_availability_zones.rb: ! "#\n#            Automate Method\n#\n$evm.log(\"info\",
                  \"Automate Method Started\")\n#\n#            Method Code Goes here\n#\n#
                  Load the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n  dialog_field
                  = $evm.object\n  access_key_id = nil\n  secret_access_key = nil\n\n
                  \ # Get the Amazon authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  \n  selected_region
                  = $evm.root['dialog_aws_region']\n  selected_zone = $evm.root['dialog_availability_zone']\n
                  \ $evm.log(\"info\", \"Selected Region: #{selected_region}\")\n\n
                  \ if  selected_region == nil\n    default_region = $evm.object['default_aws_region']\n
                  \ else\n    default_region = selected_region\n  end\n\n\n  if  selected_zone
                  == nil\n    selected_zone = $evm.object['default_availability_zone']\n
                  \ end\n\n\n  AWS.config(\n      :access_key_id => access_key_id,\n
                  \     :secret_access_key => secret_access_key\n  )\n\n  # Create
                  the basic EC2 object\n  ec2_instance = AWS::EC2.new( :region =>
                  default_region)\n\n  # Retrieve the available EC2 Regions\n  zones
                  = ec2_instance.availability_zones\n\n  # Create some local variables
                  ...\n\n  # Dynamic list to add values to the dialog dynamic list
                  ...\n  list = {}\n\n  # Count of regions ...\n  count = 0\n\n  #
                  Save first entry and make it the default region\n  first = nil\n\n
                  \ # Go through all regions returned from EC2 and add them to list\n
                  \ zones.each do |k|\n    count += 1\n    if count == 1\n      first
                  = k.name\n    end\n    $evm.log(\"info\", \"ZONES: #{k.name} \")\n
                  \   list[k.name]  = \"#{k.name}\"\n  end\n\n  $evm.log(\"info\",
                  \"LIST: #{list.inspect} \")\n\n  list[\"\"]=\"\"\n  \n  # Add list
                  to dialog dynamic list ...\n  $evm.object[\"values\"] = list\n  \n
                  \ # Make the first entry the default value\n  #dialog_field[\"default_value\"]
                  = first\n  $evm.object[\"default_value\"] = first\n  $evm.object['selected_availability_zone']
                  = selected_zone\n\n  $evm.log(\"info\", \"Dialog Region: #{$evm.root['dialog_aws_region']}\")\n
                  \ $evm.log(\"info\", \"Selected Region: #{$evm.object['selected_aws_region']}\")\n
                  \ $evm.log(\"info\", \"Dialog Zone: #{$evm.root['dialog_availability_zone']}\")\n
                  \ $evm.log(\"info\", \"Selected Zone: #{$evm.object['selected_availability_zone']}\")\n\n
                  \ $evm.log(\"info\", \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ $evm.log(\"info\", \"====== RETRIEVE AMAZON AVAILABILITY ZONES
                  =====  Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ $evm.log(\"info\", \"====== EXCEPTION IN RETRIEVE AMAZON AVAILABILITY
                  ZONES =====\")\n  $evm.log(\"info\", exception.message)\nend\n"
                aws_availability_zones.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_availability_zones
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_all_regions.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_allowed_regions\n#\n# This method
                  is used to search for all allowed AWS EC2 Regions\n#\n###################################\n#\n#\n#
                  Method for logging\ndef log(level, message)\n  @method = 'aws_ec2_all_regions'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\n#\nlog(:info,
                  \"====== RETRIEVE AMAZON ALL REGIONS ===== Automate Method Started\")\n#\n#
                  \           Method Code Goes here\n#\n\n# Load the aws-sdk\nrequire
                  \"aws-sdk\"\n\naccess_key_id = nil\nsecret_access_key = nil\n\n\n#
                  @!method available_regions\n# List of available regions in EC2\n#\n#
                  @return [AWS::RegionCollection] .\n#\n# def available_regions\n#
                  \  return ec2_instance.regions\n# end\n\n\nbegin\n  # Get the Amazon
                  authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n  \n\n  # CFME Version 3.2 the above API changes!!!\n  default_region
                  = ems.provider_region\n  \n  \n  # Create the basic EC2 object\n
                  \ ec2_instance = AWS::EC2.new(:region=>default_region)\n  \n\t#
                  Retrieve the available EC2 Regions\n  regions = ec2_instance.regions\n\n#
                  Create some local variables ...\n\n# Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n# Count of regions
                  ...\n  count = 0\n\n# Save first entry and make it the default region\n
                  \ first = nil\n\n  log(:info, \"Regions: #{regions.inspect}\")\n
                  \ \n# Go through all regions returned from EC2 and add them to list\n
                  \ regions.each do |r|\n    count += 1\n    if count == 1\n      first
                  = r.name\n    end\n    log(:info, \"REGIONS: #{r.name} \")\n    list[r.name]
                  \ = \"#{r.name}\"\n  end\n\n  list[\"\"] = \"\"\n\n  log(:info,
                  \"LIST: #{list.inspect} \")\n\n# Add list to dialog dynamic list
                  ...\n  $evm.object[\"values\"] = list\n\n  # Create the basic EC2
                  object\n  #ec2_instance = AWS::EC2.new(:region => region)\n\n# Make
                  the first entry the default value\n#$evm.object[\"default_value\"]
                  = first\n\n#$evm.object['selected_aws_region'] = $evm.root['dialog_aws_region']\n\n#log(:info,
                  \"====== REGION: #{$evm.object['dialog_aws_region']}\")\n#log(:info,
                  \"====== SELECTED REGION: #{$evm.object['selected_aws_region']}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ALL REGIONS =====  Automate
                  Method \")\n\n#task = $evm.root['service_template_provision_task\"']\n#log(:info,
                  \"===========================================\")\n#log(:info, \"Listing
                  ROOT Attributes:\")\n#$evm.root.attributes.sort.each { |k, v| log(:info,
                  \"\\t#{k}: #{v}\")}\n#log(:info, \"===========================================\")\n\n#stp_task
                  = $evm.root[\"service_template\"]\n#log(:info, \"===========================================\")\n#log(:info,
                  \"Listing task Attributes:\")\n#stp_task.attributes.sort.each {
                  |k, v| log(:info, \"\\t#{k}: #{v}\")}\n#log(:info, \"===========================================\")\n\n
                  \ exit MIQ_OK\n\nrescue => exception\n  log(:info, \"====== EXCEPTION
                  IN RETRIEVE AMAZON REGIONS =====\")\n  log(:info, exception.message)\nend\n\n\n\n"
                aws_ec2_all_regions.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_all_regions
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_availability_zones_allowed.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_availability_zones_allowed\n#\n#
                  This method is used to list all availability zones in an allowed
                  region\n#\n###################################\n# Method for logging\ndef
                  log(level, message)\n  @method = 'aws_ec2_availability_zones_allowed'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\n#\nlog(:info,
                  \"Automate Method Started\")\n#\n#            Method Code Goes here\n#\n#
                  Load the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n  dialog_field
                  = $evm.object\n  access_key_id = nil\n  secret_access_key = nil\n\n
                  \ # Get the Amazon authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  selected_region = $evm.object['dialog_aws_allowed_regions']\n
                  \ selected_zone = $evm.object['dialog_aws_availability_zones_allowed']\n
                  \ log(:info, \"+++++++++++ Selected Region: #{selected_region} ++++++++++++++\")\n
                  \ log(:info, \"+++++++++++ Selected AZ : #{selected_zone} +++++++++++++++++++\")\n\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Create the basic EC2 object\n  ec2_instance
                  = AWS::EC2.new( :region => selected_region)\n\n  # Retrieve the
                  available EC2 Regions\n  zones = ec2_instance.availability_zones\n\n
                  \ # Create some local variables ...\n\n  # Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all regions returned from
                  EC2 and add them to list\n  zones.each do |k|\n    count += 1\n
                  \   if count == 1\n      first = k.name\n    end\n    log(:info,
                  \"ZONES: #{k.name} \")\n    list[k.name]  = \"#{k.name}\"\n  end\n\n
                  \ log(:info, \"LIST: #{list.inspect} \")\n\n  # Add list to dialog
                  dynamic list ...\n  $evm.object[\"values\"] = list\n\n  # Make the
                  first entry the default value\n  #dialog_field[\"default_value\"]
                  = first\n  $evm.object[\"default_value\"] = first\n  $evm.object['selected_availability_zone']
                  = selected_zone\n\n  log(:info, \"+++++++++++++ Selected Region:
                  #{selected_region} ++++++++++++++++\")\n  log(:info, \"+++++++++++++
                  Selected Zone: #{selected_zone} ++++++++++++++++++++\")\n\n\n  log(:info,
                  \"====== RETRIEVE AMAZON AVAILABILITY ZONES =====  Automate Method
                  Ended\")\n  exit MIQ_OK\n\nrescue => exception\n  log(:info, \"======
                  EXCEPTION IN RETRIEVE AMAZON AVAILABILITY ZONES =====\")\n  log(:info,
                  exception.message)\nend\n"
                aws_ec2_availability_zones_allowed.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_availability_zones_allowed
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_ebs_all_list.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_ebs_all_list\n#\n# This method
                  is used to search for all EBSs that are owned by a user in all allowed
                  regions\n#\n###################################\n#\n# Method for
                  logging\ndef log(level, message)\n  @method = 'aws_ec2_ebs_all_list'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\nlog(:info,
                  \"===== AWS List All EBSs in All Available Regions ==== Automate
                  Method Started\")\n#            Method Code Goes here\n#\n# Load
                  the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n\n  #####RBAC sample,
                  setting the filter mode\n\n  this_user = $evm.root['user'].userid.downcase\n
                  \ log(:info, \"this_user : #{this_user.inspect}\")\n  #AWS doesn't
                  like underscores, dashes or spaces so strip\n  this_user_group =
                  $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n  log(:info,
                  \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  access_key_id = nil\n  secret_access_key =
                  nil\n\n  dialog_field = $evm.object\n\n  # Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all regions returned from
                  EC2 and add them to list\n\n  # Get the Amazon authentication credentials...\n
                  \ ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n    # Get
                  the values from the schema ...\n    access_key_id ||= $evm.object['access_key_id']\n
                  \   secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  default_region = ems.provider_region\n
                  \ \n  #allowed_regions = $evm.object['allowed_regions']\n  #allowed_regions
                  = allowed_regions.split(\",\").each {|t| t.strip!}\n\n  #log(:info,
                  \"Selected Region: #{selected_region}\")\n\n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  # Create the basic EC2 object\n  ec2_instance = AWS::EC2.new(
                  :region => default_region )\n\n  #log(:info, \"+++++++++++++++++++
                  Dump of Allowed Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n
                  \ #allowed_regions.each do |r|\n  #  ebs_instance = AWS::EC2.new(
                  :region => r )\n\n  #  log(:info, \"++++++++++++ Now Processing
                  Region : #{r}++++++++++++++++++++\")\n  #  log(:info, \"++++++++++++
                  User ID : #{this_user}+++++++++++++++++++++++\")\n  #  log(:info,
                  \"++++++++++++ Group ID : #{this_user_group}+++++++++++++++++\")\n\n\n
                  \ # This code will be for Phase 2\n    #if filter_user =='user'\n
                  \   #  ebs = ec2_instance.volumes.with_tag(\"userid\", \"#{this_user}\")\n
                  \   #elsif filter_user =='group'\n    #  ebs = ec2_instance.volumes.with_tag(\"usergroup\",
                  \"#{this_user_group}\")\n    #else #should only fall through for
                  Admin - group EvmGroup-super_administrator\n    #  ebs = ec2_instance.volumes\n
                  \   #end\n\n    ebs = ec2_instance.volumes\n  \n    log(:info, \"EBS
                  : #{ebs.inspect}\")\n\n\n    # Create some local variables ...\n\n\n
                  \   unless ebs.nil?\n      ebs.each do |e|\n        log(:info, \"++++++++++
                  EBS : #{e.inspect} ++++++++++++++++++++++\")\n        name = e.tags.values_at(\"Name\")\n
                  \       log(:info, \"+++++++++++++ Name : #{name} +++++++++++++++++++\")\n
                  \       count += 1\n        if count == 1\n          first = e.id\n
                  \       end\n        log(:info, \"EBS: #{e.id} \")\n        list[\"#{e.id}|#{default_region}|#{name}\"]
                  \ = \"#{e.id}|#{default_region}|#{e.availability_zone}\"\n      end\n
                  \   end\n  #end\n  list[\"\"] = \"\"\n\n  log(:info, \"LIST: #{list.inspect}
                  \")\n\n  # sort_by: value / description / none\n  $evm.object[\"sort_by\"]
                  = \"description\"\n  # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ELASTIC BLOCK STORAGE =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC BLOCK
                  STORAGE =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_ebs_all_list.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_ebs_all_list
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_ebs_device_list.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: ebs_device_list\n#\n# This method is
                  used to attach an EBS using the allowed device list\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'ebs_device_list'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\ndef dumpRoot\n
                  \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                  \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                  - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                  \"\")\nend\n\n# dump root object attributes\ndumpRoot\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\ndialog_field
                  = $evm.object\n\n# Get provisioning object\n\nbegin\n\n  vm = $evm.root['vm']\n\n
                  \ ems = vm.ext_management_system\n\n  region = ems.provider_region\n
                  \ \n  # log(:info, \"EMS Object : #{ems.inspect}\")\n    \n  # Get
                  the Amazon authentication credentials...\n  access_key_id ||= ems.authentication_userid\n
                  \ secret_access_key = ems.authentication_password\n\n  AWS.config(\n
                  \     :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Dynamic list to add values to the
                  dialog dynamic list ...\n  list = {}\n  in_use_devices = []\n  allowed_ebs_devices
                  = []\n\n  # Count of regions ...\n  count = 0\n\n  # Save first
                  entry and make it the default region\n  first = nil\n\n  # Start
                  Here\n\n  allowed_ebs_devices = $evm.object['allowed_device_list']\n
                  \ allowed_ebs_devices = allowed_ebs_devices.split(\",\").each {|t|
                  t.strip!}\n\n\n  # Create the basic EC2 object\n\n  ec2 = AWS::EC2.new(
                  :region => region )\n\n  # Set the instance from current instance\n
                  \ i = ec2.instances[\"#{vm.uid_ems}\"]\n  \n  log(:info,\"INSTANCE:
                  #{i.inspect} UID: #{vm.uid_ems}\")\n\n  # Find all instance block
                  devices and push them to an array taking out any numbers\n  i.block_devices.each
                  do |b|\n    in_use_devices.push(b[:device_name].gsub(/[0-9]/,''))\n
                  \ end\n\n  # Remove any in use devices from the list of allowed
                  devices and set to a new array\n  allowed_ebs_devices = allowed_ebs_devices
                  - in_use_devices\n\n  # For each available device from allowed devices
                  put into the list\n  allowed_ebs_devices.each do |d|\n    count
                  += 1\n    if count == 1\n      first = \"#{d}\"\n    end\n    list[\"#{d}\"]
                  \ = d\n  end\n\n  list[\"\"] = \"\"\n  \n  log(:info, \"LIST: #{list.inspect}
                  \")\n\n  # sort_by: value / description / none\n  $evm.object[\"sort_by\"]
                  = \"description\"\n  # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  ############\n  # Exit method\n  #\n  log(:info,
                  \"CloudForms Automate Method Ended\")\n  exit MIQ_OK\nend\n"
                aws_ec2_ebs_device_list.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_ebs_device_list
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_ebs_list_all_available.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_ebs_all_list\n#\n# This method
                  is used to search for all EBSs that are owned by a user in all allowed
                  regions\n#\n###################################\n#\n# Method for
                  logging\ndef log(level, message)\n  @method = 'aws_ec2_ebs_all_list'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\ndef dumpRoot\n
                  \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                  \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                  - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                  \"\")\nend\n\n# dump root object attributes\ndumpRoot\n#\nlog(:info,
                  \"===== AWS List All EBSs in All Available Regions ==== Automate
                  Method Started\")\n#            Method Code Goes here\n#\n# Load
                  the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n\n  #####RBAC sample,
                  setting the filter mode\n\n  this_user = $evm.root['user'].userid.downcase\n
                  \ log(:info, \"this_user : #{this_user.inspect}\")\n  #AWS doesn't
                  like underscores, dashes or spaces so strip\n  this_user_group =
                  $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n  log(:info,
                  \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  access_key_id = nil\n  secret_access_key =
                  nil\n\n  dialog_field = $evm.object\n\n  # Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all regions returned from
                  EC2 and add them to list\n\n  # Get the Amazon authentication credentials...\n
                  \ ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n    # Get
                  the values from the schema ...\n    access_key_id ||= $evm.object['access_key_id']\n
                  \   secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n\n  \n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  # Create the basic EC2 object\n  ec2_instance = AWS::EC2.new(
                  :region => \"#{ems.provider_region}\" )\n\n  #allowed_regions =
                  $evm.object['allowed_regions']\n  #allowed_regions = allowed_regions.split(\",\").each
                  {|t| t.strip!}\n\n  allowed_regions = ems.provider_region\n  #log(:info,
                  \"Selected Region: #{selected_region}\")\n\n  # log(:info, \"+++++++++++++++++++
                  Dump of Allowed Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n
                  \ allowed_regions.each do |r|\n    ebs_instance = AWS::EC2.new(
                  :region => r )\n\n    # log(:info, \"++++++++++++ Now Processing
                  Region : #{r}++++++++++++++++++++\")\n    # log(:info, \"++++++++++++
                  User ID : #{this_user}+++++++++++++++++++++++\")\n    # log(:info,
                  \"++++++++++++ Group ID : #{this_user_group}+++++++++++++++++\")\n\n\n
                  \   if filter_user =='user'\n      ebs = ebs_instance.volumes.with_tag(\"userid\",
                  \"#{this_user}\")\n    elsif filter_user =='group'\n      ebs =
                  ebs_instance.volumes.with_tag(\"usergroup\", \"#{this_user_group}\")\n
                  \   else #should only fall through for Admin - group EvmGroup-super_administrator\n
                  \     ebs = ebs_instance.volumes\n    end\n\n    log(:info, \"EBS
                  : #{ebs.inspect}\")\n\n\n    # Create some local variables ...\n\n\n
                  \   unless ebs.nil?\n      ebs.each do |e|\n        if e.status
                  == :available \n          log(:info, \"++++++++++ EBS : #{e.inspect}
                  ++++++++++++++++++++++\")\n          name = e.tags.values_at(\"Name\")\n
                  \         log(:info, \"+++++++++++++ Name : #{name} +++++++++++++++++++\")\n
                  \         count += 1\n          if count == 1\n            first
                  = e.id\n          end\n          log(:info, \"EBS: #{e.id} \")\n
                  \         list[\"#{e.id}|#{r}|#{name}\"]  = \"#{e.id}|#{r}|#{e.availability_zone}\"\n
                  \       else\n          log(:info, \"+++++++++++ EBS #{e} is in
                  use +++++++++++++++++++++++++++++++++\")\n        end\n      end\n
                  \   end\n  end\n  list[\"\"] = \"\"\n\n  log(:info, \"LIST: #{list.inspect}
                  \")\n\n  # sort_by: value / description / none\n  $evm.object[\"sort_by\"]
                  = \"description\"\n  # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ELASTIC BLOCK STORAGE =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC BLOCK
                  STORAGE =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_ebs_list_all_available.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_ebs_list_all_available
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_ebs_list_attachments.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_ebs_list_attachments\n#\n# This
                  method is used to list all EBS Volume attachments for an instance\n#\n###################################\n#
                  Method for logging\ndef log(level, message)\n  @method = 'aws_ec2_ebs_list_attachments'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n\nlog(:info,
                  \"CloudForms Automate Method Started\")\n\nrequire 'aws-sdk'\n\n#
                  Get provisioning object\n\nbegin\n\n  vm = $evm.root['vm']\n\n  ems
                  = vm.ext_management_system\n\n  region = ems.provider_region\n\n
                  \ # Get the Amazon authentication credentials...\n  access_key_id
                  ||= ems.authentication_userid\n  secret_access_key = ems.authentication_password\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  # Start Here\n  #\n  log(:info, \"Accessing
                  region: #{region}\")\n  \n  ec2 = AWS::EC2.new( :region => region
                  )\n\n\n  # Create some local variables ...\n\n  # Dynamic list to
                  add values to the dialog dynamic list ...\n  list = {}\n  #\n  #
                  Save first entry and make it the default region\n  first = nil\n\n
                  \ i = ec2.instances[vm.uid_ems]\n  \n  log(:info, \"Found Instance:
                  #{i}\")\n  \n  block_devices = i.block_devices\n  \n  log(:info,
                  \"Block Devices: #{block_devices}\")\n  \n  i.block_devices.each
                  do |b|\n    #ap b.inspect\n    #ap b[:ebs][:volume_id]\n    #ap
                  b[:device_name].gsub(/[0-9]/,'')\n    device_list = [\"/dev/sda\",
                  \"/dev/sdb\", \"/dev/sdc\", \"/dev/sdd\", \"/dev/sde\"]\n    #ap
                  device_list.any? { |s| s.include?(b[:device_name].gsub(/[0-9]/,''))
                  }\n    unless device_list.any? { |s| s.include?(b[:device_name].gsub(/[0-9]/,''))
                  }\n      # Left is the display string and the right is what is passed
                  back to cfme\n      volume = ec2.volumes.each do |v|\n        if
                  v.id != b[:ebs][:volume_id]\n          # list[\"#{b[:ebs][:volume_id]}|#{b[:device_name]}\"]
                  \ = b[:ebs][:volume_id]\n        else\n          tags_hash = v.tags.to_h\n
                  \         name = tags_hash[\"Name\"]\n          list[\"#{b[:ebs][:volume_id]}|#{b[:device_name]}|#{name}\"]
                  \ = b[:ebs][:volume_id]\n        end\n      end\n    end\n  end\n\n
                  \ # i.block_devices.each do |b|\n  #   #ap b[:ebs][:volume_id]\n
                  \ #   #ap b[:device_name].gsub(/[0-9]/,'')\n  #   device_list =
                  [\"/dev/sda\", \"/dev/sdb\", \"/dev/sdc\", \"/dev/sdd\", \"/dev/sde\"]\n
                  \ #   #ap device_list.any? { |s| s.include?(b[:device_name].gsub(/[0-9]/,''))
                  }\n  #   unless device_list.any? { |s| s.include?(b[:device_name].gsub(/[0-9]/,''))
                  }\n  #     # Left is the display string and the right is what is
                  passed back to cfme\n  #     list[\"#{b[:ebs][:volume_id]}|#{b[:device_name]}\"]
                  \ = b[:ebs][:volume_id]\n  #   end\n  # end\n\n  list[\"\"] = \"\"\n\n
                  \ log(:info, \"LIST: #{list.inspect} \")\n\n  # sort_by: value /
                  description / none\n  $evm.object[\"sort_by\"] = \"description\"\n
                  \ # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n  # # Count of regions ...\n  # count = 0\n  #\n  # # Save
                  first entry and make it the default region\n  # first = nil\n\n
                  \ # Go through all regions returned from EC2 and add them to list\n\n
                  \ # ec2.volumes.each do |v|\n  #   v.attachments.each do |a|\n  #
                  \    instance_id = a.instance.id\n  #     if instance_id == vm_id\n
                  \ #       log(:info, \"++++++ VM Name Matches : #{name} +++++++++\")\n
                  \ #     end\n  #   end\n  #   count += 1\n  #   if count == 1\n
                  \ #     first = v.id\n  #   end\n  #   log(:info, \"EBS: #{v.id}
                  \")\n  #   list[v.id]  = \"#{v.id}\"\n  # end\n  #\n  # list[\"\"]
                  = \"\"\n  #\n  # log(:info, \"LIST: #{list.inspect} \")\n  #\n  #
                  # sort_by: value / description / none\n  # $evm.object[\"sort_by\"]
                  = \"description\"\n  # # sort_order: ascending / descending\n  #
                  $evm.object[\"sort_order\"] = \"ascending\"\n  # # data_type: string
                  / integer\n  # $evm.object[\"data_type\"] = \"string\"\n  # # required:
                  true / false\n  # $evm.object[\"required\"] = \"true\"\n  # # Add
                  list to dialog dynamic list ...\n  # $evm.object[\"values\"] = list\n
                  \ #\n  #\n  # # Make the first entry the default value\n  # $evm.object[\"default_value\"]
                  = first\n\n  # ec2.volumes.each do |v|\n  #   v.id\n\n\n\n  ############\n
                  \ # Exit method\n  #\n  log(:info, \"CloudForms Automate Method
                  Ended\")\n  exit MIQ_OK\nend\n"
                aws_ec2_ebs_list_attachments.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_ebs_list_attachments
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_ebs_list_available_button.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_ebs_all_list\n#\n# This method
                  is used to search for all EBSs that are owned by a user in all allowed
                  regions\n#\n###################################\n#\n# Method for
                  logging\ndef log(level, message)\n  @method = 'aws_ec2_ebs_all_list'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\ndef dumpRoot\n
                  \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                  \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                  - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                  \"\")\nend\n\n# dump root object attributes\ndumpRoot\n#\nlog(:info,
                  \"===== AWS List All EBSs in All Available Regions ==== Automate
                  Method Started\")\n#            Method Code Goes here\n#\n\n# Load
                  the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n\n  \n  def filter_with_group_tag
                  ( volumes, tag_value )\n    filtered_volumes = []\n    \n    # First
                  filter tags by the 'usergroup' tag which is what we tag the volume
                  with in Cloudforms\n  \tmyvolumes=volumes.tagged('usergroup')\n
                  \   # Now we go through each tag ... this was supposed to be provided
                  in AWS EC2 Version 1 but it's not there anymore.\n    myvolumes.each
                  do | v |\n        tag_hash = v.tags.to_h\n      if tag_hash['usergroup']
                  == tag_value\n        filtered_volumes += [tag_hash]\n        log(:info,
                  \"Found VOLUME [#{tag_hash['Name']}] for USERGROUP [#{tag_hash['usergroup']}]\")
                  \n      end \n    end\n    return filtered_volumes\n  end\n  \n\n
                  \ dialog_field = $evm.object\n  vm = $evm.root['vm']\n  ems = vm.ext_management_system\n\n
                  \ region = ems.provider_region\n\n  #####RBAC sample, setting the
                  filter mode\n\n  this_user = $evm.root['user'].userid.downcase\n
                  \ log(:info, \"this_user : #{this_user.inspect}\")\n  #AWS doesn't
                  like underscores, dashes or spaces so strip\n  this_user_group =
                  $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n  log(:info,
                  \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  #if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n  #  filter_user = 'none'\n  #elsif
                  this_user_group.nil?\n  #  filter_user = 'user'\n  #elsif this_user_group
                  == 'yalenususerselfservice'  #remember to tag all lower case, naming
                  stripped with the REGEX\n  #  filter_user = 'group'\n  #else\n  #
                  \ filter_user = 'group'\n  #end\n\n  # Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all regions returned from
                  EC2 and add them to list\n\n  # Get the Amazon authentication credentials...\n
                  \ access_key_id ||= ems.authentication_userid\n  secret_access_key
                  = ems.authentication_password\n\n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  default_region = ems.provider_region\n  \n  # Create the
                  basic EC2 object\n  ec2_instance = AWS::EC2.new( :region => default_region
                  )\n\n  # We are going to get the instance availability_zone for
                  the VM.\n  # We will use the availability_zone to filter the EBS
                  list.\n  availability_zone=\"\"\n \n  unless vm.nil?\n    availability_zone
                  = ec2_instance.instances[\"#{vm.uid_ems}\"].availability_zone\n
                  \ end\n  \n  # log(:info, \"+++++++++++++++++++ Dump of Allowed
                  Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n\n    ebs_instance
                  = AWS::EC2.new( :region => region )\n\n    # log(:info, \"++++++++++++
                  Now Processing Region : #{r}++++++++++++++++++++\")\n    # log(:info,
                  \"++++++++++++ User ID : #{this_user}+++++++++++++++++++++++\")\n
                  \   # log(:info, \"++++++++++++ Group ID : #{this_user_group}+++++++++++++++++\")\n\n\n
                  \   #\n    # Phase 1 we are overriding this functionality.  For
                  Phase 2 we will be able to filter by user or group.\n    if filter_user
                  =='user'\n      ebs = ebs_instance.volumes.with_tag(\"userid\",
                  \"#{this_user}\")\n    elsif filter_user =='group'\n      ebs =
                  filter_with_group_tag(ebs_instance.volumes, \"#{this_user_group}\")\n
                  \   else #should only fall through for Admin - group EvmGroup-super_administrator\n
                  \     ebs = ebs_instance.volumes\n    end\n\n    log(:info, \"EBS
                  : #{ebs.inspect}\")\n\n\n    # Create some local variables ...\n\n
                  \   # We only show the user available EBS volumes for the Availability
                  Zone that the instance is in.\n\n    unless ebs.nil?\n      ebs.each
                  do |e|\n        if e.status == :available && e.availability_zone_name
                  == \"#{availability_zone}\"\n          log(:info, \"++++++++++ EBS
                  : #{e.inspect} ++++++++++++++++++++++\")\n          tags_hash =
                  e.tags.to_h\n          name = tags_hash[\"Name\"]\n          log(:info,
                  \"+++++++++++++ Name : #{name} +++++++++++++++++++\")\n          count
                  += 1\n          if count == 1\n            first = e.id\n          end\n
                  \         log(:info, \"EBS: #{e.id} \")\n          list[\"#{e.id}|#{region}|#{name}\"]
                  \ = \"#{e.id}|#{region}|#{e.availability_zone}|#{name}\"\n        else\n
                  \         log(:info, \"+++++++++++ EBS #{e} is in use +++++++++++++++++++++++++++++++++\")\n
                  \       end\n      end\n    end\n\n  list[\"\"] = \"\"\n\n  log(:info,
                  \"LIST: #{list.inspect} \")\n\n  # sort_by: value / description
                  / none\n  $evm.object[\"sort_by\"] = \"description\"\n  # sort_order:
                  ascending / descending\n  $evm.object[\"sort_order\"] = \"ascending\"\n
                  \ # data_type: string / integer\n  $evm.object[\"data_type\"] =
                  \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ELASTIC BLOCK STORAGE =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== EXCEPTION IN RETRIEVE AMAZON ELASTIC BLOCK
                  STORAGE =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_ebs_list_available_button.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_ebs_list_available_button
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_keypair_all_list.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_keypair_all_list\n#\n# This
                  method is used to search for all Keypairs that are owned by a user
                  in all allowed regions\n#\n###################################\n#\n#
                  Method for logging\ndef log(level, message)\n  @method = 'aws_ec2_keypair_all_list'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\nlog(:info,
                  \"===== AWS List All Keypairs in All Available Regions ==== Automate
                  Method Started\")\n#            Method Code Goes here\n#\n# Load
                  the aws-sdk\nrequire \"aws-sdk\"\n\n\nbegin\n  access_key_id = nil\n
                  \ secret_access_key = nil\n\n  dialog_field = $evm.object\n\n  #
                  Dynamic list to add values to the dialog dynamic list ...\n  list
                  = {}\n\n  # Count of regions ...\n  count = 0\n\n  # Save first
                  entry and make it the default region\n  first = nil\n\n  #####RBAC
                  sample, setting the filter mode\n\n  this_user = $evm.root['user'].userid.downcase\n
                  \ log(:info, \"this_user : #{this_user.inspect}\")\n  #AWS doesn't
                  like underscores, dashes or spaces so strip\n  this_user_group =
                  $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n  log(:info,
                  \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  # Get the Amazon authentication credentials...\n
                  \ ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n    # Get
                  the values from the schema ...\n    access_key_id ||= $evm.object['access_key_id']\n
                  \   secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  \n  r = allowed_regions
                  = ems.provider_region\n  \n  #allowed_regions = $evm.object['allowed_regions']\n
                  \ #allowed_regions = allowed_regions.split(\",\").each {|t| t.strip!}\n\n
                  \ AWS.config(\n      :access_key_id => access_key_id,\n      :secret_access_key
                  => secret_access_key\n  )\n\n  log(:info, \"+++++++++++++++++++
                  Dump of Allowed Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n
                  \ # Go through all regions\n  #allowed_regions.each do |r|\n    log(:info,
                  \"<<<<<<<<<================>>>>>>>>> Processing region #{r}  <<<<<<<<<<<<<=================>>>>>>>>>>>>>\")\n\n
                  \   log(:info, '   ================ Creating EC2 object =================')\n
                  \   ec2 = AWS::EC2.new(:region => r)\n\n    ec2.key_pairs.each do
                  |k|\n      log(:info,\"#{k.inspect}\")\n\n      if filter_user =='user'\n
                  \       if k.name.downcase.include? this_user\n          $evm.log(\"info\",
                  \"Keypair (added) : #{k.name} \")\n          list[k.name]  = \"#{k.name}\"\n
                  \       else\n          $evm.log(\"info\", \"Keypair (skipped, not
                  user): #{k.name} \")\n        end\n      elsif filter_user =='group'\n
                  \       if k.name.downcase.include? this_user_group\n          $evm.log(\"info\",
                  \"Keypair (added) : #{k.name} \")\n          list[k.name]  = \"#{k.name}\"\n
                  \       else\n          $evm.log(\"info\", \"Keypair (skipped, not
                  group): #{k.name} \")\n        end\n      else #should only fall
                  through for Admin - group EvmGroup-super_administrator\n        $evm.log(\"info\",
                  \"Keypair (added) : #{k.name} \")\n        list[k.name]  = \"#{k.name}\"\n
                  \     end\n\n    end\n  #end\n\n  list[\"\"] = \"\"\n\n  log(:info,
                  \"LIST: #{list.inspect} \")\n\n  # sort_by: value / description
                  / none\n  $evm.object[\"sort_by\"] = \"description\"\n  # sort_order:
                  ascending / descending\n  $evm.object[\"sort_order\"] = \"ascending\"\n
                  \ # data_type: string / integer\n  $evm.object[\"data_type\"] =
                  \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n\n  #log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== AWS List All Keypairs in All Available Regions
                  =====  Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ log(:info, \"====== AWS List All Keypairs in All Available Regions
                  =====\")\n  log(:info, exception.message)\nend\n"
                aws_ec2_keypair_all_list.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_keypair_all_list
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_list_all_images.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_list_all_images\n#\n# This method
                  is used to search for all AMIs that are owned by a user \n#\n###################################\n#\n#
                  Method for logging\ndef log(level, message)\n  @method = 'aws_ec2_list_all_images'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\ndef dumpRoot\n
                  \ $evm.log(\"info\", \"#{@method} - Root:<$evm.root> Begin Attributes\")\n
                  \ $evm.root.attributes.sort.each { |k, v| $evm.log(\"info\", \"#{@method}
                  - Root:<$evm.root> Attributes - #{k}: #{v}\")}\n  $evm.log(\"info\",
                  \"#{@method} - Root:<$evm.root> End Attributes\")\n  $evm.log(\"info\",
                  \"\")\nend\n\n# dump root object attributes\ndumpRoot\n#\nlog(:info,
                  \"===== AWS List All AMIs in AWS Region ==== Automate Method Started\")\n#
                  \           Method Code Goes here\n#\n# Load the aws-sdk\nrequire
                  \"aws-sdk\"\n\n\nbegin\n\n  #####RBAC sample, setting the filter
                  mode\n\n  this_user = $evm.root['user'].userid.downcase\n  log(:info,
                  \"this_user : #{this_user.inspect}\")\n  #AWS doesn't like underscores,
                  dashes or spaces so strip\n  this_user_group = $evm.root['user'].ldap_group.downcase.gsub(/[\\W+]|[_]/,'')\n
                  \ log(:info, \"this_user_group (cleaned of underscores): #{this_user_group.inspect}\")\n\n\n
                  \ filter_user = 'none' # values user, group, none\n\n  if this_user_group
                  \ == 'evmgroupsuperadministrator' #remember that the naming removes
                  any underscores, always lower\n    filter_user = 'none'\n  elsif
                  this_user_group.nil?\n    filter_user = 'user'\n  elsif this_user_group
                  == 'cloudforms'  #remember to tag all lower case, naming stripped
                  with the REGEX\n    filter_user = 'user'\n  else\n    filter_user
                  = 'group'\n  end\n\n  access_key_id = nil\n  secret_access_key =
                  nil\n\n  dialog_field = $evm.object\n\n  # Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all regions returned from
                  EC2 and add them to list\n\n  # Get the Amazon authentication credentials...\n
                  \ ems = $evm.vmdb(:ems_amazon).first\n  \n  if ems.nil?\n    # Get
                  the values from the schema ...\n    access_key_id ||= $evm.object['access_key_id']\n
                  \   secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  #allowed_regions = $evm.object['allowed_regions']\n
                  \ #allowed_regions = allowed_regions.split(\",\").each {|t| t.strip!}\n\n
                  \ default_region = $evm.object['dialog_aws_region']\n  availability_zone
                  = $evm.root['dialog_aws_availability_zone']\n  \n  #log(:info, \"Selected
                  Region: #{selected_region}\")\n\n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  # Create the basic EC2 object\n  ec2_instance = AWS::EC2.new(
                  :region => default_region, :availability_zone => availability_zone
                  )\n\n  #regions = ec2_instance.regions\n  \n  # log(:info, \"+++++++++++++++++++
                  Dump of Allowed Regions : #{allowed_regions} +++++++++++++++++++++++\")\n\n
                  \ #allowed_regions.each do |r|\n  #regions.each do |r|\n    #ebs_instance
                  = AWS::EC2.new( :region => r.name )\n\n    # log(:info, \"++++++++++++
                  Now Processing Region : #{r}++++++++++++++++++++\")\n    # log(:info,
                  \"++++++++++++ User ID : #{this_user}+++++++++++++++++++++++\")\n
                  \   # log(:info, \"++++++++++++ Group ID : #{this_user_group}+++++++++++++++++\")\n\n
                  \   # Get ALL AMIs for the region\n  all_images = ec2_instance.images\n\n
                  \ filter_user = 'self'\n  \n  if filter_user =='user'\n    images
                  = all_images.with_owner(\"#{this_user}\")\n  elsif filter_user =='group'\n
                  \   images = all_images.tagged(\"#{this_user_group}\")\n  else #should
                  only fall through for Admin - group EvmGroup-super_administrator\n
                  \   images = all_images.with_owner('self')\n  end\n\n  #log(:info,
                  \"images : #{images.inspect}\")\n\n\n  # Create some local variables
                  ...\n\n\n  unless images.nil?\n    images.each do |image|\n      name
                  = image.name\n      log(:info, \"+++++++++++++ Name : #{name} +++++++++++++++++++\")\n
                  \     count += 1\n      if count == 1\n        first = image.image_id\n
                  \     end\n      log(:info, \"AMI: #{image.image_id} \")\n      list[\"#{image.image_id}|#{default_region}|#{name}\"]
                  \ = \"#{image.image_id}|#{default_region}|#{name}\"\n    end\n  end\n
                  \ list[\"\"] = \"\"\n\n  log(:info, \"LIST: #{list.inspect} \")\n\n
                  \ # sort_by: value / description / none\n  $evm.object[\"sort_by\"]
                  = \"description\"\n  # sort_order: ascending / descending\n  $evm.object[\"sort_order\"]
                  = \"ascending\"\n  # data_type: string / integer\n  $evm.object[\"data_type\"]
                  = \"string\"\n  # required: true / false\n  $evm.object[\"required\"]
                  = \"true\"\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n  log(:info, \"Dialog Inspect: #{$evm.object.inspect}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON AMI Images =====  Automate
                  Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n  log(:info,
                  \"====== EXCEPTION IN RETRIEVE AMAZON AMI Images =====\")\n  log(:info,
                  exception.message)\nend\n\n"
                aws_ec2_list_all_images.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_list_all_images
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_list_all_regions.rb: ! "###################################\n#\n#
                  CloudForms Automate Method: aws_ec2_allowed_regions\n#\n# This method
                  is used to search for all allowed AWS EC2 Regions\n#\n###################################\n#\n#\n#
                  Method for logging\ndef log(level, message)\n  @method = 'aws_ec2_all_regions'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\n#\nlog(:info,
                  \"====== RETRIEVE AMAZON ALL REGIONS ===== Automate Method Started\")\n#\n#
                  \           Method Code Goes here\n#\n\n# Load the aws-sdk\nrequire
                  \"aws-sdk\"\n\naccess_key_id = nil\nsecret_access_key = nil\n\n\n#
                  @!method available_regions\n# List of available regions in EC2\n#\n#
                  @return [AWS::RegionCollection] .\n#\n# def available_regions\n#
                  \  return ec2_instance.regions\n# end\n\n\nbegin\n  # Get the Amazon
                  authentication credentials...\n  ems = nil #$evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n  \n\n  default_region = ems.provider_region\n  \n  # Create
                  the basic EC2 object\n  ec2_instance = AWS::EC2.new(:region=>default_region)\n
                  \ \n\t# Retrieve the available EC2 Regions\n  regions = ec2_instance.regions\n\n#
                  Create some local variables ...\n\n# Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n# Count of regions
                  ...\n  count = 0\n\n# Save first entry and make it the default region\n
                  \ first = nil\n\n  log(:info, \"Regions: #{regions.inspect}\")\n
                  \ \n# Go through all regions returned from EC2 and add them to list\n
                  \ regions.each do |r|\n    count += 1\n    if count == 1\n      first
                  = r.name\n    end\n    log(:info, \"REGIONS: #{r.name} \")\n    list[r.name]
                  \ = \"#{r.name}\"\n  end\n\n  list[\"\"] = \"\"\n\n  log(:info,
                  \"LIST: #{list.inspect} \")\n\n# Add list to dialog dynamic list
                  ...\n  $evm.object[\"values\"] = list\n\n  # Create the basic EC2
                  object\n  #ec2_instance = AWS::EC2.new(:region => region)\n\n# Make
                  the first entry the default value\n#$evm.object[\"default_value\"]
                  = first\n\n#$evm.object['selected_aws_region'] = $evm.root['dialog_aws_region']\n\n#log(:info,
                  \"====== REGION: #{$evm.object['dialog_aws_region']}\")\n#log(:info,
                  \"====== SELECTED REGION: #{$evm.object['selected_aws_region']}\")\n\n
                  \ log(:info, \"====== RETRIEVE AMAZON ALL REGIONS =====  Automate
                  Method \")\n\n#task = $evm.root['service_template_provision_task\"']\n#log(:info,
                  \"===========================================\")\n#log(:info, \"Listing
                  ROOT Attributes:\")\n#$evm.root.attributes.sort.each { |k, v| log(:info,
                  \"\\t#{k}: #{v}\")}\n#log(:info, \"===========================================\")\n\n#stp_task
                  = $evm.root[\"service_template\"]\n#log(:info, \"===========================================\")\n#log(:info,
                  \"Listing task Attributes:\")\n#stp_task.attributes.sort.each {
                  |k, v| log(:info, \"\\t#{k}: #{v}\")}\n#log(:info, \"===========================================\")\n\n
                  \ exit MIQ_OK\n\nrescue => exception\n  log(:info, \"====== EXCEPTION
                  IN RETRIEVE AMAZON REGIONS =====\")\n  log(:info, exception.message)\nend\n\n\n\n"
                aws_ec2_list_all_regions.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_list_all_regions
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_subnets.rb: ! "#\n#            Automate Method\n#\n$evm.log(\"info\",
                  \"Automate Method Started\")\n#\n#            Method Code Goes here\n#\n\n#
                  Load the aws-sdk\nrequire \"aws-sdk\"\n\n# If it comes from a button
                  you can do this.\nif $evm.object['vmdb_object_type'] != \"service_template\"\n
                  \  myvm = $evm.root[\"vm\"]\n   ems = myvm.ext_management_system\nend\n\n#
                  @!method available_regions\n# List of available regions in EC2\n#\n#
                  @return [AWS::RegionCollection] .\n#\n\nbegin\n  dialog_field =
                  $evm.object\n  \n# Get the Amazon authentication credentials...\n
                  \ if $evm.object['vmdb_object_type'] != \"service_template\"\n  \taccess_key_id
                  ||= ems.authentication_userid\n  \tsecret_access_key = ems.authentication_password.decrypt\n
                  \ else\n    \n    ems = $evm.vmdb(:ems_amazon).first\n    \n    if
                  ems.nil?\n       access_key_id ||= $evm.object['access_key_id']\n
                  \ \t   secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \   else \n      access_key_id ||= ems.authentication_userid\n      secret_access_key
                  ||= ems.authentication_password\n    end\n  end\n  \n  selected_region
                  = $evm.object['dialog_aws_region']\n  if selected_region == nil\n
                  \   default_region = $evm.object['default_aws_region']\n  else\n
                  \   default_region = selected_region\n  end\n\n  selected_vpc =
                  $evm.root['dialog_aws_vpc']\n  \n  if selected_vpc.nil?\n    raise
                  \"VPC Selection cannot be nil\"\n  end\n  \n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  # Create the basic EC2 object\n  ec2_instance = AWS::EC2.new(:region
                  => default_region)\n\n  # Retrieve the available EC2 Regions\n  subnets
                  = ec2_instance.vpcs[selected_vpc].subnets\n\n  # Create some local
                  variables ...\n\n  # Dynamic list to add values to the dialog dynamic
                  list ...\n  list = {}\n\n  list[\"\"]=\"\"\n  \n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all regions returned from
                  EC2 and add them to list\n  subnets.each do |k|\n    count += 1\n
                  \   if count == 1\n      first = k.id\n    end\n    $evm.log(\"info\",
                  \"SUBNETS: #{k.id} \")\n    list[k.id]  = \"#{k.id}|#{k.cidr_block}|#{k.state}\"\n
                  \ end\n\n  $evm.log(\"info\", \"LIST: #{list.inspect} \")\n\n  #
                  Add list to dialog dynamic list ...\n  $evm.object[\"values\"] =
                  list\n\n  # Make the first entry the default value\n  $evm.object[\"default_value\"]
                  = first\n\n  exit MIQ_OK\n\nrescue => exception\n  $evm.log(\"info\",
                  \"====== EXCEPTION IN RETRIEVE AMAZON REGIONS =====\")\n  $evm.log(\"info\",
                  exception.message)\nend\n"
                aws_ec2_subnets.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_subnets
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_ec2_vpcs.rb: ! "#            Automate Method\n#\n$evm.log(\"info\",
                  \"====== RETRIEVE AMAZON VPCs ===== Automate Method Started\")\n#\n#
                  \           Method Code Goes here\n#\n# Method for logging\ndef
                  log(level, message)\n  @method = 'create_attach_ebs_volume_button'\n
                  \ $evm.log(level, \"#{@method} - #{message}\")\nend\n#\n\n# Load
                  the aws-sdk\nrequire \"aws-sdk\"\n\nbegin\n  dialog_field = $evm.object\n
                  \ access_key_id = nil\n  secret_access_key = nil\n\n  # Get the
                  Amazon authentication credentials...\n  ems = $evm.vmdb(:ems_amazon).first\n
                  \ \n  if ems.nil?\n    # Get the values from the schema ...\n    access_key_id
                  ||= $evm.object['access_key_id']\n    secret_access_key = $evm.object.decrypt('secret_access_key')\n
                  \ else\n    access_key_id ||= ems.authentication_userid\n    secret_access_key
                  = ems.authentication_password\n  end\n  \n  AWS.config(\n      :access_key_id
                  => access_key_id,\n      :secret_access_key => secret_access_key\n
                  \ )\n\n  selected_region = $evm.object['dialog_aws_region']\n  log(:info,
                  \"++++++++++++++++++++++++ Region : #{selected_region} +++++++++++++++++++++++++++++++\")\n\n\n
                  \ if selected_region == nil\n    default_region = $evm.object['dialog_aws_region']\n
                  \ else\n    default_region = selected_region\n  end\n\n  # Create
                  the basic EC2 object\n  ec2_instance = AWS::EC2.new(:region => default_region)\n\n
                  \ # Retrieve the available EC2 Regions\n  vpcs = ec2_instance.vpcs\n\n
                  \ # Create some local variables ...\n\n  # Dynamic list to add values
                  to the dialog dynamic list ...\n  list = {}\n\n  # Count of regions
                  ...\n  count = 0\n\n  # Save first entry and make it the default
                  region\n  first = nil\n\n  # Go through all vpcs returned from EC2
                  and add them to list\n  vpcs.each do |k|\n    count += 1\n    if
                  count == 1\n      first = k.id\n    end\n    $evm.log(\"info\",
                  \"VPC Name: #{k.id} \")\n    list[k.id]  = \"#{k.id}|#{k.cidr_block}\"\n
                  \ end\n\n  list[\"\"] = \"\"\n\n  $evm.log(\"info\", \"LIST: #{list.inspect}
                  \")\n\n  # Add list to dialog dynamic list ...\n  $evm.object[\"values\"]
                  = list\n\n  # Make the first entry the default value\n  dialog_field[\"default_value\"]
                  = first\n  $evm.log(\"info\", \"====== RETRIEVE AMAZON VPCs =====
                  \ Automate Method Ended\")\n  exit MIQ_OK\n\nrescue => exception\n
                  \ $evm.log(\"info\", \"====== EXCEPTION IN RETRIEVE AMAZON VPCs
                  =====\")\n  $evm.log(\"info\", exception.message)\nend\n"
                aws_ec2_vpcs.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_ec2_vpcs
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
                aws_list_instance_flavors.rb: ! "#\n# Description: Populate a dynamic
                  drop down list with available AWS instance sizes\n#\n\n###### TRACERS
                  ######\n# Method for logging\ndef log(level, message)\n  @method
                  = 'aws_list_instance_flavors'\n  $evm.log(level, \"#{@method} -
                  #{message}\")\nend\n\ndef info(message)\n  log(:info, message)\nend\n\ndef
                  dump_root\n  log(:info, \"Root:<$evm.root> Attributes - Begin\")\n
                  \ $evm.root.attributes.sort.each { |k, v| log(:info, \"  Attribute
                  - #{k}: #{v}\") }\n  log(:info, \"Root:<$evm.root> Attributes -
                  End\")\n  log(:info, \"\")\nend\n\ndef dump_attributes(object)\n
                  \ log(:info, \"CUSTOM  Begin Attributes [object.attributes]\")\n
                  \ object.attributes.sort.each { |k, v| log(:info, \"CUSTOM    #{k}
                  = #{v.inspect}\") }\n  log(:info, \"CUSTOM  End Attributes [object.attributes]\")\n
                  \ log(:info, \"\")\nend\n###### TRACERS ######\n\ninfo(\"AWS List
                  Instance Flavors Automate Method Started\")\n\n# Allowed flavors
                  are listed here. Add or remove flavors here to modify what the user
                  can see.\nallowed_flavors = [\"t2.micro\", \"t2.small\", \"m3.medium\",
                  \"m3.large\"]\n\ndroplist = $evm.object\n\ndroplist[\"data_type\"]
                  = \"String\"\ndroplist[\"required\"] = \"true\"\n\n# Retrieve ext_management_system
                  based on the info we get from the service template\nservice_template
                  = $evm.root['service_template']\ninfo(\"Provisioning type: #{ service_template.prov_type
                  }\")\nems = $evm.vmdb(\"ems_amazon\").first # assuming only one
                  of each provider type.\n$evm.log(\"info\", \"fetched region: #{
                  ems.name }\")\n\ndefault_value = ems.flavors[0].id.to_s\n$evm.log(\"info\",
                  \"Default value: #{ default_value }\")\n\n# Create droplist values\noption_hash
                  = {}\nems.flavors.each { |flavor|\n  if ems.type == \"EmsAmazon\"\n
                  \   if allowed_flavors.include? flavor.name\n      key = flavor.id.to_s\n
                  \     value = \"CPUs: #{ flavor.cpus }, Memory: #{ (flavor.memory
                  / 1024.0**3).round(1) } GB (#{ flavor.name })\"\n      $evm.log(\"debug\",
                  \"Adding '#{ key }':'#{ value }' to droplist values\")\n      option_hash[key]
                  = value\n    end\n  else\n    key = flavor.id.to_s\n    value =
                  \"CPUs: #{ flavor.cpus }, Memory: #{ (flavor.memory / 1024.0**3).round(1)
                  } GB (#{ flavor.name })\"\n    $evm.log(\"debug\", \"Adding '#{
                  key }':'#{ value }' to droplist values\")\n    option_hash[key]
                  = value\n  end\n}\ninfo(\"Generated droplist options: #{ option_hash
                  }\")\ndroplist[\"values\"] = option_hash\n\ndroplist[\"default_value\"]
                  = default_value\n\ninfo(\"AWS List Instance Flavors Automate Method
                  Ended\")\n\nexit MIQ_OK\n"
                aws_list_instance_flavors.yaml:
                  object_type: method
                  version: 1.0
                  object:
                    attributes:
                      name: aws_list_instance_flavors
                      display_name: 
                      description: 
                      scope: instance
                      language: ruby
                      location: inline
                    inputs: []
  .manifest.yaml:
    __domain__.yaml:
      classes: 41
      instances: 142
      method_files: 136
      method_instances: 136
      created_on: 2015-06-04 03:00:50.814016000 Z
      updated_on: 2015-06-04 03:01:25.885738000 Z
      size: 167
      sha1: a6OYKA+NScu3W/WcLys4AaJaToU=
    Proxies/__namespace__.yaml:
      created_on: 2015-06-06 15:10:25.489174000 Z
      updated_on: 2015-06-06 15:10:25.489174000 Z
      size: 226
      sha1: O4x5MEaDp3Z1tZpZdASu7I8znlU=
    Proxies/Network/__namespace__.yaml:
      created_on: 2015-06-16 14:21:42.643223000 Z
      updated_on: 2015-06-16 14:21:42.643223000 Z
      size: 159
      sha1: Uu9Wq8lPc0C0K+KW7VArQjOJvu0=
    Proxies/Network/IPAddress/__namespace__.yaml:
      created_on: 2015-06-16 14:23:48.705412000 Z
      updated_on: 2015-06-16 14:23:48.705412000 Z
      size: 161
      sha1: NYPhgKegvyBlPtFbh1aVxCFPQU8=
    Proxies/Network/IPAddress/Cloud.class/__class__.yaml:
      created_on: 2015-06-16 14:24:11.283149000 Z
      updated_on: 2015-06-16 14:24:11.283149000 Z
      size: 1859
      sha1: Dg+XKiodGWxgBzNQqb/C5S23ZKc=
    Proxies/Network/IPAddress/Cloud.class/Attach.yaml:
      created_on: 2015-06-16 14:24:25.161870000 Z
      updated_on: 2015-06-16 14:24:25.161870000 Z
      size: 293
      sha1: 5yFleeqUirYS0UPG+5y9SZjvu24=
    Proxies/Network/IPAddress/Cloud.class/Detach.yaml:
      created_on: 2015-06-16 14:24:36.355490000 Z
      updated_on: 2015-06-16 14:24:36.355490000 Z
      size: 293
      sha1: U07W64VXxFc/mGBEMjufJg9q/nE=
    Proxies/Volume/__namespace__.yaml:
      created_on: 2015-06-06 15:11:15.111678000 Z
      updated_on: 2015-06-06 15:11:15.111678000 Z
      size: 188
      sha1: BYjAnG84+GBYOkyW1DbAX/TugJk=
    Proxies/Volume/Cloud.class/__class__.yaml:
      created_on: 2015-06-06 15:14:30.720822000 Z
      updated_on: 2015-06-06 15:14:30.720822000 Z
      size: 1909
      sha1: WZmUFC8vEsmWAUICRtcBYQbjnq4=
    Proxies/Volume/Cloud.class/Attach.yaml:
      created_on: 2015-06-06 20:33:06.104035000 Z
      updated_on: 2015-06-06 20:33:38.988886000 Z
      size: 316
      sha1: rzjKTaO7RXjluZ0UEtxF+h0lXiY=
    Proxies/Volume/Cloud.class/Create.yaml:
      created_on: 2015-06-06 17:46:13.295604000 Z
      updated_on: 2015-06-06 17:46:55.458047000 Z
      size: 316
      sha1: 73h/dTQk/lJKCFFGoIR086d6xy0=
    Proxies/Volume/Cloud.class/Delete.yaml:
      created_on: 2015-06-06 18:48:13.403755000 Z
      updated_on: 2015-06-06 18:48:48.669545000 Z
      size: 316
      sha1: pgBerwk/0ZsgmNk4sQzOVAMrSuw=
    Proxies/Volume/Cloud.class/Detach.yaml:
      created_on: 2015-06-06 15:17:40.777051000 Z
      updated_on: 2015-06-06 15:17:40.777051000 Z
      size: 338
      sha1: Ohe27fSlANQv9VtQeRMS17dxDuw=
    System/__namespace__.yaml:
      created_on: 2015-06-04 03:00:55.014751000 Z
      updated_on: 2015-06-04 03:00:55.014751000 Z
      size: 158
      sha1: zkGwbz6m10Hqlqwr3s7lki+Xe+E=
    System/Policy.class/__class__.yaml:
      created_on: 2015-06-04 03:00:55.069789000 Z
      updated_on: 2015-06-04 03:00:55.069789000 Z
      size: 7845
      sha1: xGUKibqmTHnBIVBEj4O2chE0wGk=
    System/Policy.class/ServiceTemplateProvisionRequest_approved.yaml:
      created_on: 2015-06-04 03:00:55.138039000 Z
      updated_on: 2015-06-04 03:00:55.138039000 Z
      size: 374
      sha1: LsAzxFmRz0jPQkBGKS9TbLkrNbM=
    System/Request.class/__class__.yaml:
      created_on: 2015-06-04 03:00:55.400769000 Z
      updated_on: 2015-06-04 03:00:55.400769000 Z
      size: 7601
      sha1: Gk7jDESqKbPjYW75u4fP+CE4NQw=
    System/Request.class/_missing.yaml:
      created_on: 2015-06-04 03:00:55.454283000 Z
      updated_on: 2015-06-04 03:00:55.454283000 Z
      size: 145
      sha1: KSMzS/cmfnyf1fT4cdTCTAN2lO8=
    System/Request.class/AttachEBSInstance.yaml:
      created_on: 2015-06-07 03:46:01.962408000 Z
      updated_on: 2015-06-07 03:46:01.962408000 Z
      size: 281
      sha1: QVQ69SKIBTD4t/G5R047qWvDhjw=
    System/Request.class/CreateAttachEBSVolumeButton.yaml:
      created_on: 2015-06-04 03:00:55.489059000 Z
      updated_on: 2015-06-04 03:00:55.489059000 Z
      size: 371
      sha1: DsDHiKBTWclBMeOVBZimTg7CTYE=
    System/Request.class/DeleteEBSVolume.yaml:
      created_on: 2015-06-04 03:00:55.500870000 Z
      updated_on: 2015-06-04 03:00:55.500870000 Z
      size: 277
      sha1: vSmWGDXJyYRENjwOoTPOEzICmCo=
    System/Request.class/DetachEBSInstance.yaml:
      created_on: 2015-06-04 03:00:55.512617000 Z
      updated_on: 2015-06-04 03:00:55.512617000 Z
      size: 268
      sha1: k++PGTzmH8h1470BFMo8yKlJSbI=
    System/Request.class/attach_disk_btn.yaml:
      created_on: 2015-06-06 20:32:04.770480000 Z
      updated_on: 2015-06-06 20:32:45.464731000 Z
      size: 310
      sha1: /FbOPcCnk8Yxi3u+hcZ6xGX159o=
    System/Request.class/attach_existing_disk.yaml:
      created_on: 2015-06-04 11:59:40.641101000 Z
      updated_on: 2015-06-04 12:00:35.292328000 Z
      size: 347
      sha1: /xdDUe/PJofA0aj93OzVAxeCkss=
    System/Request.class/create_attach_new_disk.yaml:
      created_on: 2015-06-04 03:00:55.477210000 Z
      updated_on: 2015-06-04 11:47:49.140279000 Z
      size: 344
      sha1: J9lbHoSDvCfRcqVEvJwARv4/ZeQ=
    System/Request.class/create_disk_btn.yaml:
      created_on: 2015-06-06 17:44:44.782364000 Z
      updated_on: 2015-06-06 17:45:14.656764000 Z
      size: 321
      sha1: iHa3stq0WBuLDIUSabszk26g9ks=
    System/Request.class/delete_disk_btn.yaml:
      created_on: 2015-06-06 18:46:53.644996000 Z
      updated_on: 2015-06-06 18:47:57.024995000 Z
      size: 309
      sha1: zvsJ5LMS7b9eDf8W80xUz/hOHbw=
    System/Request.class/detach_disk_btn.yaml:
      created_on: 2015-06-04 06:35:42.002743000 Z
      updated_on: 2015-06-06 15:21:20.875815000 Z
      size: 318
      sha1: nc3bQqoOgmV4wiaIsk0rSiXjpS8=
    System/Request.class/floating_ip_attach.yaml:
      created_on: 2015-06-16 14:19:47.089292000 Z
      updated_on: 2015-06-16 14:26:26.772736000 Z
      size: 259
      sha1: y0PzUfRHQs6PdB1ZYrdK/U26xBQ=
    System/Request.class/floating_ip_detach.yaml:
      created_on: 2015-06-16 14:20:04.069526000 Z
      updated_on: 2015-06-16 14:26:51.153907000 Z
      size: 259
      sha1: 0qhLx9/3XgogT23Vt0jGncsKat0=
    ServiceDialog/__namespace__.yaml:
      created_on: 2015-06-04 03:00:54.700787000 Z
      updated_on: 2015-06-04 03:00:54.700787000 Z
      size: 165
      sha1: Hr1lRdnanBqmp24rsRydsqnazLM=
    ServiceDialog/Methods.class/__class__.yaml:
      created_on: 2015-06-04 03:00:54.712960000 Z
      updated_on: 2015-06-04 03:00:54.712960000 Z
      size: 924
      sha1: nI5RCg/j2xh2Nkug30OCOWDHWOo=
    ServiceDialog/Methods.class/populateAttachedCinderVolumes.yaml:
      created_on: 2015-06-04 06:14:30.174899000 Z
      updated_on: 2015-06-06 19:33:21.341827000 Z
      size: 252
      sha1: TyzL1nqyHh2FZREqIrSuQ9Z+rck=
    ServiceDialog/Methods.class/populateAwsProviders.yaml:
      created_on: 2015-06-04 03:00:54.725460000 Z
      updated_on: 2015-06-04 03:00:54.725460000 Z
      size: 224
      sha1: ffPzjk8wzKNccqL8Jbim5sCDWWw=
    ServiceDialog/Methods.class/populateCloudInstanceSizes.yaml:
      created_on: 2015-06-05 06:05:36.741171000 Z
      updated_on: 2015-06-05 06:05:56.854513000 Z
      size: 238
      sha1: 7Rmh8zphE7quE3VVgwgbUvGlVX8=
    ServiceDialog/Methods.class/populateImageTypes.yaml:
      created_on: 2015-06-04 03:00:54.735467000 Z
      updated_on: 2015-06-04 03:00:54.735467000 Z
      size: 218
      sha1: SMs3vYy8SklvRalmIGc0HlM3w0A=
    ServiceDialog/Methods.class/populateOpenStackImageTypes.yaml:
      created_on: 2015-06-04 03:00:54.745631000 Z
      updated_on: 2015-06-04 03:00:54.745631000 Z
      size: 246
      sha1: qFUTMnjNPEGj6W5mZUUkHzj7c4Q=
    ServiceDialog/Methods.class/populateOpenStackInstanceSizes.yaml:
      created_on: 2015-06-04 03:00:54.755915000 Z
      updated_on: 2015-06-04 03:00:54.755915000 Z
      size: 255
      sha1: z6shoqe64SygxzDvr1uu5LqLBOA=
    ServiceDialog/Methods.class/populateProjects.yaml:
      created_on: 2015-06-04 03:00:54.766239000 Z
      updated_on: 2015-06-04 03:00:54.766239000 Z
      size: 249
      sha1: VltUmguGkwQHE1B4X8xxOTRkPzg=
    ServiceDialog/Methods.class/populatePublicNetworks.yaml:
      created_on: 2015-06-16 15:00:26.723202000 Z
      updated_on: 2015-06-16 15:00:26.723202000 Z
      size: 206
      sha1: 3tkbXZQb2ulCE+p+TqkgeCIh9oM=
    ServiceDialog/Methods.class/populateSponsors.yaml:
      created_on: 2015-06-04 03:00:54.776705000 Z
      updated_on: 2015-06-04 03:00:54.776705000 Z
      size: 265
      sha1: 3QNVMugO1rVQPPij2uO7JLzOHbw=
    ServiceDialog/Methods.class/populateUnattachedCinderVolumes.yaml:
      created_on: 2015-06-06 19:35:30.363764000 Z
      updated_on: 2015-06-06 19:35:47.656570000 Z
      size: 258
      sha1: vKTUzBhIE4cRFPd22Yn4RVj8UIo=
    ServiceDialog/Methods.class/__methods__/populateAttachedCinderVolumes.rb:
      created_on: 2015-06-04 06:15:12.558267000 Z
      updated_on: 2015-06-04 06:33:15.263012000 Z
      size: 2598
      sha1: LA+h0r9k80VlKNkUMiaE9UmQYxc=
    ServiceDialog/Methods.class/__methods__/populateAttachedCinderVolumes.yaml:
      created_on: 2015-06-04 06:15:12.558267000 Z
      updated_on: 2015-06-04 06:33:15.263012000 Z
      size: 241
      sha1: uRY641Mm3XUdW6kB5eujZgKFHdU=
    ServiceDialog/Methods.class/__methods__/populateAwsProviders.rb:
      created_on: 2015-06-04 03:00:54.787327000 Z
      updated_on: 2015-06-04 03:00:54.787327000 Z
      size: 827
      sha1: wbQlPRN8yerFN6Yr71D7CfBjjXA=
    ServiceDialog/Methods.class/__methods__/populateAwsProviders.yaml:
      created_on: 2015-06-04 03:00:54.787327000 Z
      updated_on: 2015-06-04 03:00:54.787327000 Z
      size: 222
      sha1: UNe/rinHMMefJQjzurPYWlX3tnw=
    ServiceDialog/Methods.class/__methods__/populateImageTypes.rb:
      created_on: 2015-06-04 03:00:54.796075000 Z
      updated_on: 2015-06-10 09:10:42.763205000 Z
      size: 1890
      sha1: YzmOKnES4yyMU6Z+ARBmiyUH/VE=
    ServiceDialog/Methods.class/__methods__/populateImageTypes.yaml:
      created_on: 2015-06-04 03:00:54.796075000 Z
      updated_on: 2015-06-10 09:10:42.763205000 Z
      size: 218
      sha1: LNU8oUvFC58rbK53KmVPO0DOvLs=
    ServiceDialog/Methods.class/__methods__/populateInstanceSizes.rb:
      created_on: 2015-06-04 03:00:54.804979000 Z
      updated_on: 2015-06-10 09:11:01.521860000 Z
      size: 2377
      sha1: 4fX7FnzMS42rNYNCqM1DrgLgmTk=
    ServiceDialog/Methods.class/__methods__/populateInstanceSizes.yaml:
      created_on: 2015-06-04 03:00:54.804979000 Z
      updated_on: 2015-06-10 09:11:01.521860000 Z
      size: 224
      sha1: h39A98f9RS9zFbb6p2eN4tqaSZc=
    ServiceDialog/Methods.class/__methods__/populateOpenStackImageTypes.rb:
      created_on: 2015-06-04 03:00:54.814138000 Z
      updated_on: 2015-06-10 09:11:15.160269000 Z
      size: 1752
      sha1: pkm1BKTmgaURS+pR1wtF1lY/RWA=
    ServiceDialog/Methods.class/__methods__/populateOpenStackImageTypes.yaml:
      created_on: 2015-06-04 03:00:54.814138000 Z
      updated_on: 2015-06-10 09:11:15.160269000 Z
      size: 237
      sha1: arfsptIAd65YIfsBlLyZdT8RqPs=
    ServiceDialog/Methods.class/__methods__/populateOpenStackInstanceSizes.rb:
      created_on: 2015-06-04 03:00:54.822825000 Z
      updated_on: 2015-06-10 09:11:25.936664000 Z
      size: 2164
      sha1: tpa7+TmCBWLYTNk0a0CZRZR4Sno=
    ServiceDialog/Methods.class/__methods__/populateOpenStackInstanceSizes.yaml:
      created_on: 2015-06-04 03:00:54.822825000 Z
      updated_on: 2015-06-10 09:11:25.936664000 Z
      size: 243
      sha1: rOLumcljJg9rtIxBQtD/0Yv7ldw=
    ServiceDialog/Methods.class/__methods__/populateProjects.rb:
      created_on: 2015-06-04 03:00:54.831788000 Z
      updated_on: 2015-06-10 09:11:40.890268000 Z
      size: 1845
      sha1: aPe9RobXmkwHbWe4ngHLI5QWXWM=
    ServiceDialog/Methods.class/__methods__/populateProjects.yaml:
      created_on: 2015-06-04 03:00:54.831788000 Z
      updated_on: 2015-06-10 09:11:40.890268000 Z
      size: 248
      sha1: uZfMydFv9Vpw5hxX4nNP0VaDn8s=
    ServiceDialog/Methods.class/__methods__/populatePublicNetworks.rb:
      created_on: 2015-06-16 14:58:48.515110000 Z
      updated_on: 2015-06-16 15:32:01.203092000 Z
      size: 1954
      sha1: qGofhxpgS5IKqhHy/o1VwveHBxA=
    ServiceDialog/Methods.class/__methods__/populatePublicNetworks.yaml:
      created_on: 2015-06-16 14:58:48.515110000 Z
      updated_on: 2015-06-16 15:32:01.203092000 Z
      size: 202
      sha1: e4GeReXsvjD4F/zxxpM1kJFy9R8=
    ServiceDialog/Methods.class/__methods__/populateSponsors.rb:
      created_on: 2015-06-04 03:00:54.841388000 Z
      updated_on: 2015-06-10 06:36:43.693483000 Z
      size: 1559
      sha1: yD3Q/G7UqfWdolqSWsPHizj6gQQ=
    ServiceDialog/Methods.class/__methods__/populateSponsors.yaml:
      created_on: 2015-06-04 03:00:54.841388000 Z
      updated_on: 2015-06-10 06:36:43.693483000 Z
      size: 217
      sha1: NQpvg1LyWf3e0C5wDYXod0/LuyU=
    ServiceDialog/Methods.class/__methods__/populateUnattachedCinderVolumes.rb:
      created_on: 2015-06-06 19:41:35.005274000 Z
      updated_on: 2015-06-06 20:31:06.498526000 Z
      size: 3147
      sha1: V8YjWCYb0VOxLG1y3l1RrzgijBk=
    ServiceDialog/Methods.class/__methods__/populateUnattachedCinderVolumes.yaml:
      created_on: 2015-06-06 19:41:35.005274000 Z
      updated_on: 2015-06-06 20:31:06.498526000 Z
      size: 211
      sha1: bxQFSNOaRcV4Gc4fxgSjvEStYI8=
    Service/__namespace__.yaml:
      created_on: 2015-06-04 03:00:54.263109000 Z
      updated_on: 2015-06-05 01:35:26.437893000 Z
      size: 159
      sha1: ERYg3wXs3aSZD0x+aX2yXicajUk=
    Service/Provisioning/__namespace__.yaml:
      created_on: 2015-06-04 03:00:54.327385000 Z
      updated_on: 2015-06-04 03:00:54.327385000 Z
      size: 164
      sha1: IfcxDJ844lczST9d/ej9/JN76u4=
    Service/Provisioning/Email.class/__class__.yaml:
      created_on: 2015-06-04 03:00:54.347676000 Z
      updated_on: 2015-06-04 03:00:54.347676000 Z
      size: 2146
      sha1: N4p6HgKUR2i8YrxeC/1rU4Ha6SM=
    Service/Provisioning/Email.class/ServiceProvision_Complete.yaml:
      created_on: 2015-06-04 03:00:54.369271000 Z
      updated_on: 2015-06-04 03:00:54.369271000 Z
      size: 236
      sha1: mlp0zj792kdQqM7RYFDDoYhgDOQ=
    Service/Provisioning/Email.class/ServiceTemplateProvisionRequest_Approved.yaml:
      created_on: 2015-06-04 03:00:54.380143000 Z
      updated_on: 2015-06-04 03:00:54.380143000 Z
      size: 241
      sha1: J6kL8cdqyiWSNjpiixUQDJ2dGBM=
    Service/Provisioning/Email.class/__methods__/ServiceProvision_Complete.rb:
      created_on: 2015-06-04 03:00:54.390728000 Z
      updated_on: 2015-06-04 03:00:54.390728000 Z
      size: 71
      sha1: lH4+DuWpGtLSX7vGHJkaLikstQQ=
    Service/Provisioning/Email.class/__methods__/ServiceProvision_Complete.yaml:
      created_on: 2015-06-04 03:00:54.390728000 Z
      updated_on: 2015-06-04 03:00:54.390728000 Z
      size: 205
      sha1: g5NlDhmy51QdifNOk2yq/Wbr8no=
    Service/Provisioning/Email.class/__methods__/ServiceTemplateProvisionRequest_Approved.rb:
      created_on: 2015-06-04 03:00:54.399556000 Z
      updated_on: 2015-06-04 03:00:54.399556000 Z
      size: 3917
      sha1: SYIogajrSQDfYKtZ4s1+iW5ywKE=
    Service/Provisioning/Email.class/__methods__/ServiceTemplateProvisionRequest_Approved.yaml:
      created_on: 2015-06-04 03:00:54.399556000 Z
      updated_on: 2015-06-04 03:00:54.399556000 Z
      size: 220
      sha1: UCbNtNWDtvYf/M7ZUNKE55v7Oo4=
    Service/Provisioning/StateMachines/__namespace__.yaml:
      created_on: 2015-06-04 03:00:54.537639000 Z
      updated_on: 2015-06-04 03:00:54.537639000 Z
      size: 165
      sha1: 22eiz/w4svqadOuX6ijZPmzbScQ=
    Service/Provisioning/StateMachines/ServiceProvisionRequestApproval.class/__class__.yaml:
      created_on: 2015-06-04 03:00:54.560132000 Z
      updated_on: 2015-06-04 03:00:54.560132000 Z
      size: 2993
      sha1: AIQLG/2pY1awPVlKVzdnMbPBZXM=
    Service/Provisioning/StateMachines/ServiceProvisionRequestApproval.class/Default.yaml:
      created_on: 2015-06-04 03:00:54.583828000 Z
      updated_on: 2015-06-04 03:00:54.583828000 Z
      size: 144
      sha1: /FXrbb3Q7jBDRVUYqy1auf+SB1w=
    Service/Provisioning/StateMachines/ServiceProvisionRequestApproval.class/__methods__/approve_request.rb:
      created_on: 2015-06-04 03:00:54.594658000 Z
      updated_on: 2015-06-10 08:57:42.401705000 Z
      size: 4912
      sha1: npZzZ22QpjTxVAgkREQ8MC1OU9U=
    Service/Provisioning/StateMachines/ServiceProvisionRequestApproval.class/__methods__/approve_request.yaml:
      created_on: 2015-06-04 03:00:54.594658000 Z
      updated_on: 2015-06-10 08:57:42.401705000 Z
      size: 195
      sha1: VeMmB4PoGlNu/rjUUAQzMc1B4I8=
    Service/Provisioning/StateMachines/ServiceProvisionRequestApproval.class/__methods__/pending_request.rb:
      created_on: 2015-06-04 03:00:54.604018000 Z
      updated_on: 2015-06-04 03:00:54.604018000 Z
      size: 240
      sha1: GdnzanPpsZDuagz1kbLR/znxl7I=
    Service/Provisioning/StateMachines/ServiceProvisionRequestApproval.class/__methods__/pending_request.yaml:
      created_on: 2015-06-04 03:00:54.604018000 Z
      updated_on: 2015-06-04 03:00:54.604018000 Z
      size: 195
      sha1: pUcHcWRvSElHLvDm+XDYP+v6ohY=
    Service/Provisioning/StateMachines/ServiceProvisionRequestApproval.class/__methods__/validate_request.rb:
      created_on: 2015-06-04 03:00:54.613227000 Z
      updated_on: 2015-06-04 12:30:25.810917000 Z
      size: 7119
      sha1: 6YwZj5D4Ll9hE11B4N/ENHcfLFE=
    Service/Provisioning/StateMachines/ServiceProvisionRequestApproval.class/__methods__/validate_request.yaml:
      created_on: 2015-06-04 03:00:54.613227000 Z
      updated_on: 2015-06-04 12:30:25.810917000 Z
      size: 196
      sha1: A4ELC3p5Q9XZj/Zkt6rNKGJKw9s=
    Service/Provisioning/StateMachines/ServiceProvisionRequestQuotaVerification.class/__class__.yaml:
      created_on: 2015-06-04 03:00:54.636616000 Z
      updated_on: 2015-06-04 03:00:54.636616000 Z
      size: 3102
      sha1: aQh9Ko9zHuYUNrqm6amT9TjAk+U=
    Service/Provisioning/StateMachines/ServiceProvisionRequestQuotaVerification.class/Default.yaml:
      created_on: 2015-06-04 03:00:54.659667000 Z
      updated_on: 2015-06-04 03:00:54.659667000 Z
      size: 144
      sha1: /FXrbb3Q7jBDRVUYqy1auf+SB1w=
    Service/Provisioning/StateMachines/ServiceProvisionRequestQuotaVerification.class/__methods__/rejected.rb:
      created_on: 2015-06-04 03:00:54.671058000 Z
      updated_on: 2015-06-04 03:00:54.671058000 Z
      size: 220
      sha1: 8ZI6Xd35lwuFJBvQ9nKxi/wzYPI=
    Service/Provisioning/StateMachines/ServiceProvisionRequestQuotaVerification.class/__methods__/rejected.yaml:
      created_on: 2015-06-04 03:00:54.671058000 Z
      updated_on: 2015-06-04 03:00:54.671058000 Z
      size: 547
      sha1: px7yE4eQH79UKtNhcAqAJOFBfx0=
    Service/Provisioning/StateMachines/ServiceProvisionRequestQuotaVerification.class/__methods__/validate_quotas.rb:
      created_on: 2015-06-04 03:00:54.682499000 Z
      updated_on: 2015-06-08 07:16:19.946135000 Z
      size: 6898
      sha1: x3F2lB9XIYchNV8+m6u0VK0XDt0=
    Service/Provisioning/StateMachines/ServiceProvisionRequestQuotaVerification.class/__methods__/validate_quotas.yaml:
      created_on: 2015-06-04 03:00:54.682499000 Z
      updated_on: 2015-06-08 07:16:19.946135000 Z
      size: 195
      sha1: VoQNZHE1c0bgq7mxIJBezj+fkZY=
    Methods/__namespace__.yaml:
      created_on: 2015-06-04 03:00:54.160697000 Z
      updated_on: 2015-06-04 03:00:54.160697000 Z
      size: 159
      sha1: IQks2nLAFQvEIHO2xi/RL2p0xqE=
    Methods/Emails.class/__class__.yaml:
      created_on: 2015-06-04 03:00:54.194574000 Z
      updated_on: 2015-06-04 03:00:54.194574000 Z
      size: 918
      sha1: JHm6haYa3peL21zDiOKI1XWrmW4=
    Methods/Emails.class/Email_Owner.yaml:
      created_on: 2015-06-04 03:00:54.234253000 Z
      updated_on: 2015-06-04 03:00:54.234253000 Z
      size: 183
      sha1: 1TBJD6CMsuRpyBh/XcPGeLxv2pg=
    Methods/Emails.class/__methods__/Email_Owner.rb:
      created_on: 2015-06-04 03:00:54.245154000 Z
      updated_on: 2015-06-04 03:00:54.245154000 Z
      size: 11179
      sha1: xTEF3k3Xb1+cC19iHKmjtuVj8Ig=
    Methods/Emails.class/__methods__/Email_Owner.yaml:
      created_on: 2015-06-04 03:00:54.245154000 Z
      updated_on: 2015-06-04 03:00:54.245154000 Z
      size: 191
      sha1: SRTm/EgUL8eib3toG9iX/rf5wK8=
    Integration/__namespace__.yaml:
      created_on: 2015-06-04 03:00:54.043884000 Z
      updated_on: 2015-06-04 03:00:54.043884000 Z
      size: 163
      sha1: GoN4U9v7cipi4qda1BU5NQ63Qa8=
    Integration/CloudFlare/__namespace__.yaml:
      created_on: 2015-06-08 08:45:38.200771000 Z
      updated_on: 2015-06-08 11:30:05.184488000 Z
      size: 162
      sha1: FZ4YAxWP+6MIrmucqGpRhZfw8T8=
    Integration/CloudFlare/CloudFlareDNS.class/__class__.yaml:
      created_on: 2015-06-08 08:46:09.357434000 Z
      updated_on: 2015-06-08 11:28:23.015995000 Z
      size: 2952
      sha1: c1jqYi/qaJh54Yj7NtcSV7PeiXY=
    Integration/CloudFlare/CloudFlareDNS.class/RegisterAmazonVM.yaml:
      created_on: 2015-06-08 08:47:29.856600000 Z
      updated_on: 2015-06-08 08:47:29.856600000 Z
      size: 219
      sha1: uXVCuSSC+way+BscocqPIeexvn0=
    Integration/CloudFlare/CloudFlareDNS.class/RegisterOpenStackVM.yaml:
      created_on: 2015-06-09 05:05:20.309681000 Z
      updated_on: 2015-06-09 05:05:20.309681000 Z
      size: 320
      sha1: l8pgk+KzA6fizhU9SoXcu8S2su8=
    Integration/CloudFlare/CloudFlareDNS.class/__methods__/register_amazon_vm.rb:
      created_on: 2015-06-08 08:48:29.886327000 Z
      updated_on: 2015-06-09 06:22:16.861703000 Z
      size: 5099
      sha1: xXyakSpmDdLtLxVWVWktcEBNnIY=
    Integration/CloudFlare/CloudFlareDNS.class/__methods__/register_amazon_vm.yaml:
      created_on: 2015-06-08 08:48:29.886327000 Z
      updated_on: 2015-06-09 06:22:16.861703000 Z
      size: 198
      sha1: YZtzrcOW9BgLXLoeE5M8mZ3WL2g=
    Integration/CloudFlare/CloudFlareDNS.class/__methods__/register_openstack_vm.rb:
      created_on: 2015-06-09 05:05:54.464519000 Z
      updated_on: 2015-06-09 11:04:34.786011000 Z
      size: 3765
      sha1: IY+GlUuCFChS4eW35MhtLU5ickU=
    Integration/CloudFlare/CloudFlareDNS.class/__methods__/register_openstack_vm.yaml:
      created_on: 2015-06-09 05:05:54.464519000 Z
      updated_on: 2015-06-09 11:04:34.786011000 Z
      size: 201
      sha1: SOkDe6e9sws0h+5mmIIu/+OoMdM=
    Integration/OpenStack/__namespace__.yaml:
      created_on: 2015-06-06 13:54:34.057441000 Z
      updated_on: 2015-06-06 13:54:34.057441000 Z
      size: 183
      sha1: 4ypS3eiCSKTxGk5E1qPjKWgmQAg=
    Integration/OpenStack/Neutron/__namespace__.yaml:
      created_on: 2015-06-09 06:01:19.734293000 Z
      updated_on: 2015-06-09 06:01:19.734293000 Z
      size: 159
      sha1: NZNCQ7CTAkBYXV2pSEhzY12HRgk=
    Integration/OpenStack/Neutron/FloatingIPAttach.class/__class__.yaml:
      created_on: 2015-06-09 06:01:57.639548000 Z
      updated_on: 2015-06-09 06:01:57.639548000 Z
      size: 4278
      sha1: GVE4CW2y4JYmPx4/OrTUkcUtYCo=
    Integration/OpenStack/Neutron/FloatingIPAttach.class/CatalogItemInvocation.yaml:
      created_on: 2015-06-09 06:23:31.050758000 Z
      updated_on: 2015-06-09 06:23:31.050758000 Z
      size: 235
      sha1: AHd6CLpkP9lyQqJeCcEIEjDCw9A=
    Integration/OpenStack/Neutron/FloatingIPAttach.class/GenericInvocation.yaml:
      created_on: 2015-06-09 08:40:24.734530000 Z
      updated_on: 2015-06-09 08:40:24.734530000 Z
      size: 227
      sha1: DEBCxadmcA7UOH/lkdtL9lCiAFU=
    Integration/OpenStack/Neutron/FloatingIPAttach.class/VmButtonInvocation.yaml:
      created_on: 2015-06-16 15:05:39.453832000 Z
      updated_on: 2015-06-16 15:05:39.453832000 Z
      size: 229
      sha1: WMiO662P/6vfQslfVeH7QNAlPGc=
    Integration/OpenStack/Neutron/FloatingIPAttach.class/__methods__/AttachFloatingIP.rb:
      created_on: 2015-06-09 06:11:38.324556000 Z
      updated_on: 2015-06-11 09:41:17.468150000 Z
      size: 3365
      sha1: ylKp0D+tN8CG32WxUkPT9SB1ri4=
    Integration/OpenStack/Neutron/FloatingIPAttach.class/__methods__/AttachFloatingIP.yaml:
      created_on: 2015-06-09 06:11:38.324556000 Z
      updated_on: 2015-06-11 09:41:17.468150000 Z
      size: 196
      sha1: M6IAtxpb5A2y+JShjaH6aQPqFvI=
    Integration/OpenStack/Neutron/FloatingIPAttach.class/__methods__/GenericInitialization.rb:
      created_on: 2015-06-09 08:42:05.153317000 Z
      updated_on: 2015-06-10 02:07:04.430359000 Z
      size: 1177
      sha1: ugTloRVSEZhS2P6qMJrwpAllRAk=
    Integration/OpenStack/Neutron/FloatingIPAttach.class/__methods__/GenericInitialization.yaml:
      created_on: 2015-06-09 08:42:05.153317000 Z
      updated_on: 2015-06-10 02:07:04.430359000 Z
      size: 201
      sha1: qpQGaM9yKomuf6VONNk+uq2vnbM=
    Integration/OpenStack/Neutron/FloatingIPAttach.class/__methods__/VmButtonInitialization.rb:
      created_on: 2015-06-16 15:06:56.344136000 Z
      updated_on: 2015-06-16 15:44:10.315129000 Z
      size: 2789
      sha1: CZuilavPE3D9Cdovf31S2wcqHYg=
    Integration/OpenStack/Neutron/FloatingIPAttach.class/__methods__/VmButtonInitialization.yaml:
      created_on: 2015-06-16 15:06:56.344136000 Z
      updated_on: 2015-06-16 15:44:10.315129000 Z
      size: 202
      sha1: d4XHHu9g8cisR6oKsy6eK3skCSs=
    Integration/OpenStack/Neutron/FloatingIPDetach.class/__class__.yaml:
      created_on: 2015-06-09 06:09:59.389525000 Z
      updated_on: 2015-06-09 06:09:59.389525000 Z
      size: 3879
      sha1: syq7ly9jgRQds7JIea67E+ME7mg=
    Integration/OpenStack/Neutron/FloatingIPDetach.class/GenericInvocation.yaml:
      created_on: 2015-06-16 13:46:05.730597000 Z
      updated_on: 2015-06-16 13:46:05.730597000 Z
      size: 154
      sha1: x9fObMAvhSmY7mHDlzwaXF6+MVU=
    Integration/OpenStack/Neutron/FloatingIPDetach.class/VmButtonInvocation.yaml:
      created_on: 2015-06-16 14:05:59.524918000 Z
      updated_on: 2015-06-16 14:05:59.524918000 Z
      size: 229
      sha1: WMiO662P/6vfQslfVeH7QNAlPGc=
    Integration/OpenStack/Neutron/FloatingIPDetach.class/__methods__/DetachFloatingIP.rb:
      created_on: 2015-06-16 13:47:23.974459000 Z
      updated_on: 2015-06-16 14:03:26.213645000 Z
      size: 2482
      sha1: jVL/ht142JjBu1tYQ4LILvkWx+0=
    Integration/OpenStack/Neutron/FloatingIPDetach.class/__methods__/DetachFloatingIP.yaml:
      created_on: 2015-06-16 13:47:23.974459000 Z
      updated_on: 2015-06-16 14:03:26.213645000 Z
      size: 196
      sha1: Wj+vQB76Hdrj4dEHG7q0Dn41xAA=
    Integration/OpenStack/Neutron/FloatingIPDetach.class/__methods__/GenericInitialization.rb:
      created_on: 2015-06-16 13:47:08.982638000 Z
      updated_on: 2015-06-16 14:05:14.880248000 Z
      size: 1177
      sha1: ugTloRVSEZhS2P6qMJrwpAllRAk=
    Integration/OpenStack/Neutron/FloatingIPDetach.class/__methods__/GenericInitialization.yaml:
      created_on: 2015-06-16 13:47:08.982638000 Z
      updated_on: 2015-06-16 14:05:14.880248000 Z
      size: 201
      sha1: qpQGaM9yKomuf6VONNk+uq2vnbM=
    Integration/OpenStack/Neutron/FloatingIPDetach.class/__methods__/VmButtonInitialization.rb:
      created_on: 2015-06-16 14:08:12.917258000 Z
      updated_on: 2015-06-16 15:06:32.204344000 Z
      size: 1818
      sha1: 37+mTu37sd6FejEd7TpFFfl/o3w=
    Integration/OpenStack/Neutron/FloatingIPDetach.class/__methods__/VmButtonInitialization.yaml:
      created_on: 2015-06-16 14:08:12.917258000 Z
      updated_on: 2015-06-16 15:06:32.204344000 Z
      size: 202
      sha1: d4XHHu9g8cisR6oKsy6eK3skCSs=
    Integration/OpenStack/Cinder/__namespace__.yaml:
      created_on: 2015-06-06 13:55:33.631466000 Z
      updated_on: 2015-06-06 13:55:33.631466000 Z
      size: 184
      sha1: fSsrtdoeOnIsQeF37vgP/E2bKPQ=
    Integration/OpenStack/Cinder/VolumeAttach.class/__class__.yaml:
      created_on: 2015-06-06 17:02:28.795522000 Z
      updated_on: 2015-06-06 17:02:48.332702000 Z
      size: 4747
      sha1: 7IWLPOZ7RGMtDXN8kml+mXi0wPU=
    Integration/OpenStack/Cinder/VolumeAttach.class/VmButtonInvocation.yaml:
      created_on: 2015-06-06 17:05:23.963111000 Z
      updated_on: 2015-06-06 17:05:23.963111000 Z
      size: 293
      sha1: BsBVT7we9qQBAqJbCgGhGJMZFhY=
    Integration/OpenStack/Cinder/VolumeAttach.class/__methods__/AttachVolume.rb:
      created_on: 2015-06-06 17:12:23.683564000 Z
      updated_on: 2015-06-06 18:40:34.965727000 Z
      size: 4105
      sha1: M7Q5OIfC4+o016n1HaXL1HlOYuo=
    Integration/OpenStack/Cinder/VolumeAttach.class/__methods__/AttachVolume.yaml:
      created_on: 2015-06-06 17:12:23.683564000 Z
      updated_on: 2015-06-06 18:40:34.965727000 Z
      size: 205
      sha1: yQe271+FMLme8A/+qNHZq50ZN0c=
    Integration/OpenStack/Cinder/VolumeAttach.class/__methods__/VmButtonInitialization.rb:
      created_on: 2015-06-06 17:08:27.278535000 Z
      updated_on: 2015-06-06 20:15:42.330398000 Z
      size: 2236
      sha1: YOAG+sNIE2YYhSy+S2+9tD9cwv8=
    Integration/OpenStack/Cinder/VolumeAttach.class/__methods__/VmButtonInitialization.yaml:
      created_on: 2015-06-06 17:08:27.278535000 Z
      updated_on: 2015-06-06 20:15:42.330398000 Z
      size: 226
      sha1: xMJMmQIy/KHZXwPDZSjEFmIBHUg=
    Integration/OpenStack/Cinder/VolumeCreate.class/__class__.yaml:
      created_on: 2015-06-06 16:07:31.685877000 Z
      updated_on: 2015-06-06 16:07:48.891259000 Z
      size: 6833
      sha1: C1otcBOmghoaXwrUmvjK34R+HqU=
    Integration/OpenStack/Cinder/VolumeCreate.class/CatalogItemInvocation.yaml:
      created_on: 2015-06-06 16:13:11.540291000 Z
      updated_on: 2015-06-06 16:13:59.552753000 Z
      size: 372
      sha1: +3SV4rvAuYdYWYueUgR5qKR0+So=
    Integration/OpenStack/Cinder/VolumeCreate.class/VmButtonInvocation.yaml:
      created_on: 2015-06-06 16:19:52.008273000 Z
      updated_on: 2015-06-06 16:20:50.212487000 Z
      size: 463
      sha1: NWKCha373FWuEFG3pQFgEhs4QzU=
    Integration/OpenStack/Cinder/VolumeCreate.class/__methods__/CatalogItemInitialization.rb:
      created_on: 2015-06-06 19:28:28.865354000 Z
      updated_on: 2015-06-06 19:31:12.315720000 Z
      size: 2858
      sha1: 3Bfu764T3ITa3sI6rQHxlrv5yt0=
    Integration/OpenStack/Cinder/VolumeCreate.class/__methods__/CatalogItemInitialization.yaml:
      created_on: 2015-06-06 19:28:28.865354000 Z
      updated_on: 2015-06-06 19:31:12.315720000 Z
      size: 205
      sha1: z22/0SIWIdjFukoppffnCeeFfxs=
    Integration/OpenStack/Cinder/VolumeCreate.class/__methods__/CreateVolume.rb:
      created_on: 2015-06-06 16:26:52.883457000 Z
      updated_on: 2015-06-06 18:38:34.703921000 Z
      size: 3796
      sha1: QglJHJ8bOB3md+7HrqUwO2HRWuA=
    Integration/OpenStack/Cinder/VolumeCreate.class/__methods__/CreateVolume.yaml:
      created_on: 2015-06-06 16:26:52.883457000 Z
      updated_on: 2015-06-06 18:38:34.703921000 Z
      size: 205
      sha1: A6Fe/IJSsKM4Rk8zAdk0rXZJ7Rs=
    Integration/OpenStack/Cinder/VolumeCreate.class/__methods__/VmButtonInitialization.rb:
      created_on: 2015-06-06 16:24:26.974299000 Z
      updated_on: 2015-06-06 17:55:33.210066000 Z
      size: 2760
      sha1: /Zul57YQVYzY+ZRiRH+QbcvVQZc=
    Integration/OpenStack/Cinder/VolumeCreate.class/__methods__/VmButtonInitialization.yaml:
      created_on: 2015-06-06 16:24:26.974299000 Z
      updated_on: 2015-06-06 17:55:33.210066000 Z
      size: 226
      sha1: xMJMmQIy/KHZXwPDZSjEFmIBHUg=
    Integration/OpenStack/Cinder/VolumeDelete.class/__class__.yaml:
      created_on: 2015-06-06 13:58:03.766209000 Z
      updated_on: 2015-06-06 13:58:03.766209000 Z
      size: 5216
      sha1: gNcH3ogmbCM0LZ3SsFZpnZjdSrQ=
    Integration/OpenStack/Cinder/VolumeDelete.class/CatalogItemInvocation.yaml:
      created_on: 2015-06-06 14:10:32.211025000 Z
      updated_on: 2015-06-06 14:10:32.211025000 Z
      size: 328
      sha1: T9VDH6rD6Ph9JkcxTyf28Ndhwn0=
    Integration/OpenStack/Cinder/VolumeDelete.class/VmButtonInvocation.yaml:
      created_on: 2015-06-06 14:12:13.310501000 Z
      updated_on: 2015-06-06 14:12:48.222721000 Z
      size: 517
      sha1: 9ZkSZjMFLTWk7PoZBx1xR2KJG9k=
    Integration/OpenStack/Cinder/VolumeDelete.class/__methods__/CatalogItemInitialization.rb:
      created_on: 2015-06-06 14:19:37.908334000 Z
      updated_on: 2015-06-06 19:28:51.392627000 Z
      size: 2501
      sha1: HPqH9DHLBKOYUGKmiHhKYPrH+Tg=
    Integration/OpenStack/Cinder/VolumeDelete.class/__methods__/CatalogItemInitialization.yaml:
      created_on: 2015-06-06 14:19:37.908334000 Z
      updated_on: 2015-06-06 19:28:51.392627000 Z
      size: 205
      sha1: z22/0SIWIdjFukoppffnCeeFfxs=
    Integration/OpenStack/Cinder/VolumeDelete.class/__methods__/DeleteVolume.rb:
      created_on: 2015-06-06 14:21:17.643835000 Z
      updated_on: 2015-06-06 19:00:54.067760000 Z
      size: 2092
      sha1: ipMy0hwPGkWs+jNOb6hdwhNql1E=
    Integration/OpenStack/Cinder/VolumeDelete.class/__methods__/DeleteVolume.yaml:
      created_on: 2015-06-06 14:21:17.643835000 Z
      updated_on: 2015-06-06 19:00:54.067760000 Z
      size: 205
      sha1: Qhj3m+72/HOghiOREzydCd2WwLA=
    Integration/OpenStack/Cinder/VolumeDelete.class/__methods__/VmButtonInitialization.rb:
      created_on: 2015-06-06 14:22:22.111150000 Z
      updated_on: 2015-06-06 15:50:08.819689000 Z
      size: 2183
      sha1: +Gk7TEDI5XWgmydioZLCMOmcVEQ=
    Integration/OpenStack/Cinder/VolumeDelete.class/__methods__/VmButtonInitialization.yaml:
      created_on: 2015-06-06 14:22:22.111150000 Z
      updated_on: 2015-06-06 15:50:08.819689000 Z
      size: 226
      sha1: xMJMmQIy/KHZXwPDZSjEFmIBHUg=
    Integration/OpenStack/Cinder/VolumeDetach.class/__class__.yaml:
      created_on: 2015-06-06 14:28:08.222173000 Z
      updated_on: 2015-06-06 14:28:23.882923000 Z
      size: 4491
      sha1: VOnB/e+wkeQgnaxi85U2Fw3TqDA=
    Integration/OpenStack/Cinder/VolumeDetach.class/VmButtonInvocation.yaml:
      created_on: 2015-06-06 14:33:11.633791000 Z
      updated_on: 2015-06-06 14:33:11.633791000 Z
      size: 293
      sha1: JHVNy/praU7hSiKP3j7Zj+3AxQo=
    Integration/OpenStack/Cinder/VolumeDetach.class/__methods__/DetachVolume.rb:
      created_on: 2015-06-06 14:37:01.046284000 Z
      updated_on: 2015-06-06 16:31:02.059117000 Z
      size: 2897
      sha1: at55/fvbVGQwRqCOE0kqf4RKxRE=
    Integration/OpenStack/Cinder/VolumeDetach.class/__methods__/DetachVolume.yaml:
      created_on: 2015-06-06 14:37:01.046284000 Z
      updated_on: 2015-06-06 16:31:02.059117000 Z
      size: 205
      sha1: DudR3SNOHZUHDJGPmKrITb6jg9M=
    Integration/OpenStack/Cinder/VolumeDetach.class/__methods__/Notify.rb:
      created_on: 2015-06-06 16:30:27.785807000 Z
      updated_on: 2015-06-06 16:35:23.193528000 Z
      size: 485
      sha1: 9lj3YR97YyX+FpM0GeTbbV5CIKM=
    Integration/OpenStack/Cinder/VolumeDetach.class/__methods__/Notify.yaml:
      created_on: 2015-06-06 16:30:27.785807000 Z
      updated_on: 2015-06-06 16:35:23.193528000 Z
      size: 186
      sha1: 2g4ZImkq8DZ8cn4q62Rn6OtlmTI=
    Integration/OpenStack/Cinder/VolumeDetach.class/__methods__/VmButtonInitialization.rb:
      created_on: 2015-06-06 14:35:25.784513000 Z
      updated_on: 2015-06-06 15:54:37.867818000 Z
      size: 2237
      sha1: U+157/x7YDVX0/BCsqcEDtiBOgo=
    Integration/OpenStack/Cinder/VolumeDetach.class/__methods__/VmButtonInitialization.yaml:
      created_on: 2015-06-06 14:35:25.784513000 Z
      updated_on: 2015-06-06 15:54:37.867818000 Z
      size: 226
      sha1: xMJMmQIy/KHZXwPDZSjEFmIBHUg=
    Integration/Amazon/__namespace__.yaml:
      created_on: 2015-06-04 03:00:54.058336000 Z
      updated_on: 2015-06-04 03:00:54.058336000 Z
      size: 158
      sha1: oUYJHhMq3LTszWRb//Ua0X6a63I=
    Integration/Amazon/EC2.class/__class__.yaml:
      created_on: 2015-06-04 03:00:54.070661000 Z
      updated_on: 2015-06-04 03:00:54.070661000 Z
      size: 549
      sha1: CWzGdjysE+vT9PiGl4dqJAEFn9A=
    Integration/Amazon/EC2.class/SyncVMTags.yaml:
      created_on: 2015-06-04 03:00:54.099753000 Z
      updated_on: 2015-06-04 03:00:54.099753000 Z
      size: 194
      sha1: 1TanMo6ftcyojMEoyJAfNZJO89k=
    Integration/Amazon/EC2.class/__methods__/syncvmtags.rb:
      created_on: 2015-06-04 03:00:54.117185000 Z
      updated_on: 2015-06-04 03:00:54.117185000 Z
      size: 3006
      sha1: Bj3/qZ8f+IFLDy6N70F5G1CA1SA=
    Integration/Amazon/EC2.class/__methods__/syncvmtags.yaml:
      created_on: 2015-06-04 03:00:54.117185000 Z
      updated_on: 2015-06-04 03:00:54.117185000 Z
      size: 209
      sha1: 0yOn0yPSNAqrBXTHmwIYfs4NzJE=
    Cloud/__namespace__.yaml:
      created_on: 2015-06-04 03:00:50.829500000 Z
      updated_on: 2015-06-04 03:00:50.829500000 Z
      size: 157
      sha1: hZQZvoWrRtQtFnubfENz7a3+Hf8=
    Cloud/VM/__namespace__.yaml:
      created_on: 2015-06-04 03:00:50.860318000 Z
      updated_on: 2015-06-04 03:00:50.860318000 Z
      size: 154
      sha1: 3RSCLo/Rm2MTjJcHQBgzB0pxtqg=
    Cloud/VM/Lifecycle.class/__class__.yaml:
      created_on: 2015-06-04 03:00:50.926046000 Z
      updated_on: 2015-06-04 03:00:50.926046000 Z
      size: 11270
      sha1: IZatLI3+pNQSu4Bs+rT815VQ+tw=
    Cloud/VM/Lifecycle.class/Provisioning.yaml:
      created_on: 2015-06-04 03:00:51.005920000 Z
      updated_on: 2015-06-04 03:00:51.005920000 Z
      size: 541
      sha1: 0hQ1oalGM6NhdfDsiF3Hdx+JmP8=
    Cloud/VM/Provisioning/__namespace__.yaml:
      created_on: 2015-06-04 03:00:51.074956000 Z
      updated_on: 2015-06-04 03:00:51.074956000 Z
      size: 164
      sha1: IfcxDJ844lczST9d/ej9/JN76u4=
    Cloud/VM/Provisioning/Email.class/__class__.yaml:
      created_on: 2015-06-04 03:00:51.093003000 Z
      updated_on: 2015-06-04 03:00:51.093003000 Z
      size: 2143
      sha1: rPSgZbInpWqwWj9sdbEg+b8A0ic=
    Cloud/VM/Provisioning/Email.class/MiqProvisionRequest_Approved.yaml:
      created_on: 2015-06-04 03:00:51.123357000 Z
      updated_on: 2015-06-04 03:00:51.123357000 Z
      size: 217
      sha1: 1tDrMwxA7yAOE8e0ex/sv5+0/fI=
    Cloud/VM/Provisioning/Email.class/MiqProvisionRequest_Denied.yaml:
      created_on: 2015-06-04 03:00:51.132498000 Z
      updated_on: 2015-06-04 03:00:51.132498000 Z
      size: 213
      sha1: /MsscH/oscwwcdK14pPwpafI/Gk=
    Cloud/VM/Provisioning/Email.class/MiqProvisionRequest_Pending.yaml:
      created_on: 2015-06-04 03:00:51.141645000 Z
      updated_on: 2015-06-04 03:00:51.141645000 Z
      size: 215
      sha1: fjiAGO5wBYvUmXIkfpvVdx2VLPM=
    Cloud/VM/Provisioning/Email.class/MiqProvision_Complete.yaml:
      created_on: 2015-06-04 03:00:51.114073000 Z
      updated_on: 2015-06-04 03:00:51.114073000 Z
      size: 203
      sha1: g3ZkPo4gFWbWQIRa1s1XHS3xyf8=
    Cloud/VM/Provisioning/Email.class/__methods__/MiqProvisionRequest_Approved.rb:
      created_on: 2015-06-04 03:00:51.156192000 Z
      updated_on: 2015-06-04 03:00:51.156192000 Z
      size: 4209
      sha1: SJxzSpQAPl8tczOJk9CVRo1sm30=
    Cloud/VM/Provisioning/Email.class/__methods__/MiqProvisionRequest_Approved.yaml:
      created_on: 2015-06-04 03:00:51.156192000 Z
      updated_on: 2015-06-04 03:00:51.156192000 Z
      size: 208
      sha1: X68TJWkxBfZpa1WSCEYvhKxjxoI=
    Cloud/VM/Provisioning/Email.class/__methods__/MiqProvisionRequest_Denied.rb:
      created_on: 2015-06-04 03:00:51.162121000 Z
      updated_on: 2015-06-04 03:00:51.162121000 Z
      size: 5155
      sha1: yeRHozDR7I4CJbCJOuV8G7/0uno=
    Cloud/VM/Provisioning/Email.class/__methods__/MiqProvisionRequest_Denied.yaml:
      created_on: 2015-06-04 03:00:51.162121000 Z
      updated_on: 2015-06-04 03:00:51.162121000 Z
      size: 206
      sha1: 015BGTOKOnFnkSEkF6YrXv5gPIE=
    Cloud/VM/Provisioning/Email.class/__methods__/MiqProvisionRequest_Pending.rb:
      created_on: 2015-06-04 03:00:51.168932000 Z
      updated_on: 2015-06-04 03:00:51.168932000 Z
      size: 5034
      sha1: /Es//TRRnn2EyLws+beeyAbR0kY=
    Cloud/VM/Provisioning/Email.class/__methods__/MiqProvisionRequest_Pending.yaml:
      created_on: 2015-06-04 03:00:51.168932000 Z
      updated_on: 2015-06-04 03:00:51.168932000 Z
      size: 207
      sha1: UuW6hx1NMXWFOqj16FhwNvI1xPc=
    Cloud/VM/Provisioning/Email.class/__methods__/MiqProvision_Complete.rb:
      created_on: 2015-06-04 03:00:51.149905000 Z
      updated_on: 2015-06-04 03:00:51.149905000 Z
      size: 4006
      sha1: EgK0VRnPfUV8F8d0cSEPdV3y/vo=
    Cloud/VM/Provisioning/Email.class/__methods__/MiqProvision_Complete.yaml:
      created_on: 2015-06-04 03:00:51.149905000 Z
      updated_on: 2015-06-04 03:00:51.149905000 Z
      size: 201
      sha1: bSZ0zKJdoi524m+pT9GG2S4wHv8=
    Cloud/VM/Provisioning/Naming.class/__class__.yaml:
      created_on: 2015-06-04 03:00:51.188133000 Z
      updated_on: 2015-06-04 03:00:51.188133000 Z
      size: 2423
      sha1: tFGNMJZJ8xlrNNcZBs79yfCP1Vs=
    Cloud/VM/Provisioning/Naming.class/default.yaml:
      created_on: 2015-06-04 03:00:51.212235000 Z
      updated_on: 2015-06-04 03:00:51.212235000 Z
      size: 172
      sha1: RHAorVejM85X82gNNlYCZQzfPRA=
    Cloud/VM/Provisioning/Naming.class/__methods__/vmname.rb:
      created_on: 2015-06-04 03:00:51.221788000 Z
      updated_on: 2015-06-04 03:00:51.221788000 Z
      size: 1889
      sha1: TTbOFQIu/DE5f6eiKMX+m9lPI80=
    Cloud/VM/Provisioning/Naming.class/__methods__/vmname.yaml:
      created_on: 2015-06-04 03:00:51.221788000 Z
      updated_on: 2015-06-04 03:00:51.221788000 Z
      size: 193
      sha1: 4DX41x9Dh/I1fAGfd/0y2oQVBFo=
    Cloud/VM/Provisioning/Profile.class/__class__.yaml:
      created_on: 2015-06-04 03:00:51.247267000 Z
      updated_on: 2015-06-04 03:00:51.247267000 Z
      size: 3727
      sha1: fv/LiDd9y4Z+hp7c0wLXlkfcfp0=
    Cloud/VM/Provisioning/Profile.class/_missing.yaml:
      created_on: 2015-06-04 03:00:51.476798000 Z
      updated_on: 2015-06-04 03:00:51.476798000 Z
      size: 274
      sha1: MWX0vcccdRgOQNVKfFLjLiFMPrE=
    Cloud/VM/Provisioning/Profile.class/EvmGroup-super_administrator.yaml:
      created_on: 2015-06-04 03:00:51.488753000 Z
      updated_on: 2015-06-04 03:00:51.488753000 Z
      size: 165
      sha1: ptVm7mw13lAaxzHhD/bCK3iV1zE=
    Cloud/VM/Provisioning/Profile.class/Yale-NUS-user_self_service.yaml:
      created_on: 2015-06-10 06:42:29.032457000 Z
      updated_on: 2015-06-10 06:42:29.032457000 Z
      size: 163
      sha1: qHalMcjn2s8YnJUMZSAbyGWfFoY=
    Cloud/VM/Provisioning/Profile.class/YaleNUS-YODA.yaml:
      created_on: 2015-06-04 03:00:51.499018000 Z
      updated_on: 2015-06-04 03:00:51.499018000 Z
      size: 254
      sha1: dbPI8PAguez8ZYho6JiJpBXjTgk=
    Cloud/VM/Provisioning/Profile.class/__methods__/get_deploy_dialog.rb:
      created_on: 2015-06-04 03:00:51.508395000 Z
      updated_on: 2015-06-04 03:00:51.508395000 Z
      size: 939
      sha1: 3arnh7GqRiCMr4U2kJ2MA+NsNwA=
    Cloud/VM/Provisioning/Profile.class/__methods__/get_deploy_dialog.yaml:
      created_on: 2015-06-04 03:00:51.508395000 Z
      updated_on: 2015-06-04 03:00:51.508395000 Z
      size: 197
      sha1: B/AsxKKpnOdIkxRZEdzENtjRaBU=
    Cloud/VM/Provisioning/Profile.class/__methods__/vm_dialog_name_prefix.rb:
      created_on: 2015-06-04 03:00:51.516152000 Z
      updated_on: 2015-06-04 05:48:12.961937000 Z
      size: 1058
      sha1: oNNZ7+h1KrAATR4nLEkUZ2/rGjE=
    Cloud/VM/Provisioning/Profile.class/__methods__/vm_dialog_name_prefix.yaml:
      created_on: 2015-06-04 03:00:51.516152000 Z
      updated_on: 2015-06-04 05:48:12.961937000 Z
      size: 201
      sha1: fFK4OX2d9VOieQXiXIJrIoYyy08=
    Cloud/VM/Provisioning/StateMachines/__namespace__.yaml:
      created_on: 2015-06-04 03:00:52.563520000 Z
      updated_on: 2015-06-04 03:00:52.563520000 Z
      size: 165
      sha1: 22eiz/w4svqadOuX6ijZPmzbScQ=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__class__.yaml:
      created_on: 2015-06-05 04:08:40.093526000 Z
      updated_on: 2015-06-05 04:08:40.093526000 Z
      size: 3164
      sha1: epnvsneQgKnDFT907rXK4kqDgyE=
    Cloud/VM/Provisioning/StateMachines/Methods.class/Add_VM_To_Service.yaml:
      created_on: 2015-06-05 06:34:50.397539000 Z
      updated_on: 2015-06-05 06:34:50.397539000 Z
      size: 195
      sha1: QpaTkuZrNa9IVP65Ve8Hcl7nlak=
    Cloud/VM/Provisioning/StateMachines/Methods.class/CheckProvisioned.yaml:
      created_on: 2015-06-05 04:08:40.126101000 Z
      updated_on: 2015-06-05 04:08:40.126101000 Z
      size: 194
      sha1: qbc0v3Fz/jOaGTtpB3yx+aX5rwg=
    Cloud/VM/Provisioning/StateMachines/Methods.class/CustomizeRequest.yaml:
      created_on: 2015-06-05 04:08:40.268378000 Z
      updated_on: 2015-06-05 04:08:40.268378000 Z
      size: 266
      sha1: iHPTHPY6qPBdtyge4EdR2oAwNn0=
    Cloud/VM/Provisioning/StateMachines/Methods.class/PostProvision.yaml:
      created_on: 2015-06-05 04:08:40.406613000 Z
      updated_on: 2015-06-05 04:08:40.406613000 Z
      size: 363
      sha1: 5s2zun4qkbDvXQ2Av1vO3v9bEgw=
    Cloud/VM/Provisioning/StateMachines/Methods.class/PreProvision.yaml:
      created_on: 2015-06-05 04:08:40.835519000 Z
      updated_on: 2015-06-05 04:08:40.835519000 Z
      size: 254
      sha1: 47Svz4H+E0hC2UJbznFrdb/17Tc=
    Cloud/VM/Provisioning/StateMachines/Methods.class/Provision.yaml:
      created_on: 2015-06-05 04:08:40.988030000 Z
      updated_on: 2015-06-05 04:08:40.988030000 Z
      size: 179
      sha1: puSOafLtkJOkP2Wt5wM9gO5OH28=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/add_vm_to_service.rb:
      created_on: 2015-06-05 06:35:42.927515000 Z
      updated_on: 2015-06-08 00:59:32.410522000 Z
      size: 6858
      sha1: DEbSHqrXtREmcKXA13savvPzk0w=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/add_vm_to_service.yaml:
      created_on: 2015-06-05 06:35:42.927515000 Z
      updated_on: 2015-06-08 00:59:32.410522000 Z
      size: 197
      sha1: DuDhpcAEbv0QAoE9K2hYViFSP7s=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/amazon_CustomizeRequest.rb:
      created_on: 2015-06-05 04:09:21.137760000 Z
      updated_on: 2015-06-09 09:08:20.499651000 Z
      size: 4284
      sha1: E7pVMwNHl+IPF7opFcWDjO76tXg=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/amazon_CustomizeRequest.yaml:
      created_on: 2015-06-05 04:09:21.137760000 Z
      updated_on: 2015-06-09 09:08:20.499651000 Z
      size: 203
      sha1: 2rF/pL9p1UmzvqpLrVGrLu5cOck=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/amazon_PostProvision.rb:
      created_on: 2015-06-05 04:09:21.276741000 Z
      updated_on: 2015-06-08 08:52:43.234673000 Z
      size: 333
      sha1: CXsR+LkezFwjwoCTpxMRJyk4U9c=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/amazon_PostProvision.yaml:
      created_on: 2015-06-05 04:09:21.276741000 Z
      updated_on: 2015-06-08 08:52:43.234673000 Z
      size: 200
      sha1: 9y28hKETSWeidW4lM3rOWp2I9Rk=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/amazon_PreProvision.rb:
      created_on: 2015-06-05 04:09:21.411151000 Z
      updated_on: 2015-06-05 04:09:21.411151000 Z
      size: 308
      sha1: 2nZgraT/z3xywBQQJBCyxFahTzc=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/amazon_PreProvision.yaml:
      created_on: 2015-06-05 04:09:21.411151000 Z
      updated_on: 2015-06-05 04:09:21.411151000 Z
      size: 199
      sha1: miAzwkxUjl39qDmp4I7kXbHNCWk=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/amazon_PreProvision_Clone_to_VM.rb:
      created_on: 2015-06-05 04:09:21.544867000 Z
      updated_on: 2015-06-05 04:09:21.544867000 Z
      size: 312
      sha1: DXUxs4XSeolpvFHTuxbkmYD9wyo=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/amazon_PreProvision_Clone_to_VM.yaml:
      created_on: 2015-06-05 04:09:21.544867000 Z
      updated_on: 2015-06-05 04:09:21.544867000 Z
      size: 211
      sha1: ivOz0Df1ULTmcK9ZGaJ/wrSryWQ=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/check_provisioned.rb:
      created_on: 2015-06-05 04:09:21.676228000 Z
      updated_on: 2015-06-05 04:09:21.676228000 Z
      size: 663
      sha1: w5OHuge+oUmm46tC9LzTZ+8MxAY=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/check_provisioned.yaml:
      created_on: 2015-06-05 04:09:21.676228000 Z
      updated_on: 2015-06-05 04:09:21.676228000 Z
      size: 197
      sha1: 6CW4pgrSrTN171vnfB6mMw67HHo=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/openstack_CustomizeRequest.rb:
      created_on: 2015-06-05 04:09:21.806843000 Z
      updated_on: 2015-06-08 08:00:25.307141000 Z
      size: 2423
      sha1: 5HUnnZgUAoGUO14h6sIHEdqApCA=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/openstack_CustomizeRequest.yaml:
      created_on: 2015-06-05 04:09:21.806843000 Z
      updated_on: 2015-06-08 08:00:25.307141000 Z
      size: 206
      sha1: 5om/OB60Tw/MT1voAzoK/wkF9D8=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/openstack_PostProvision.rb:
      created_on: 2015-06-05 04:09:21.936593000 Z
      updated_on: 2015-06-10 02:00:31.889843000 Z
      size: 676
      sha1: W4qHToG2huPqygzrnA5bkRDCvRY=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/openstack_PostProvision.yaml:
      created_on: 2015-06-05 04:09:21.936593000 Z
      updated_on: 2015-06-10 02:00:31.889843000 Z
      size: 203
      sha1: GfYDbehRKTfTzt9nmwnpVBmQ8Sk=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/openstack_PreProvision.rb:
      created_on: 2015-06-05 04:09:22.371534000 Z
      updated_on: 2015-06-05 04:09:22.371534000 Z
      size: 311
      sha1: eIRxktSJWhz7A+Th/GxKdYLQgfw=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/openstack_PreProvision.yaml:
      created_on: 2015-06-05 04:09:22.371534000 Z
      updated_on: 2015-06-05 04:09:22.371534000 Z
      size: 202
      sha1: kEFC2SWKUM9tHRvNV3JHU29NHJU=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/openstack_PreProvision_Clone_to_VM.rb:
      created_on: 2015-06-05 04:09:22.517965000 Z
      updated_on: 2015-06-05 04:09:22.517965000 Z
      size: 312
      sha1: DXUxs4XSeolpvFHTuxbkmYD9wyo=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/openstack_PreProvision_Clone_to_VM.yaml:
      created_on: 2015-06-05 04:09:22.517965000 Z
      updated_on: 2015-06-05 04:09:22.517965000 Z
      size: 214
      sha1: DiJDecR32etGdwk+u1VWwnEX/O0=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/provision.rb:
      created_on: 2015-06-05 04:09:22.658405000 Z
      updated_on: 2015-06-05 04:09:22.658405000 Z
      size: 97
      sha1: STJJVJHS2mxRB8mm56MBg+x/sN4=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/provision.yaml:
      created_on: 2015-06-05 04:09:22.658405000 Z
      updated_on: 2015-06-05 04:09:22.658405000 Z
      size: 189
      sha1: WVU9/VTJ9Bfq6yccG/MVI1+Ldmw=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/scan.rb:
      created_on: 2015-06-05 04:09:22.796258000 Z
      updated_on: 2015-06-05 04:09:22.796258000 Z
      size: 238
      sha1: KeJ3RQZaslWby+RpfNaCDTyDtLw=
    Cloud/VM/Provisioning/StateMachines/Methods.class/__methods__/scan.yaml:
      created_on: 2015-06-05 04:09:22.796258000 Z
      updated_on: 2015-06-05 04:09:22.796258000 Z
      size: 184
      sha1: GrEDN97J92TPjNTnFw8KZuG4eEQ=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__class__.yaml:
      created_on: 2015-06-04 03:00:52.590628000 Z
      updated_on: 2015-06-05 04:08:13.171922000 Z
      size: 3172
      sha1: H/r2fRVw8cAgrwK6msLM9lJ5u58=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/Add_VM_To_Service.yaml:
      created_on: 2015-06-04 03:00:52.620006000 Z
      updated_on: 2015-06-04 03:00:52.620006000 Z
      size: 212
      sha1: eoaOZZdmjuBLxYldx5qhssYGqA0=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/AssignFloatingIP.yaml:
      created_on: 2015-06-04 03:00:52.630987000 Z
      updated_on: 2015-06-04 03:00:52.630987000 Z
      size: 284
      sha1: uwTk9ztDaD6D4VC2AcO0wa68UNg=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/CheckProvisioned.yaml:
      created_on: 2015-06-04 03:00:52.643010000 Z
      updated_on: 2015-06-04 03:00:52.643010000 Z
      size: 194
      sha1: qbc0v3Fz/jOaGTtpB3yx+aX5rwg=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/CreateNewDisk.yaml:
      created_on: 2015-06-04 03:00:52.654084000 Z
      updated_on: 2015-06-04 03:00:52.654084000 Z
      size: 272
      sha1: 9eh9YSOQ+glMxqGrX0s4GcCSbhg=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/CustomizeRequest.yaml:
      created_on: 2015-06-04 03:00:52.666326000 Z
      updated_on: 2015-06-04 03:00:52.666326000 Z
      size: 266
      sha1: iHPTHPY6qPBdtyge4EdR2oAwNn0=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/PostProvision.yaml:
      created_on: 2015-06-04 03:00:52.678447000 Z
      updated_on: 2015-06-04 03:00:52.678447000 Z
      size: 257
      sha1: WXEfeK7sHVk7Pgvqv5e6/RuxgX4=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/PreProvision.yaml:
      created_on: 2015-06-04 03:00:52.690543000 Z
      updated_on: 2015-06-04 03:00:52.690543000 Z
      size: 254
      sha1: 47Svz4H+E0hC2UJbznFrdb/17Tc=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/Provision.yaml:
      created_on: 2015-06-04 03:00:52.702202000 Z
      updated_on: 2015-06-04 03:00:52.702202000 Z
      size: 179
      sha1: puSOafLtkJOkP2Wt5wM9gO5OH28=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/ReleaseFloatingIP.yaml:
      created_on: 2015-06-04 03:00:52.713051000 Z
      updated_on: 2015-06-04 03:00:52.713051000 Z
      size: 288
      sha1: TUhBY3DX5kJGzW6hlMbaBAEzsPc=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/add_vm_to_service.rb:
      created_on: 2015-06-04 03:00:52.724582000 Z
      updated_on: 2015-06-04 03:00:52.724582000 Z
      size: 6688
      sha1: c5i3us6Z5djMy1SEbHf+yP+NLNI=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/add_vm_to_service.yaml:
      created_on: 2015-06-04 03:00:52.724582000 Z
      updated_on: 2015-06-04 03:00:52.724582000 Z
      size: 197
      sha1: DuDhpcAEbv0QAoE9K2hYViFSP7s=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/amazon_CustomizeRequest.rb:
      created_on: 2015-06-04 03:00:52.732957000 Z
      updated_on: 2015-06-05 03:59:19.169011000 Z
      size: 3520
      sha1: 1KBMp9G7/bgc6PrdyPzQW4+Z+20=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/amazon_CustomizeRequest.yaml:
      created_on: 2015-06-04 03:00:52.732957000 Z
      updated_on: 2015-06-05 03:59:19.169011000 Z
      size: 203
      sha1: 2rF/pL9p1UmzvqpLrVGrLu5cOck=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/amazon_PostProvision.rb:
      created_on: 2015-06-04 03:00:52.741307000 Z
      updated_on: 2015-06-04 03:00:52.741307000 Z
      size: 322
      sha1: X9MD+FDstA155jA1KxUuJqnKm8Y=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/amazon_PostProvision.yaml:
      created_on: 2015-06-04 03:00:52.741307000 Z
      updated_on: 2015-06-04 03:00:52.741307000 Z
      size: 200
      sha1: 9y28hKETSWeidW4lM3rOWp2I9Rk=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/amazon_PreProvision.rb:
      created_on: 2015-06-04 03:00:52.749401000 Z
      updated_on: 2015-06-04 03:00:52.749401000 Z
      size: 308
      sha1: 2nZgraT/z3xywBQQJBCyxFahTzc=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/amazon_PreProvision.yaml:
      created_on: 2015-06-04 03:00:52.749401000 Z
      updated_on: 2015-06-04 03:00:52.749401000 Z
      size: 199
      sha1: miAzwkxUjl39qDmp4I7kXbHNCWk=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/amazon_PreProvision_Clone_to_VM.rb:
      created_on: 2015-06-04 03:00:52.757484000 Z
      updated_on: 2015-06-04 03:00:52.757484000 Z
      size: 312
      sha1: DXUxs4XSeolpvFHTuxbkmYD9wyo=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/amazon_PreProvision_Clone_to_VM.yaml:
      created_on: 2015-06-04 03:00:52.757484000 Z
      updated_on: 2015-06-04 03:00:52.757484000 Z
      size: 211
      sha1: ivOz0Df1ULTmcK9ZGaJ/wrSryWQ=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/check_provisioned.rb:
      created_on: 2015-06-04 03:00:52.765581000 Z
      updated_on: 2015-06-04 03:46:24.544538000 Z
      size: 703
      sha1: BejxjbQboN0Ddp6zEecYBNGHfUE=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/check_provisioned.yaml:
      created_on: 2015-06-04 03:00:52.765581000 Z
      updated_on: 2015-06-04 03:46:24.544538000 Z
      size: 197
      sha1: 6CW4pgrSrTN171vnfB6mMw67HHo=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/openstack_AssignFloatingIP.rb:
      created_on: 2015-06-04 03:00:52.773927000 Z
      updated_on: 2015-06-04 03:00:52.773927000 Z
      size: 2387
      sha1: Qn3h4A2qkOOfydypQi7iD0S/QWw=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/openstack_AssignFloatingIP.yaml:
      created_on: 2015-06-04 03:00:52.773927000 Z
      updated_on: 2015-06-04 03:00:52.773927000 Z
      size: 206
      sha1: sP15d1CRd67BUzEcfbLbLzs+iY4=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/openstack_CreateNewDisk.rb:
      created_on: 2015-06-04 03:00:52.782706000 Z
      updated_on: 2015-06-04 03:00:52.782706000 Z
      size: 2636
      sha1: 6d+YfEfpJ6mq+N2MH/P5fW2ctr4=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/openstack_CreateNewDisk.yaml:
      created_on: 2015-06-04 03:00:52.782706000 Z
      updated_on: 2015-06-04 03:00:52.782706000 Z
      size: 203
      sha1: KD4EwXVbmjix9DuiUZccqIrSooE=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/openstack_CustomizeRequest.rb:
      created_on: 2015-06-04 03:00:52.791384000 Z
      updated_on: 2015-06-04 03:00:52.791384000 Z
      size: 2423
      sha1: 5HUnnZgUAoGUO14h6sIHEdqApCA=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/openstack_CustomizeRequest.yaml:
      created_on: 2015-06-04 03:00:52.791384000 Z
      updated_on: 2015-06-04 03:00:52.791384000 Z
      size: 206
      sha1: 5om/OB60Tw/MT1voAzoK/wkF9D8=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/openstack_ReleaseFloatingIP.rb:
      created_on: 2015-06-04 03:00:52.799620000 Z
      updated_on: 2015-06-04 03:00:52.799620000 Z
      size: 2245
      sha1: lzVcwDgfEElet7VYTm829LX1580=
    Cloud/VM/Provisioning/StateMachines/Methods-Archive.class/__methods__/openstack_ReleaseFloatingIP.yaml:
      created_on: 2015-06-04 03:00:52.799620000 Z
      updated_on: 2015-06-04 03:00:52.799620000 Z
      size: 207
      sha1: SP/1XS/vROUE8jE5RA+QyQk/KkE=
    Cloud/VM/Provisioning/StateMachines/OpenStackBuildRequest.class/__class__.yaml:
      created_on: 2015-06-04 03:00:52.822425000 Z
      updated_on: 2015-06-04 03:00:52.822425000 Z
      size: 2954
      sha1: iHnHL2UqMB9cE7NUcSO6Uv9+GTo=
    Cloud/VM/Provisioning/StateMachines/OpenStackBuildRequest.class/OpenStackBuildRequest.yaml:
      created_on: 2015-06-04 03:00:52.848591000 Z
      updated_on: 2015-06-04 03:00:52.848591000 Z
      size: 231
      sha1: BlEtxfwuYuFyafjtdzMVC/Ce6qw=
    Cloud/VM/Provisioning/StateMachines/OpenStackBuildRequest.class/__methods__/OpenStackBuildRequest.rb:
      created_on: 2015-06-04 03:00:52.859391000 Z
      updated_on: 2015-06-10 09:23:20.411925000 Z
      size: 7083
      sha1: WAFQGWlUM76Tw/bbn7E84I2LOt0=
    Cloud/VM/Provisioning/StateMachines/OpenStackBuildRequest.class/__methods__/OpenStackBuildRequest.yaml:
      created_on: 2015-06-04 03:00:52.859391000 Z
      updated_on: 2015-06-10 09:23:20.411925000 Z
      size: 224
      sha1: weEGugC5Had/fmDFKvfJSJnfgIo=
    Cloud/VM/Provisioning/StateMachines/ProvisionRequestApproval.class/__class__.yaml:
      created_on: 2015-06-10 09:05:24.946068000 Z
      updated_on: 2015-06-10 09:05:24.946068000 Z
      size: 2528
      sha1: Y9Q7Y68GWtJZg1WHbCiPZvMzHV8=
    Cloud/VM/Provisioning/StateMachines/ProvisionRequestApproval.class/Default.yaml:
      created_on: 2015-06-10 09:05:24.971257000 Z
      updated_on: 2015-06-10 09:05:24.971257000 Z
      size: 171
      sha1: fmML7p5vju3jSKsODfIpzPHOp+8=
    Cloud/VM/Provisioning/StateMachines/VMProvision_VM.class/__class__.yaml:
      created_on: 2015-06-04 03:00:52.901529000 Z
      updated_on: 2015-06-04 03:00:52.901529000 Z
      size: 10583
      sha1: 96JfN9NVeRdqH+sy9ggS4zupcIU=
    Cloud/VM/Provisioning/StateMachines/VMProvision_VM.class/OpenStack_template.yaml:
      created_on: 2015-06-04 03:38:17.816975000 Z
      updated_on: 2015-06-04 03:38:49.690995000 Z
      size: 721
      sha1: Xi4zMzgpy6J+yS6BYCU0PeDc5+k=
    Cloud/VM/Provisioning/StateMachines/VMProvision_VM.class/amazon_template.yaml:
      created_on: 2015-06-04 03:00:52.954260000 Z
      updated_on: 2015-06-04 03:00:52.954260000 Z
      size: 620
      sha1: BHvqbrPNQoOkPNvodJzJdfD0MEA=
    Cloud/VM/Provisioning/StateMachines/VMProvision_VM.class/clone_to_vm.yaml:
      created_on: 2015-06-04 03:00:52.969782000 Z
      updated_on: 2015-06-04 03:00:52.969782000 Z
      size: 507
      sha1: RyAGGaGBDF+SB1xXx/SPu1g4w9A=
    Cloud/VM/Provisioning/StateMachines/VMProvision_VM.class/template.yaml:
      created_on: 2015-06-04 03:00:52.983630000 Z
      updated_on: 2015-06-04 03:00:52.983630000 Z
      size: 348
      sha1: /ds41d57T1oFv99ZsgDftmd6T1g=
    Cloud/VM/Provisioning/StateMachines/VMProvision_VM.class/__methods__/update_provision_status.rb:
      created_on: 2015-06-04 03:00:52.997144000 Z
      updated_on: 2015-06-04 03:00:52.997144000 Z
      size: 275
      sha1: u/cA913gkYYm81AEE+2PzXei1Fk=
    Cloud/VM/Provisioning/StateMachines/VMProvision_VM.class/__methods__/update_provision_status.yaml:
      created_on: 2015-06-04 03:00:52.997144000 Z
      updated_on: 2015-06-04 03:00:52.997144000 Z
      size: 556
      sha1: iwFS4idZ4RvB6MfKArwHDmhHn7g=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/__namespace__.yaml:
      created_on: 2015-06-05 03:11:10.032654000 Z
      updated_on: 2015-06-05 03:11:10.032654000 Z
      size: 173
      sha1: 5L6h3+80U7CBMOvSU12sSHXUvSA=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Attach.class/__class__.yaml:
      created_on: 2015-06-07 03:42:55.785821000 Z
      updated_on: 2015-06-07 03:42:55.785821000 Z
      size: 1013
      sha1: 7CZkIjO2Lh0vDwZNwLCtmP4pdVU=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Attach.class/AWS-EBS-Attach-Instance.yaml:
      created_on: 2015-06-07 03:42:55.804368000 Z
      updated_on: 2015-06-07 03:42:55.804368000 Z
      size: 306
      sha1: uzH5LgnkSo5jKBnJTc/mTQ7ZTNA=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Attach.class/__methods__/attach_ebs.rb:
      created_on: 2015-06-07 03:43:26.024505000 Z
      updated_on: 2015-06-07 04:02:05.122264000 Z
      size: 3531
      sha1: 7y3G+DysYwo9mqW0Zcbf32IpqqA=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Attach.class/__methods__/attach_ebs.yaml:
      created_on: 2015-06-07 03:43:26.024505000 Z
      updated_on: 2015-06-07 04:02:05.122264000 Z
      size: 219
      sha1: kj/rJcjxbKyadqtqolLIWHJXwTY=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Attach.class/__methods__/send_email.rb:
      created_on: 2015-06-07 03:43:26.062883000 Z
      updated_on: 2015-06-07 03:43:26.062883000 Z
      size: 177
      sha1: AiSsGHkH9Fcj6x6cJC/KiAkRgr4=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Attach.class/__methods__/send_email.yaml:
      created_on: 2015-06-07 03:43:26.062883000 Z
      updated_on: 2015-06-07 03:43:26.062883000 Z
      size: 200
      sha1: BPwNTaFFH5HBmXbNUF4nhtTmM3U=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Create.class/__class__.yaml:
      created_on: 2015-06-07 02:24:27.250904000 Z
      updated_on: 2015-06-07 02:24:27.250904000 Z
      size: 941
      sha1: WLac1z/x0XHgaWyTKuLYIwOUu2s=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Create.class/create_attach_ebs_button.yaml:
      created_on: 2015-06-07 02:26:34.296942000 Z
      updated_on: 2015-06-07 02:26:34.296942000 Z
      size: 229
      sha1: XaygQc0Y4dhOCWcf3xCj56anTR4=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Create.class/create_ebs.yaml:
      created_on: 2015-06-07 02:26:54.554513000 Z
      updated_on: 2015-06-07 02:26:54.554513000 Z
      size: 194
      sha1: Gn6dwStR4jOIl7eZXUBeU0Xp6ew=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Create.class/__methods__/create_attach_ebs_button.rb:
      created_on: 2015-06-07 02:27:15.488686000 Z
      updated_on: 2015-06-07 02:27:56.376575000 Z
      size: 4819
      sha1: smaEDR5iK3JlHQcBYWkp1LBAw2M=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Create.class/__methods__/create_attach_ebs_button.yaml:
      created_on: 2015-06-07 02:27:15.488686000 Z
      updated_on: 2015-06-07 02:27:56.376575000 Z
      size: 204
      sha1: C1y+j4i+r0JQhEXbl0yHnCcYyaM=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Create.class/__methods__/create_ebs_volume.rb:
      created_on: 2015-06-07 02:28:39.910406000 Z
      updated_on: 2015-06-08 03:04:14.265134000 Z
      size: 2353
      sha1: Y/xDpBGAhohK3BiZ3IS5Sk88N2Y=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Create.class/__methods__/create_ebs_volume.yaml:
      created_on: 2015-06-07 02:28:39.910406000 Z
      updated_on: 2015-06-08 03:04:14.265134000 Z
      size: 197
      sha1: Q83aS3hBaFVxXNThhs+mIr2YUgs=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Delete.class/__class__.yaml:
      created_on: 2015-06-07 04:23:45.307547000 Z
      updated_on: 2015-06-07 04:23:45.307547000 Z
      size: 982
      sha1: rApioFhHNNt0B3C+pS/N9YhJcNY=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Delete.class/AWS-EBS-Delete.yaml:
      created_on: 2015-06-07 04:24:20.892329000 Z
      updated_on: 2015-06-07 04:24:20.892329000 Z
      size: 225
      sha1: +rDUzGKHm65o1Rwo75RjcNC4bc4=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Delete.class/AWS-EBS-Delete-Button.yaml:
      created_on: 2015-06-07 04:24:20.850778000 Z
      updated_on: 2015-06-07 04:24:20.850778000 Z
      size: 258
      sha1: HutMhAVLDsO/WMmMxlXcuPJy4ew=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Delete.class/__methods__/delete_ebs.rb:
      created_on: 2015-06-07 04:24:50.700873000 Z
      updated_on: 2015-06-08 03:59:51.143662000 Z
      size: 2279
      sha1: 9u9Gpg1XECBxo7/WjGXYb+8WoQU=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Delete.class/__methods__/delete_ebs.yaml:
      created_on: 2015-06-07 04:24:50.700873000 Z
      updated_on: 2015-06-08 03:59:51.143662000 Z
      size: 207
      sha1: Ezz/RvizSMPrh2gU1HFbFW4B1es=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Delete.class/__methods__/delete_ebs_button.rb:
      created_on: 2015-06-07 04:24:50.663182000 Z
      updated_on: 2015-06-07 04:24:50.663182000 Z
      size: 2814
      sha1: qbVPhpL87kKOMIKGcoK21VjftsE=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Delete.class/__methods__/delete_ebs_button.yaml:
      created_on: 2015-06-07 04:24:50.663182000 Z
      updated_on: 2015-06-07 04:24:50.663182000 Z
      size: 221
      sha1: VPxI6LicmLuNTi2fXQTKp1teqlo=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Detach.class/__class__.yaml:
      created_on: 2015-06-07 03:28:50.343865000 Z
      updated_on: 2015-06-07 03:28:50.343865000 Z
      size: 556
      sha1: zflWSzbRM7sYBb3N+mNdrPg1EE8=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Detach.class/Detach-EBS.yaml:
      created_on: 2015-06-07 03:29:13.616757000 Z
      updated_on: 2015-06-07 03:29:13.616757000 Z
      size: 187
      sha1: jnOnPTQiIkpKJjdl5lQ0XLrhM4E=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Detach.class/__methods__/detach_ebs.rb:
      created_on: 2015-06-07 03:33:09.197363000 Z
      updated_on: 2015-06-07 03:33:09.197363000 Z
      size: 2419
      sha1: 77/ybI70fnY9y79rJSWqehiOXlA=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/AWS-EBS-Detach.class/__methods__/detach_ebs.yaml:
      created_on: 2015-06-07 03:33:09.197363000 Z
      updated_on: 2015-06-07 03:33:09.197363000 Z
      size: 190
      sha1: 66qyJ7sDtufHetPgK3wHRWiuKQA=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/aws_provision_instance_state_machine.class/__class__.yaml:
      created_on: 2015-06-05 03:22:40.731132000 Z
      updated_on: 2015-06-05 03:22:40.731132000 Z
      size: 1004
      sha1: lAMODn3EHAsmhpYS+DI2PoJa8vI=
    Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/aws_provision_instance_state_machine.class/aws_provision_instance.yaml:
      created_on: 2015-06-05 03:23:11.693675000 Z
      updated_on: 2015-06-05 03:23:11.693675000 Z
      size: 216
      sha1: WwstgUTthJNsa59LdQ7sP+HFTRI=
    ? Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/aws_provision_instance_state_machine.class/__methods__/amazon_build_request.rb
    : created_on: 2015-06-05 03:23:29.058298000 Z
      updated_on: 2015-06-10 03:56:33.212934000 Z
      size: 6949
      sha1: OJRf11gqkixvUjWmQxYKHYD9wEc=
    ? Cloud/VM/Provisioning/StateMachines/Yale-NUS-AWS-Services/aws_provision_instance_state_machine.class/__methods__/amazon_build_request.yaml
    : created_on: 2015-06-05 03:23:29.058298000 Z
      updated_on: 2015-06-10 03:56:33.212934000 Z
      size: 200
      sha1: HdRApklp9jqetUp25j6NsPXSWxc=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/__namespace__.yaml:
      created_on: 2015-06-04 03:00:53.085919000 Z
      updated_on: 2015-06-07 04:25:11.543155000 Z
      size: 172
      sha1: sOEVTXdeY+iZ9e/FIKs1OqoKXKI=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Attach.class/__class__.yaml:
      created_on: 2015-06-04 03:00:53.103878000 Z
      updated_on: 2015-06-04 03:00:53.103878000 Z
      size: 1864
      sha1: MCwSxy2S7YmQnN551R9P8QeZOto=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Attach.class/AWS-EBS-Attach-Instance.yaml:
      created_on: 2015-06-04 03:00:53.123325000 Z
      updated_on: 2015-06-04 03:00:53.123325000 Z
      size: 306
      sha1: uzH5LgnkSo5jKBnJTc/mTQ7ZTNA=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Attach.class/__methods__/attach_ebs.rb:
      created_on: 2015-06-04 03:00:53.134070000 Z
      updated_on: 2015-06-07 03:59:57.509461000 Z
      size: 3531
      sha1: 7y3G+DysYwo9mqW0Zcbf32IpqqA=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Attach.class/__methods__/attach_ebs.yaml:
      created_on: 2015-06-04 03:00:53.134070000 Z
      updated_on: 2015-06-07 03:59:57.509461000 Z
      size: 219
      sha1: kj/rJcjxbKyadqtqolLIWHJXwTY=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Attach.class/__methods__/send_email.rb:
      created_on: 2015-06-04 03:00:53.141719000 Z
      updated_on: 2015-06-04 03:00:53.141719000 Z
      size: 177
      sha1: AiSsGHkH9Fcj6x6cJC/KiAkRgr4=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Attach.class/__methods__/send_email.yaml:
      created_on: 2015-06-04 03:00:53.141719000 Z
      updated_on: 2015-06-04 03:00:53.141719000 Z
      size: 200
      sha1: BPwNTaFFH5HBmXbNUF4nhtTmM3U=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Create.class/__class__.yaml:
      created_on: 2015-06-04 03:00:53.159474000 Z
      updated_on: 2015-06-04 03:00:53.159474000 Z
      size: 989
      sha1: YHtjvfqR4bu/QPwRH+PyXOAlKyU=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Create.class/AWS-EBS-Create.yaml:
      created_on: 2015-06-04 03:00:53.190988000 Z
      updated_on: 2015-06-04 03:00:53.190988000 Z
      size: 229
      sha1: IXUfTxPAFcFaq7aYKnS3sqrI3w0=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Create.class/AWS-EBS-Create-Attach-Button.yaml:
      created_on: 2015-06-04 03:00:53.180883000 Z
      updated_on: 2015-06-04 03:00:53.180883000 Z
      size: 300
      sha1: Ttzbat5wBzzMV9x/CEv0FJs5lR4=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Create.class/__methods__/create_attach_ebs_button.rb:
      created_on: 2015-06-04 03:00:53.200565000 Z
      updated_on: 2015-06-04 03:00:53.200565000 Z
      size: 4957
      sha1: yIwPpH71Ez97F+u/3bLFGNwi+uU=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Create.class/__methods__/create_attach_ebs_button.yaml:
      created_on: 2015-06-04 03:00:53.200565000 Z
      updated_on: 2015-06-04 03:00:53.200565000 Z
      size: 235
      sha1: ZOmsp/7ZdMCI61MZxwJw/vOgvmM=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Create.class/__methods__/create_ebs.rb:
      created_on: 2015-06-04 03:00:53.208213000 Z
      updated_on: 2015-06-04 03:00:53.208213000 Z
      size: 2243
      sha1: 3SgVlDTVoTuHXTaGA9sNwfSV7Yk=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Create.class/__methods__/create_ebs.yaml:
      created_on: 2015-06-04 03:00:53.208213000 Z
      updated_on: 2015-06-04 03:00:53.208213000 Z
      size: 211
      sha1: A76RPWWxzBHLcla7sSaGR9jx9Vc=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Delete.class/__class__.yaml:
      created_on: 2015-06-04 03:00:53.226375000 Z
      updated_on: 2015-06-04 03:00:53.226375000 Z
      size: 2244
      sha1: jBbIWvcj+izf1MD+KCASsItSbCc=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Delete.class/AWS-EBS-Delete.yaml:
      created_on: 2015-06-04 03:00:53.258433000 Z
      updated_on: 2015-06-04 03:00:53.258433000 Z
      size: 225
      sha1: +rDUzGKHm65o1Rwo75RjcNC4bc4=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Delete.class/AWS-EBS-Delete-Button.yaml:
      created_on: 2015-06-04 03:00:53.248201000 Z
      updated_on: 2015-06-04 03:00:53.248201000 Z
      size: 258
      sha1: HutMhAVLDsO/WMmMxlXcuPJy4ew=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Delete.class/__methods__/delete_ebs.rb:
      created_on: 2015-06-04 03:00:53.268053000 Z
      updated_on: 2015-06-04 03:00:53.268053000 Z
      size: 2148
      sha1: 2vFLE4ubF2Dugcjk0MbIzoW4fUA=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Delete.class/__methods__/delete_ebs.yaml:
      created_on: 2015-06-04 03:00:53.268053000 Z
      updated_on: 2015-06-04 03:00:53.268053000 Z
      size: 207
      sha1: Ezz/RvizSMPrh2gU1HFbFW4B1es=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Delete.class/__methods__/delete_ebs_button.rb:
      created_on: 2015-06-04 03:00:53.275631000 Z
      updated_on: 2015-06-04 03:00:53.275631000 Z
      size: 2814
      sha1: qbVPhpL87kKOMIKGcoK21VjftsE=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Delete.class/__methods__/delete_ebs_button.yaml:
      created_on: 2015-06-04 03:00:53.275631000 Z
      updated_on: 2015-06-04 03:00:53.275631000 Z
      size: 221
      sha1: VPxI6LicmLuNTi2fXQTKp1teqlo=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Detach.class/__class__.yaml:
      created_on: 2015-06-04 03:00:53.291962000 Z
      updated_on: 2015-06-04 03:00:53.291962000 Z
      size: 1874
      sha1: nOIWW3HAM+uze2/m4DPqRIU8zSs=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Detach.class/detach-ebs.yaml:
      created_on: 2015-06-04 03:00:53.310926000 Z
      updated_on: 2015-06-07 03:22:49.754358000 Z
      size: 221
      sha1: QRcQ9ep3ilyZoEU3VU4XG4EjXmU=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Detach.class/__methods__/detach_ebs.rb:
      created_on: 2015-06-04 03:00:53.320751000 Z
      updated_on: 2015-06-04 03:00:53.320751000 Z
      size: 2507
      sha1: 30TIrHdy0WxsCfhaFHPt8q3KgNI=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-EBS-Detach.class/__methods__/detach_ebs.yaml:
      created_on: 2015-06-04 03:00:53.320751000 Z
      updated_on: 2015-06-04 03:00:53.320751000 Z
      size: 206
      sha1: QlvyhpvWVF/fbkvZkdb+QS7WlWY=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/__class__.yaml:
      created_on: 2015-06-04 03:00:53.344855000 Z
      updated_on: 2015-06-04 03:00:53.344855000 Z
      size: 3542
      sha1: KF3JSjK7UwVSef6TIH1IEKK7BZU=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/ProvisionS3Bucket.yaml:
      created_on: 2015-06-04 03:00:53.373192000 Z
      updated_on: 2015-06-04 03:00:53.373192000 Z
      size: 370
      sha1: jor6R7INItNcFhRDfiUNFqBYx7s=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/__methods__/aws_s3_error.rb:
      created_on: 2015-06-04 03:00:53.384245000 Z
      updated_on: 2015-06-04 03:00:53.384245000 Z
      size: 258
      sha1: /ksFTwxgVFolt0SK+yKotJ2iMQc=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/__methods__/aws_s3_error.yaml:
      created_on: 2015-06-04 03:00:53.384245000 Z
      updated_on: 2015-06-04 03:00:53.384245000 Z
      size: 209
      sha1: ZH4vpWGqYwelKyh/GRk6fqYX+8Y=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/__methods__/create_s3_bucket.rb:
      created_on: 2015-06-04 03:00:53.392003000 Z
      updated_on: 2015-06-04 03:00:53.392003000 Z
      size: 2365
      sha1: E1QcydEwm394yCtzBSHjRp0IonE=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/__methods__/create_s3_bucket.yaml:
      created_on: 2015-06-04 03:00:53.392003000 Z
      updated_on: 2015-06-04 03:00:53.392003000 Z
      size: 216
      sha1: JQ4ZReVt7SmILVMpNohPIyf6eN8=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/__methods__/send_email.rb:
      created_on: 2015-06-04 03:00:53.399982000 Z
      updated_on: 2015-06-04 03:00:53.399982000 Z
      size: 3143
      sha1: acDVSRU0GJUyXLyuSE8iLhyGRVw=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/__methods__/send_email.yaml:
      created_on: 2015-06-04 03:00:53.399982000 Z
      updated_on: 2015-06-04 03:00:53.399982000 Z
      size: 216
      sha1: W8BNrQ38smaAGO4NhGl+f1B4Bsk=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/__methods__/validate_bucket_name.rb:
      created_on: 2015-06-04 03:00:53.407880000 Z
      updated_on: 2015-06-04 03:00:53.407880000 Z
      size: 2601
      sha1: tndDrlz0JfYf58G6Bfh5OotN9BU=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/__methods__/validate_bucket_name.yaml:
      created_on: 2015-06-04 03:00:53.407880000 Z
      updated_on: 2015-06-04 03:00:53.407880000 Z
      size: 227
      sha1: eGw+xmsXp933sXWcw0bzL/kce/k=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/__methods__/verify_s3_bucket.rb:
      created_on: 2015-06-04 03:00:53.415810000 Z
      updated_on: 2015-06-04 03:00:53.415810000 Z
      size: 1541
      sha1: uWS0LGkFRn+yJ2ty9BRjqHhSGtA=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/AWS-S3-StateMachine.class/__methods__/verify_s3_bucket.yaml:
      created_on: 2015-06-04 03:00:53.415810000 Z
      updated_on: 2015-06-04 03:00:53.415810000 Z
      size: 228
      sha1: U46bRnQzYEyh0Xm65hXcrOEJ5RE=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/add_keypair.class/__class__.yaml:
      created_on: 2015-06-04 03:00:53.435406000 Z
      updated_on: 2015-06-04 03:00:53.435406000 Z
      size: 2663
      sha1: cWQdNhLNutVlXqVHzwo9Xeth91c=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/add_keypair.class/add_keypair.yaml:
      created_on: 2015-06-04 03:00:53.458596000 Z
      updated_on: 2015-06-04 03:00:53.458596000 Z
      size: 247
      sha1: 3buqF++qDO67GJ0sxTsEoFxA0+E=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/add_keypair.class/remove_keypair.yaml:
      created_on: 2015-06-04 03:00:53.468660000 Z
      updated_on: 2015-06-04 03:00:53.468660000 Z
      size: 293
      sha1: MDgKoFe9N6dHrn1bKQxkYl8k8wc=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/add_keypair.class/__methods__/error_keypair.rb:
      created_on: 2015-06-04 03:00:53.479056000 Z
      updated_on: 2015-06-04 03:00:53.479056000 Z
      size: 1281
      sha1: EstSL9T6Cb/z3dYqvOb36uO7rlk=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/add_keypair.class/__methods__/error_keypair.yaml:
      created_on: 2015-06-04 03:00:53.479056000 Z
      updated_on: 2015-06-04 03:00:53.479056000 Z
      size: 206
      sha1: az/A6wv4qNepXjN+4rWTBagYQWk=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/add_keypair.class/__methods__/maintain_keypair.rb:
      created_on: 2015-06-04 03:00:53.488182000 Z
      updated_on: 2015-06-04 03:00:53.488182000 Z
      size: 3226
      sha1: xPvKdgRe3QKkklzuUg2VhyqZNMY=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/add_keypair.class/__methods__/maintain_keypair.yaml:
      created_on: 2015-06-04 03:00:53.488182000 Z
      updated_on: 2015-06-04 03:00:53.488182000 Z
      size: 212
      sha1: oeZsxaeNKiA4O0BrYnEuA0HYqVw=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/aws_provision_instance_state_machine.class/__class__.yaml:
      created_on: 2015-06-04 03:00:53.504800000 Z
      updated_on: 2015-06-04 03:00:53.504800000 Z
      size: 654
      sha1: rEQAWo4Bn/CTHN6ZvmHcx/sagOg=
    Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/aws_provision_instance_state_machine.class/aws_provision_instance.yaml:
      created_on: 2015-06-04 03:00:53.523851000 Z
      updated_on: 2015-06-04 03:00:53.523851000 Z
      size: 234
      sha1: 9VfZNleL+pQrmEpSTC0QGlyQ098=
    ? Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/aws_provision_instance_state_machine.class/__methods__/amazon_build_request.rb
    : created_on: 2015-06-04 03:00:53.534154000 Z
      updated_on: 2015-06-04 03:00:53.534154000 Z
      size: 6715
      sha1: 83YbWnBq11mKMjGp9mdHv4zR3TM=
    ? Cloud/VM/Provisioning/StateMachines/AWS-Services-Archive/aws_provision_instance_state_machine.class/__methods__/amazon_build_request.yaml
    : created_on: 2015-06-04 03:00:53.534154000 Z
      updated_on: 2015-06-04 03:00:53.534154000 Z
      size: 217
      sha1: gugMeGs6haZMbPtA0xrYtLwJzII=
    Cloud/VM/Provisioning/Methods/__namespace__.yaml:
      created_on: 2015-06-04 03:00:51.560520000 Z
      updated_on: 2015-06-04 03:00:51.560520000 Z
      size: 159
      sha1: IQks2nLAFQvEIHO2xi/RL2p0xqE=
    Cloud/VM/Provisioning/Methods/Emails.class/__class__.yaml:
      created_on: 2015-06-04 03:00:51.574425000 Z
      updated_on: 2015-06-04 03:00:51.574425000 Z
      size: 928
      sha1: SNCaELiy9IT4eT1UYFp4q7d2Y4A=
    Cloud/VM/Provisioning/Methods/Emails.class/Email_Owner.yaml:
      created_on: 2015-06-04 03:00:51.585876000 Z
      updated_on: 2015-06-04 03:00:51.585876000 Z
      size: 148
      sha1: AwkUtVLAUpxX1nNWUWmlzwDQug4=
    Cloud/VM/Provisioning/Methods/Emails.class/__methods__/Email_Owner.rb:
      created_on: 2015-06-04 03:00:51.602537000 Z
      updated_on: 2015-06-04 03:00:51.602537000 Z
      size: 14484
      sha1: tsZbzhZ39kOT9sFAd+sZKPmpXtk=
    Cloud/VM/Provisioning/Methods/Emails.class/__methods__/Email_Owner.yaml:
      created_on: 2015-06-04 03:00:51.602537000 Z
      updated_on: 2015-06-04 03:00:51.602537000 Z
      size: 191
      sha1: SRTm/EgUL8eib3toG9iX/rf5wK8=
    Cloud/VM/Provisioning/Methods/AWS-Methods/__namespace__.yaml:
      created_on: 2015-06-04 03:00:51.618112000 Z
      updated_on: 2015-06-04 03:00:51.618112000 Z
      size: 163
      sha1: LooMj7Y/FLSdUIbY6NNw6wJ2iBw=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__class__.yaml:
      created_on: 2015-06-04 03:00:51.675423000 Z
      updated_on: 2015-06-05 02:52:27.340265000 Z
      size: 8290
      sha1: v790GvjNFmPRLbgfvXy6oSNTglU=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/AWS-All-ELB-Regions.yaml:
      created_on: 2015-06-04 03:00:51.746081000 Z
      updated_on: 2015-06-04 03:00:51.746081000 Z
      size: 261
      sha1: P7jDU6lsahCRzRE+sDJDAx/orNI=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/AWS-All-Instances-ELB.yaml:
      created_on: 2015-06-04 03:00:51.757229000 Z
      updated_on: 2015-06-04 03:00:51.757229000 Z
      size: 291
      sha1: CADN1c8ypD0NU4WwnT9ndgb2TPc=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/AWS-EC2-EBS-All-Instance.yaml:
      created_on: 2015-06-04 03:00:51.768192000 Z
      updated_on: 2015-06-04 03:00:51.768192000 Z
      size: 298
      sha1: epyYzYWACABGjeLx0tY/kCkJmJM=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/AWS-EC2-List-My-ELBS.yaml:
      created_on: 2015-06-04 03:00:51.779137000 Z
      updated_on: 2015-06-04 03:00:51.779137000 Z
      size: 241
      sha1: gXSORRT9XtWT5wb+U4ZzRJibQn8=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/AWS-ELB-Regions.yaml:
      created_on: 2015-06-04 03:00:51.793766000 Z
      updated_on: 2015-06-04 03:00:51.793766000 Z
      size: 237
      sha1: 0QaEAOps1qYUoCSitjXZLwKJyRs=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/AWS-List-All-ELB-Button.yaml:
      created_on: 2015-06-04 03:00:51.805868000 Z
      updated_on: 2015-06-04 03:00:51.805868000 Z
      size: 266
      sha1: pnJq5pVXqDOf+hKkqB/q2x7j+F4=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/AWS-Regions.yaml:
      created_on: 2015-06-04 03:00:51.817207000 Z
      updated_on: 2015-06-04 03:00:51.817207000 Z
      size: 241
      sha1: MOczTzER4OfqvlcgTT3tA4VYh14=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/Dialog_Instance_Delete_Security_Group.yaml:
      created_on: 2015-06-04 03:00:52.050825000 Z
      updated_on: 2015-06-04 03:00:52.050825000 Z
      size: 309
      sha1: h8SenkrEtb6AthxVTp64Z67CHHc=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/Dialog_Populate_Security_Groups.yaml:
      created_on: 2015-06-04 03:00:52.061892000 Z
      updated_on: 2015-06-04 03:00:52.061892000 Z
      size: 285
      sha1: eUMqLiRlkrP80D7Hgrjdgf52FK0=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws-ec2-list-all-regions.yaml:
      created_on: 2015-06-04 10:31:38.077093000 Z
      updated_on: 2015-06-04 10:31:38.077093000 Z
      size: 247
      sha1: TZNNajNTxfGe6zRV7KdMpAHbULI=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_add_security_group.yaml:
      created_on: 2015-06-04 03:00:51.828426000 Z
      updated_on: 2015-06-04 03:00:51.828426000 Z
      size: 265
      sha1: tEt6lVfKFxZo+zadt3krgWGDiz4=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_allowed_regions.yaml:
      created_on: 2015-06-04 03:00:51.839729000 Z
      updated_on: 2015-06-04 03:00:51.839729000 Z
      size: 269
      sha1: erHbXLf/ZgR+DO2eHSAoia0EOew=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_availability_zones.yaml:
      created_on: 2015-06-04 03:00:51.850920000 Z
      updated_on: 2015-06-04 03:00:51.850920000 Z
      size: 302
      sha1: 6OkKbq+upjfe3SKBXK88Hj/Lz3U=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_availability_zones_allowed.yaml:
      created_on: 2015-06-04 03:00:51.861824000 Z
      updated_on: 2015-06-04 03:00:51.861824000 Z
      size: 372
      sha1: BL/37QnjzdbsPF2H5DYly2RFFj4=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_delete_security_group.yaml:
      created_on: 2015-06-04 03:00:51.872695000 Z
      updated_on: 2015-06-04 03:00:51.872695000 Z
      size: 277
      sha1: Y0+B9CTHNd0uzaKGM1jbFhDZPRU=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_ebs_all_list.yaml:
      created_on: 2015-06-04 03:00:51.883551000 Z
      updated_on: 2015-06-04 03:00:51.883551000 Z
      size: 260
      sha1: yvN0pIQcOGrXValLk9zTKDkzjIE=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_ebs_device_list.yaml:
      created_on: 2015-06-04 03:00:51.894474000 Z
      updated_on: 2015-06-04 03:00:51.894474000 Z
      size: 269
      sha1: RdQxZoiE95NkJRvsQq5a7o/QNww=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_ebs_list_all_available.yaml:
      created_on: 2015-06-04 03:00:51.905239000 Z
      updated_on: 2015-06-04 03:00:51.905239000 Z
      size: 304
      sha1: j5wh6L18pq/FrjHW5vL3h+GRums=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_ebs_list_attachments.yaml:
      created_on: 2015-06-04 03:00:51.916150000 Z
      updated_on: 2015-06-04 03:00:51.916150000 Z
      size: 266
      sha1: J4Mlywt2rZ+r4bJYHHYT6RrpNw0=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_ebs_list_available_region.yaml:
      created_on: 2015-06-04 03:00:51.926920000 Z
      updated_on: 2015-06-04 03:00:51.926920000 Z
      size: 313
      sha1: /t2ikTQ+jZ4VwUiw2nDlbdhnkMc=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_elbs.yaml:
      created_on: 2015-06-04 03:00:51.938287000 Z
      updated_on: 2015-06-04 03:00:51.938287000 Z
      size: 262
      sha1: F5EpMA4ABArtt9vec/9sAFxLqDw=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_elbs_button.yaml:
      created_on: 2015-06-04 03:00:51.950898000 Z
      updated_on: 2015-06-04 03:00:51.950898000 Z
      size: 253
      sha1: L1hbVgtld6ESQuT6pgsIK2RSQ/c=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_elbs_list.yaml:
      created_on: 2015-06-04 03:00:51.962057000 Z
      updated_on: 2015-06-04 03:00:51.962057000 Z
      size: 242
      sha1: JsIeVib+CCK4+pZVbSr4Khe5OEY=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_keypair_all_list.yaml:
      created_on: 2015-06-04 03:00:51.973104000 Z
      updated_on: 2015-06-04 03:00:51.973104000 Z
      size: 278
      sha1: Gv0tkZVWU8CeqV5ibEdftC3WcvY=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_list_all_images.yaml:
      created_on: 2015-06-04 03:00:51.984446000 Z
      updated_on: 2015-06-04 03:00:51.984446000 Z
      size: 271
      sha1: F6HR4kbR2UjL9sDJsQCDG7uzny4=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_list_ebs_button.yaml:
      created_on: 2015-06-04 03:00:51.995689000 Z
      updated_on: 2015-06-04 03:00:51.995689000 Z
      size: 269
      sha1: aZ5q8NTaBiNQ+8/ut8rY4F9MIVU=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_regions.yaml:
      created_on: 2015-06-04 03:00:52.006672000 Z
      updated_on: 2015-06-04 03:00:52.006672000 Z
      size: 238
      sha1: 8zQsilwEqk11YYhzqTW+2f0HXsk=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_retrieve_instances.yaml:
      created_on: 2015-06-04 03:00:52.017754000 Z
      updated_on: 2015-06-04 03:00:52.017754000 Z
      size: 304
      sha1: l9lro4Wgzqvb+ld6tAcEjmXO2KA=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_subnets.yaml:
      created_on: 2015-06-04 03:00:52.028784000 Z
      updated_on: 2015-06-04 03:00:52.028784000 Z
      size: 246
      sha1: xzDFYvXYmcx2lB6aToevnQx5L30=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/aws_ec2_vpcs.yaml:
      created_on: 2015-06-04 03:00:52.039759000 Z
      updated_on: 2015-06-04 03:00:52.039759000 Z
      size: 249
      sha1: qdaxFNQU7umrBeN2j5LyYxEM9hs=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/Dialog_Instance_Delete_Security_Group.rb:
      created_on: 2015-06-04 03:00:52.239014000 Z
      updated_on: 2015-06-04 09:38:47.557586000 Z
      size: 3658
      sha1: bO5T0vjTWVWfDxKExVTryiT7ZIA=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/Dialog_Instance_Delete_Security_Group.yaml:
      created_on: 2015-06-04 03:00:52.239014000 Z
      updated_on: 2015-06-04 09:38:47.557586000 Z
      size: 254
      sha1: HmExl8fUEfwxGG647oqoZ//fqpI=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/Dialog_Populate_Security_Groups.rb:
      created_on: 2015-06-04 03:00:52.246028000 Z
      updated_on: 2015-06-04 09:38:28.792151000 Z
      size: 3548
      sha1: OR6jiGObkQLDm/F/KCxItHCpaa4=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/Dialog_Populate_Security_Groups.yaml:
      created_on: 2015-06-04 03:00:52.246028000 Z
      updated_on: 2015-06-04 09:38:28.792151000 Z
      size: 242
      sha1: ma459Qnsk+Yb79f3Gs+qQP3o+Fk=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_availability_zones.rb:
      created_on: 2015-06-04 03:00:52.070530000 Z
      updated_on: 2015-06-04 09:37:04.323378000 Z
      size: 2665
      sha1: ZdgFf65NnbexmDm1g8Q26MkGQa0=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_availability_zones.yaml:
      created_on: 2015-06-04 03:00:52.070530000 Z
      updated_on: 2015-06-04 09:37:04.323378000 Z
      size: 253
      sha1: oh5xi4o8Naxz6CzT7MzkX+AbSbE=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_add_security_group.rb:
      created_on: 2015-06-04 03:00:52.077057000 Z
      updated_on: 2015-06-04 09:35:19.076129000 Z
      size: 3173
      sha1: gMjDpFADcxkx62bfRotNIMB9ik8=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_add_security_group.yaml:
      created_on: 2015-06-04 03:00:52.077057000 Z
      updated_on: 2015-06-04 09:35:19.076129000 Z
      size: 232
      sha1: wN6xNBVHEanQH6PWgD7+Mj14Uqk=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_all_regions.rb:
      created_on: 2015-06-04 03:00:52.083409000 Z
      updated_on: 2015-06-04 11:21:04.479743000 Z
      size: 3197
      sha1: wpz5hWIv+n4MaQESImp+aBvNaQY=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_all_regions.yaml:
      created_on: 2015-06-04 03:00:52.083409000 Z
      updated_on: 2015-06-04 11:21:04.479743000 Z
      size: 214
      sha1: 4z/oWCLmmOGZX5G2AiF090sI90s=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_allowed_regions.rb:
      created_on: 2015-06-04 03:00:52.089392000 Z
      updated_on: 2015-06-04 09:35:49.037721000 Z
      size: 3128
      sha1: Sfc/hzc/KgAZ7IEb3iTgypExFS0=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_allowed_regions.yaml:
      created_on: 2015-06-04 03:00:52.089392000 Z
      updated_on: 2015-06-04 09:35:49.037721000 Z
      size: 226
      sha1: V5nV3La27Oq8n2r7/soI9tOVIDg=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_availability_zones_allowed.rb:
      created_on: 2015-06-04 03:00:52.095491000 Z
      updated_on: 2015-06-04 09:36:52.293701000 Z
      size: 2650
      sha1: 8a3MPf8uuirL7Lvw42iFouiQtgs=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_availability_zones_allowed.yaml:
      created_on: 2015-06-04 03:00:52.095491000 Z
      updated_on: 2015-06-04 09:36:52.293701000 Z
      size: 272
      sha1: fHtn4LszY+ttKja2T+Qjzq2sGmo=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_delete_security_group.rb:
      created_on: 2015-06-04 03:00:52.101454000 Z
      updated_on: 2015-06-04 09:36:07.484944000 Z
      size: 3038
      sha1: BljzZU9r1WMvQMEul49DyAhIyrA=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_delete_security_group.yaml:
      created_on: 2015-06-04 03:00:52.101454000 Z
      updated_on: 2015-06-04 09:36:07.484944000 Z
      size: 238
      sha1: Hbkdmf/9DFlfiwkEoE6CGGKIkeg=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_ebs_all_list.rb:
      created_on: 2015-06-04 03:00:52.107513000 Z
      updated_on: 2015-06-04 09:37:36.099640000 Z
      size: 4443
      sha1: QJS5iiNG/xG9H/7NxI7cm4BZw9Q=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_ebs_all_list.yaml:
      created_on: 2015-06-04 03:00:52.107513000 Z
      updated_on: 2015-06-04 09:37:36.099640000 Z
      size: 220
      sha1: IRy7ZK2JlHIWjZCXh9nb9UBLCj8=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_ebs_device_list.rb:
      created_on: 2015-06-04 03:00:52.113836000 Z
      updated_on: 2015-06-04 03:00:52.113836000 Z
      size: 3004
      sha1: eXNBWtuCEZV2IjLXzWLOBzrYrQI=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_ebs_device_list.yaml:
      created_on: 2015-06-04 03:00:52.113836000 Z
      updated_on: 2015-06-04 03:00:52.113836000 Z
      size: 226
      sha1: 7PBEMG8YoW648LjiXPWFJXaE2GA=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_ebs_list_all_available.rb:
      created_on: 2015-06-04 03:00:52.120001000 Z
      updated_on: 2015-06-04 09:36:49.394352000 Z
      size: 4950
      sha1: SmRmQsCxrtJxfaZO0cbDMtwqhGc=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_ebs_list_all_available.yaml:
      created_on: 2015-06-04 03:00:52.120001000 Z
      updated_on: 2015-06-04 09:36:49.394352000 Z
      size: 240
      sha1: B4d7p4jfuXq9q4X1Y/gBu3ISYdQ=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_ebs_list_attachments.rb:
      created_on: 2015-06-04 03:00:52.126479000 Z
      updated_on: 2015-06-05 08:24:36.764701000 Z
      size: 4121
      sha1: QT8I9T77WzJJN7H7jgsYQIc5ros=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_ebs_list_attachments.yaml:
      created_on: 2015-06-04 03:00:52.126479000 Z
      updated_on: 2015-06-05 08:24:36.764701000 Z
      size: 236
      sha1: P7GtbT916JDokOKnnBvFSPTi5RY=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_ebs_list_available_button.rb:
      created_on: 2015-06-04 03:00:52.132915000 Z
      updated_on: 2015-06-04 03:00:52.132915000 Z
      size: 4563
      sha1: Xo5Et9eJXCYSAV8KZiP6CMe0JbI=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_ebs_list_available_button.yaml:
      created_on: 2015-06-04 03:00:52.132915000 Z
      updated_on: 2015-06-04 03:00:52.132915000 Z
      size: 256
      sha1: jrxDcc3paG77FPHkIgPXKtG2fsg=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_elbs.rb:
      created_on: 2015-06-04 03:00:52.139467000 Z
      updated_on: 2015-06-04 09:37:42.915129000 Z
      size: 2612
      sha1: RrPngb1usgOIWOdklzUJyDqz/Jk=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_elbs.yaml:
      created_on: 2015-06-04 03:00:52.139467000 Z
      updated_on: 2015-06-04 09:37:42.915129000 Z
      size: 248
      sha1: bhsdg4tnQLiAPBaWSRNp7365aOI=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_elbs_all_list.rb:
      created_on: 2015-06-04 03:00:52.146816000 Z
      updated_on: 2015-06-04 09:38:12.086108000 Z
      size: 3973
      sha1: mRnudyabD34UGGJ1lJPew5zUqrg=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_elbs_all_list.yaml:
      created_on: 2015-06-04 03:00:52.146816000 Z
      updated_on: 2015-06-04 09:38:12.086108000 Z
      size: 231
      sha1: Y0TK9aPD+OjRSU6zG46TaNB/dy8=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_elbs_button.rb:
      created_on: 2015-06-04 03:00:52.153253000 Z
      updated_on: 2015-06-04 03:00:52.153253000 Z
      size: 2167
      sha1: YKIKUW4qjj+HvsPpV5a50/PlnoA=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_elbs_button.yaml:
      created_on: 2015-06-04 03:00:52.153253000 Z
      updated_on: 2015-06-04 03:00:52.153253000 Z
      size: 230
      sha1: +AXkuDthrGBhiMZ1hCGE8lzx6Oc=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_elbs_list.rb:
      created_on: 2015-06-04 03:00:52.159570000 Z
      updated_on: 2015-06-04 09:37:55.905311000 Z
      size: 2668
      sha1: wMcRU1o4WttIkcbVOGEcSW7pwNc=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_elbs_list.yaml:
      created_on: 2015-06-04 03:00:52.159570000 Z
      updated_on: 2015-06-04 09:37:55.905311000 Z
      size: 223
      sha1: 0p0pham7VGQq6mw3UplDQ7DYk1w=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_elbs_list_all_button.rb:
      created_on: 2015-06-04 03:00:52.165776000 Z
      updated_on: 2015-06-04 03:00:52.165776000 Z
      size: 4475
      sha1: /K8n8rrS1Y919s2OFjVDEc+O76M=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_elbs_list_all_button.yaml:
      created_on: 2015-06-04 03:00:52.165776000 Z
      updated_on: 2015-06-04 03:00:52.165776000 Z
      size: 231
      sha1: Z0WajmNqGEtiv1VX8rTc2XVedAs=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_keypair_all_list.rb:
      created_on: 2015-06-04 03:00:52.172311000 Z
      updated_on: 2015-06-04 11:30:47.966181000 Z
      size: 4265
      sha1: Vk9bOqbJLhBnhe2yTJGgu4F692E=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_keypair_all_list.yaml:
      created_on: 2015-06-04 03:00:52.172311000 Z
      updated_on: 2015-06-04 11:30:47.966181000 Z
      size: 232
      sha1: GPwIrv1mJGsCnsl3rghll8/ALyQ=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_list_all_images.rb:
      created_on: 2015-06-04 03:00:52.178774000 Z
      updated_on: 2015-06-04 09:38:03.936189000 Z
      size: 4988
      sha1: wM2PvDKPKIBXc+BDxVpdYRjJOH8=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_list_all_images.yaml:
      created_on: 2015-06-04 03:00:52.178774000 Z
      updated_on: 2015-06-04 09:38:03.936189000 Z
      size: 226
      sha1: v4CHEXVNxfF4L+Ptwhlqhhk2ZzQ=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_list_ebs_button.rb:
      created_on: 2015-06-04 03:00:52.185248000 Z
      updated_on: 2015-06-04 03:00:52.185248000 Z
      size: 1962
      sha1: TfoWNa4Fy6/z6fkrrN8gxX1xHek=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_list_ebs_button.yaml:
      created_on: 2015-06-04 03:00:52.185248000 Z
      updated_on: 2015-06-04 03:00:52.185248000 Z
      size: 237
      sha1: mXLVWPBzRdNPtpgm5QZpSnPKfj8=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_list_instances.rb:
      created_on: 2015-06-04 03:00:52.191624000 Z
      updated_on: 2015-06-04 03:00:52.191624000 Z
      size: 691
      sha1: Ztlb3pj7ZI5jbeC6lb60KXLDmoI=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_list_instances.yaml:
      created_on: 2015-06-04 03:00:52.191624000 Z
      updated_on: 2015-06-04 03:00:52.191624000 Z
      size: 225
      sha1: zeQNUWjkUfOAo70KjkYjmr7fz/k=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_list_my_elbs.rb:
      created_on: 2015-06-04 03:00:52.198073000 Z
      updated_on: 2015-06-04 03:00:52.198073000 Z
      size: 3891
      sha1: TvE27K6fOCIY9S9R0UcA0ASBkeA=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_list_my_elbs.yaml:
      created_on: 2015-06-04 03:00:52.198073000 Z
      updated_on: 2015-06-04 03:00:52.198073000 Z
      size: 220
      sha1: UpomZEuomOvi7Ossb72lYXajivE=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_regions.rb:
      created_on: 2015-06-04 03:00:52.204726000 Z
      updated_on: 2015-06-04 03:00:52.204726000 Z
      size: 2802
      sha1: n+tairE25S69ckz5ZSNBye8ZFhY=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_regions.yaml:
      created_on: 2015-06-04 03:00:52.204726000 Z
      updated_on: 2015-06-04 03:00:52.204726000 Z
      size: 229
      sha1: wYvvbnYhaffouRCRiVTy6KaZujk=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_subnets.rb:
      created_on: 2015-06-04 03:00:52.211417000 Z
      updated_on: 2015-06-04 11:27:42.518283000 Z
      size: 2432
      sha1: /wxvV0CWZSOBPZde9XAm6wWvLYM=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_subnets.yaml:
      created_on: 2015-06-04 03:00:52.211417000 Z
      updated_on: 2015-06-04 11:27:42.518283000 Z
      size: 225
      sha1: fbe3ub4qEHx0j1NJUuDbh0MVJp8=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_vpcs.rb:
      created_on: 2015-06-04 03:00:52.218462000 Z
      updated_on: 2015-06-04 09:35:30.241113000 Z
      size: 2235
      sha1: iZPo8G009wOg7jrYGoykcCqgb/4=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_ec2_vpcs.yaml:
      created_on: 2015-06-04 03:00:52.218462000 Z
      updated_on: 2015-06-04 09:35:30.241113000 Z
      size: 224
      sha1: fYTCfSuFJNihKZ/sEaSQWQLkgbw=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_elb_regions.rb:
      created_on: 2015-06-04 03:00:52.225428000 Z
      updated_on: 2015-06-04 09:35:55.455016000 Z
      size: 3094
      sha1: +iU0BDwPQse9tv37Ek06CSVzPFM=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_elb_regions.yaml:
      created_on: 2015-06-04 03:00:52.225428000 Z
      updated_on: 2015-06-04 09:35:55.455016000 Z
      size: 233
      sha1: TqrgSRvIopZRXb45qTiOWGhEzDM=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_rds_databases.rb:
      created_on: 2015-06-04 03:00:52.232195000 Z
      updated_on: 2015-06-04 03:00:52.232195000 Z
      size: 866
      sha1: JWCuDr/P7qoDAjuOOB+GbNQvNDo=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/aws_rds_databases.yaml:
      created_on: 2015-06-04 03:00:52.232195000 Z
      updated_on: 2015-06-04 03:00:52.232195000 Z
      size: 247
      sha1: IDV81FVtt22JIbnoqsHF/tpN6ZA=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/list_instances_in_selected_elb.rb:
      created_on: 2015-06-04 03:00:52.252828000 Z
      updated_on: 2015-06-04 09:37:17.896687000 Z
      size: 3642
      sha1: 0OGRTr3MftNEM3vLGphdpll2pf8=
    Cloud/VM/Provisioning/Methods/AWS-Methods/AWS-EC2-Services-Archive.class/__methods__/list_instances_in_selected_elb.yaml:
      created_on: 2015-06-04 03:00:52.252828000 Z
      updated_on: 2015-06-04 09:37:17.896687000 Z
      size: 240
      sha1: +rP/boG5zzRaVDKnn3YPaxW0rfQ=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__class__.yaml:
      created_on: 2015-06-04 10:57:25.785129000 Z
      updated_on: 2015-06-04 10:57:25.785129000 Z
      size: 6483
      sha1: 29wHmF30OIPGybKIntOk14ILI8o=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_availability_zones.yaml:
      created_on: 2015-06-05 02:20:47.002428000 Z
      updated_on: 2015-06-05 02:20:47.002428000 Z
      size: 220
      sha1: aU519OmOMICmT/bQbQ/UdBhQCSE=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_all_regions.yaml:
      created_on: 2015-06-05 02:19:56.199524000 Z
      updated_on: 2015-06-05 02:19:56.199524000 Z
      size: 211
      sha1: NhUoETefdPASFXf3Kg1uIU21Sjg=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_availability_zones_allowed.yaml:
      created_on: 2015-06-05 02:21:09.239244000 Z
      updated_on: 2015-06-05 02:21:09.239244000 Z
      size: 256
      sha1: 287LQGtM38Qv2YK1XS59h788ZVY=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_ebs_all_list.yaml:
      created_on: 2015-06-05 02:19:13.808589000 Z
      updated_on: 2015-06-05 02:19:13.808589000 Z
      size: 214
      sha1: 9Qk83DtpJfFtX6uYcecY+ciz/cY=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_ebs_device_list.yaml:
      created_on: 2015-06-05 02:18:12.894695000 Z
      updated_on: 2015-06-05 02:18:12.894695000 Z
      size: 223
      sha1: 2Vi4WEGl5lDGxnujE7jXuOWQQVI=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_ebs_list_all_available.yaml:
      created_on: 2015-06-05 02:16:09.504837000 Z
      updated_on: 2015-06-05 02:16:09.504837000 Z
      size: 244
      sha1: 5kA9MR0qbhZy3883AHPeB4Vn6ss=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_ebs_list_attachments.yaml:
      created_on: 2015-06-05 07:26:58.731891000 Z
      updated_on: 2015-06-05 07:26:58.731891000 Z
      size: 238
      sha1: D1uAPa9jD2Z3MElWG0JtLzjj5Ns=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_ebs_list_available_button.yaml:
      created_on: 2015-06-05 02:18:41.160710000 Z
      updated_on: 2015-06-05 02:18:41.160710000 Z
      size: 253
      sha1: a4nrpy98z+Z1Ep5PrqWP5h9wPvw=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_keypair_all_list.yaml:
      created_on: 2015-06-05 02:19:35.307102000 Z
      updated_on: 2015-06-05 02:19:35.307102000 Z
      size: 226
      sha1: F2fVSCeD9cqeB+CzGOueTm13fNM=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_list_all_images.yaml:
      created_on: 2015-06-05 02:15:34.119716000 Z
      updated_on: 2015-06-05 02:36:31.901188000 Z
      size: 223
      sha1: mCPe2bHtKPNkSKHiWhNbLR+bY74=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_list_all_regions.yaml:
      created_on: 2015-06-04 10:59:51.518140000 Z
      updated_on: 2015-06-04 10:59:51.518140000 Z
      size: 217
      sha1: rjKRvo0VmTTQlixGkXrkZrELu1c=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_subnets.yaml:
      created_on: 2015-06-05 02:47:31.857412000 Z
      updated_on: 2015-06-05 02:47:31.857412000 Z
      size: 199
      sha1: +EJZ7bt+ysWy8Jt6n0sYdXIAgj0=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_ec2_vpcs.yaml:
      created_on: 2015-06-05 02:44:01.360788000 Z
      updated_on: 2015-06-05 02:44:01.360788000 Z
      size: 190
      sha1: zMex/Aavw8aGKYHAagCBAUKFgDc=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/aws_list_instance_flavors.yaml:
      created_on: 2015-06-05 06:16:17.899054000 Z
      updated_on: 2015-06-05 06:16:17.899054000 Z
      size: 229
      sha1: 2wgfRtmRWyFHSwDVviL+dRgJKkI=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_availability_zones.rb:
      created_on: 2015-06-05 02:32:09.834526000 Z
      updated_on: 2015-06-10 08:12:24.460571000 Z
      size: 2682
      sha1: RSRfzRpacDtZo4citvnG4Uuiejc=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_availability_zones.yaml:
      created_on: 2015-06-05 02:32:09.834526000 Z
      updated_on: 2015-06-10 08:12:24.460571000 Z
      size: 202
      sha1: Y+3e1NzL97bJ7/y8PQTGRVvKzSA=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_all_regions.rb:
      created_on: 2015-06-05 02:30:11.884396000 Z
      updated_on: 2015-06-05 02:30:11.884396000 Z
      size: 3197
      sha1: wpz5hWIv+n4MaQESImp+aBvNaQY=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_all_regions.yaml:
      created_on: 2015-06-05 02:30:11.884396000 Z
      updated_on: 2015-06-05 02:30:11.884396000 Z
      size: 199
      sha1: ysVJLsS+mx55f3zFnW58USH5NuQ=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_availability_zones_allowed.rb:
      created_on: 2015-06-05 02:33:00.134757000 Z
      updated_on: 2015-06-05 02:33:00.134757000 Z
      size: 2650
      sha1: 8a3MPf8uuirL7Lvw42iFouiQtgs=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_availability_zones_allowed.yaml:
      created_on: 2015-06-05 02:33:00.134757000 Z
      updated_on: 2015-06-05 02:33:00.134757000 Z
      size: 214
      sha1: ZanWc+WfP1GeoVLsp05dhVjUDBg=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_ebs_all_list.rb:
      created_on: 2015-06-05 02:28:11.907879000 Z
      updated_on: 2015-06-10 10:28:22.629480000 Z
      size: 4617
      sha1: zsEV6ALEH7PT9sa25Q7a1AwdEoY=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_ebs_all_list.yaml:
      created_on: 2015-06-05 02:28:11.907879000 Z
      updated_on: 2015-06-10 10:28:22.629480000 Z
      size: 200
      sha1: yDtzE5GO74yZCD/lJfoj0SB2Vlo=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_ebs_device_list.rb:
      created_on: 2015-06-05 02:23:50.824517000 Z
      updated_on: 2015-06-10 10:05:41.309206000 Z
      size: 2907
      sha1: 2SLTVJ3M5pLj13I/Uej40yPUtGo=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_ebs_device_list.yaml:
      created_on: 2015-06-05 02:23:50.824517000 Z
      updated_on: 2015-06-10 10:05:41.309206000 Z
      size: 203
      sha1: CN9UdcJXstvm6VLu9my5Sh1Rkao=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_ebs_list_all_available.rb:
      created_on: 2015-06-05 02:25:07.100434000 Z
      updated_on: 2015-06-08 01:47:49.848102000 Z
      size: 5028
      sha1: DiT2Y+zgu+lr0gy80AbGvhmHAKo=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_ebs_list_all_available.yaml:
      created_on: 2015-06-05 02:25:07.100434000 Z
      updated_on: 2015-06-08 01:47:49.848102000 Z
      size: 210
      sha1: DvZdQ1AB7xRCKccBJX/hYhz23bI=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_ebs_list_attachments.rb:
      created_on: 2015-06-05 07:31:30.982912000 Z
      updated_on: 2015-06-10 10:20:00.163298000 Z
      size: 4326
      sha1: zDa9yrs+gtfLKchfFqbgFakfB4o=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_ebs_list_attachments.yaml:
      created_on: 2015-06-05 07:31:30.982912000 Z
      updated_on: 2015-06-10 10:20:00.163298000 Z
      size: 208
      sha1: 706HMXtUr6hbxBjaaGX1f3PZ6nk=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_ebs_list_available_button.rb:
      created_on: 2015-06-05 02:26:30.069390000 Z
      updated_on: 2015-06-10 10:11:03.836465000 Z
      size: 5865
      sha1: XSx+zsjCCZEIyVlOlPBCt5SPSQI=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_ebs_list_available_button.yaml:
      created_on: 2015-06-05 02:26:30.069390000 Z
      updated_on: 2015-06-10 10:11:03.836465000 Z
      size: 213
      sha1: RSIM3PBC9sdYgDnrKmLLCAIMicg=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_keypair_all_list.rb:
      created_on: 2015-06-05 02:29:21.443288000 Z
      updated_on: 2015-06-05 02:29:21.443288000 Z
      size: 4265
      sha1: Vk9bOqbJLhBnhe2yTJGgu4F692E=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_keypair_all_list.yaml:
      created_on: 2015-06-05 02:29:21.443288000 Z
      updated_on: 2015-06-05 02:29:21.443288000 Z
      size: 204
      sha1: 2YPJz7DjggrWzeeHsYjTfX8eOlc=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_list_all_images.rb:
      created_on: 2015-06-05 02:38:27.249363000 Z
      updated_on: 2015-06-05 02:38:27.249363000 Z
      size: 4988
      sha1: wM2PvDKPKIBXc+BDxVpdYRjJOH8=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_list_all_images.yaml:
      created_on: 2015-06-05 02:38:27.249363000 Z
      updated_on: 2015-06-05 02:38:27.249363000 Z
      size: 203
      sha1: Dqhc2VS3w8sNthOQZUyP3q3M6Ec=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_list_all_regions.rb:
      created_on: 2015-06-04 11:00:28.445467000 Z
      updated_on: 2015-06-05 02:37:33.485939000 Z
      size: 3153
      sha1: 7bDYlGmTSlIV1c6FVPyMN+jLtq0=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_list_all_regions.yaml:
      created_on: 2015-06-04 11:00:28.445467000 Z
      updated_on: 2015-06-05 02:37:33.485939000 Z
      size: 204
      sha1: i789DqA/TFOYRKQXVyRhfltmBSc=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_subnets.rb:
      created_on: 2015-06-05 02:31:15.299141000 Z
      updated_on: 2015-06-08 09:03:28.115082000 Z
      size: 2434
      sha1: Uhd8Bv/bo72CCk/u1I+aLcR8l4Q=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_subnets.yaml:
      created_on: 2015-06-05 02:31:15.299141000 Z
      updated_on: 2015-06-08 09:03:28.115082000 Z
      size: 195
      sha1: lKOdkqSek0aiycGizM9r4lQJxlc=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_vpcs.rb:
      created_on: 2015-06-05 02:48:37.072454000 Z
      updated_on: 2015-06-05 02:48:37.072454000 Z
      size: 2235
      sha1: iZPo8G009wOg7jrYGoykcCqgb/4=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_ec2_vpcs.yaml:
      created_on: 2015-06-05 02:48:37.072454000 Z
      updated_on: 2015-06-05 02:48:37.072454000 Z
      size: 192
      sha1: TY82b6VVTYX24Y3iX8yvJ6g36wk=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_list_instance_flavors.rb:
      created_on: 2015-06-05 06:12:24.684929000 Z
      updated_on: 2015-06-05 06:14:48.776859000 Z
      size: 2366
      sha1: 6ac6e0pwnjRoVjZgV5aj0v83wEo=
    Cloud/VM/Provisioning/Methods/AWS-Methods/YaleNUS-AWS-EC2-Services.class/__methods__/aws_list_instance_flavors.yaml:
      created_on: 2015-06-05 06:12:24.684929000 Z
      updated_on: 2015-06-05 06:14:48.776859000 Z
      size: 205
      sha1: v3hhGw7fLgzcRYPCHljFuTIj/vc=
